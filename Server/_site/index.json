{
  "Stockfish/CONTRIBUTING.html": {
    "href": "Stockfish/CONTRIBUTING.html",
    "title": "Contributing to Stockfish | Chess",
    "summary": "Contributing to Stockfish Welcome to the Stockfish project! We are excited that you are interested in contributing. This document outlines the guidelines and steps to follow when making contributions to Stockfish. Table of Contents Building Stockfish Making Contributions Reporting Issues Submitting Pull Requests Code Style Community and Communication License Building Stockfish In case you do not have a C++ compiler installed, you can follow the instructions from our wiki. Ubuntu Windows macOS Making Contributions Reporting Issues If you find a bug, please open an issue on the issue tracker. Be sure to include relevant information like your operating system, build environment, and a detailed description of the problem. Please note that Stockfish's development is not focused on adding new features. Thus any issue regarding missing features will potentially be closed without further discussion. Submitting Pull Requests Functional changes need to be tested on fishtest. See Creating my First Test for more details. The accompanying pull request should include a link to the test results and the new bench. Non-functional changes (e.g. refactoring, code style, documentation) do not need to be tested on fishtest, unless they might impact performance. Provide a clear and concise description of the changes in the pull request description. First time contributors should add their name to AUTHORS. Stockfish's development is not focused on adding new features. Thus any pull request introducing new features will potentially be closed without further discussion. Code Style Changes to Stockfish C++ code should respect our coding style defined by .clang-format. You can format your changes by running make format. This requires clang-format version 18 to be installed on your system. Navigate For experienced Git users who frequently use git blame, it is recommended to configure the blame.ignoreRevsFile setting. This setting is useful for excluding noisy formatting commits. git config blame.ignoreRevsFile .git-blame-ignore-revs Community and Communication Join the Stockfish discord to discuss ideas, issues, and development. Participate in the Stockfish GitHub discussions for broader conversations. License By contributing to Stockfish, you agree that your contributions will be licensed under the GNU General Public License v3.0. See Copying.txt for more details. Thank you for contributing to Stockfish and helping us make it even better!"
  },
  "Stockfish/README.html": {
    "href": "Stockfish/README.html",
    "title": "| Chess",
    "summary": "Stockfish A free and strong UCI chess engine. Explore Stockfish docs » Report bug · Open a discussion · Discord · Blog Overview Stockfish is a free and strong UCI chess engine derived from Glaurung 2.1 that analyzes chess positions and computes the optimal moves. Stockfish does not include a graphical user interface (GUI) that is required to display a chessboard and to make it easy to input moves. These GUIs are developed independently from Stockfish and are available online. Read the documentation for your GUI of choice for information about how to use Stockfish with it. See also the Stockfish documentation for further usage help. Files This distribution of Stockfish consists of the following files: README.md, the file you are currently reading. Copying.txt, a text file containing the GNU General Public License version 3. AUTHORS, a text file with the list of authors for the project. src, a subdirectory containing the full source code, including a Makefile that can be used to compile Stockfish on Unix-like systems. a file with the .nnue extension, storing the neural network for the NNUE evaluation. Binary distributions will have this file embedded. Contributing See Contributing Guide. Donating hardware Improving Stockfish requires a massive amount of testing. You can donate your hardware resources by installing the Fishtest Worker and viewing the current tests on Fishtest. Improving the code In the chessprogramming wiki, many techniques used in Stockfish are explained with a lot of background information. The section on Stockfish describes many features and techniques used by Stockfish. However, it is generic rather than focused on Stockfish's precise implementation. The engine testing is done on Fishtest. If you want to help improve Stockfish, please read this guideline first, where the basics of Stockfish development are explained. Discussions about Stockfish take place these days mainly in the Stockfish Discord server. This is also the best place to ask questions about the codebase and how to improve it. Compiling Stockfish Stockfish has support for 32 or 64-bit CPUs, certain hardware instructions, big-endian machines such as Power PC, and other platforms. On Unix-like systems, it should be easy to compile Stockfish directly from the source code with the included Makefile in the folder src. In general, it is recommended to run make help to see a list of make targets with corresponding descriptions. An example suitable for most Intel and AMD chips: cd src make -j profile-build Detailed compilation instructions for all platforms can be found in our documentation. Our wiki also has information about the UCI commands supported by Stockfish. Terms of use Stockfish is free and distributed under the GNU General Public License version 3 (GPL v3). Essentially, this means you are free to do almost exactly what you want with the program, including distributing it among your friends, making it available for download from your website, selling it (either by itself or as part of some bigger software package), or using it as the starting point for a software project of your own. The only real limitation is that whenever you distribute Stockfish in some way, you MUST always include the license and the full source code (or a pointer to where the source code can be found) to generate the exact binary you are distributing. If you make any changes to the source code, these changes must also be made available under GPL v3. Acknowledgements Stockfish uses neural networks trained on data provided by the Leela Chess Zero project, which is made available under the Open Database License (ODbL)."
  },
  "Stockfish/wiki/Advanced-topics.html": {
    "href": "Stockfish/wiki/Advanced-topics.html",
    "title": "| Chess",
    "summary": "Syzygy tablebases If the engine is searching a position that is not in the tablebases (e.g. a position with 8 pieces), it will access the tablebases (TB) during the search. If the engine reports a very large score (near 200.00), it means that it has found a winning line into a tablebase position. For general play, tablebases bring only a limited increase in strength (see our Elo measurements). When the engine is given a position to search that is in the tablebases, it will use the tablebases at the beginning of the search to preselect all good moves, i.e. all moves that preserve the win or preserve the draw while taking into account the 50-move rule. It will then perform a search only on those moves. The engine will not move immediately, unless there is only a single good move. The engine will search for the shortest possible mate, even though the position is known to be won. It is therefore clear that this behavior is not identical to what one might be used to with Nalimov tablebases. There are technical reasons for this difference, the main technical reason being that Nalimov tablebases use the DTM metric (distance-to-mate), while the Syzygy tablebases use a variation of the DTZ metric (distance-to-zero, zero meaning any move that resets the 50-move counter). This special metric is one of the reasons that the Syzygy tablebases are more compact than Nalimov tablebases, while still storing all the information needed for optimal play and in addition being able to take into account the 50-move rule. The use of 7-piece tablebases is possible with Stockfish and requires around 17TB of storage. Furthermore, the system must allow a single process to open all 1511 files, which sometimes requires increasing the default limit (e.g. ulimit -n). Large Pages Stockfish supports large pages on Linux and Windows. Large pages make the hash access more efficient, improving the engine speed, especially on large hash sizes. The support is automatic, Stockfish attempts to use large pages when available and will fall back to regular memory allocation when this is not the case. Typical increases are 5-10% in terms of nodes per second, but speed increases up to 30% have been measured. Linux Large page support on Linux is obtained by the Linux kernel transparent huge pages functionality. Typically, transparent huge pages are already enabled, and no configuration is needed. Windows The use of large pages requires \"Lock Pages in Memory\" privilege. See Enable the Lock Pages in Memory Option (Windows) on how to enable this privilege, then run RAMMap to double-check that large pages are used. We suggest that you reboot your computer after you have enabled large pages, because long Windows sessions suffer from memory fragmentation, which may prevent Stockfish from getting large pages: a fresh session is better in this regard. Measure the speed of Stockfish The \"speed of Stockfish\" is the number of nodes (positions) Stockfish can search per second. Nodes per second (nps) is a useful benchmark number as the same version of Stockfish playing will play stronger with larger nps. Different versions of Stockfish will play at different nps, for example, if the NNUE network architecture changes, but in this case the nps difference is not related to the strength difference. Note Stop all other applications when measuring the speedup of Stockfish Run at least 20 default benches (depth 13) for each build of Stockfish to have accurate measures A speedup of 0.3% could be meaningless (i.e. within the measurement noise) To measure the speed of several builds of Stockfish, use one of these applications: All OS: pyshbench: Latest release pyshbench bash script bench_parallel.sh (run bash bench_parallel.sh for the help) it might be that you have to install gawk as well on your system to not get syntax errors. Click to view #!/bin/bash _bench () { ${1} << EOF > /dev/null 2>> ${2} bench 16 1 ${depth} default depth EOF } # _bench function customization example # setoption name SyzygyPath value C:\\table_bases\\wdl345;C:\\table_bases\\dtz345 # bench 128 4 ${depth} default depth if [[ ${#} -ne 4 ]]; then cat << EOF usage: ${0} ./stockfish_base ./stockfish_test depth n_runs fast bench: ${0} ./stockfish_base ./stockfish_test 13 10 slow bench: ${0} ./stockfish_base ./stockfish_test 20 10 EOF exit 1 fi sf_base=${1} sf_test=${2} depth=${3} n_runs=${4} # preload of CPU/cache/memory printf \"preload CPU\" (_bench ${sf_base} sf_base0.txt)& (_bench ${sf_test} sf_test0.txt)& wait # temporary files initialization : > sf_base0.txt : > sf_test0.txt : > sf_temp0.txt # bench loop: SMP bench with background subshells for ((k=1; k<=${n_runs}; k++)); do printf \"\\rrun %3d /%3d\" ${k} ${n_runs} # swap the execution order to avoid bias if [ $((k%2)) -eq 0 ]; then (_bench ${sf_base} sf_base0.txt)& (_bench ${sf_test} sf_test0.txt)& wait else (_bench ${sf_test} sf_test0.txt)& (_bench ${sf_base} sf_base0.txt)& wait fi done # text processing to extract nps values cat sf_base0.txt | grep second | grep -Eo '[0-9]{1,}' > sf_base1.txt cat sf_test0.txt | grep second | grep -Eo '[0-9]{1,}' > sf_test1.txt for ((k=1; k<=${n_runs}; k++)); do echo ${k} >> sf_temp0.txt done printf \"\\rrun sf_base sf_test diff\\n\" paste sf_temp0.txt sf_base1.txt sf_test1.txt | awk '{printf \"%3d %8d %8d %8+d\\n\", $1, $2, $3, $3-$2}' #paste sf_temp0.txt sf_base1.txt sf_test1.txt | awk '{printf \"%3d\\t%8d\\t%8d\\t%7+d\\n\", $1, $2, $3, $3-$2}' paste sf_base1.txt sf_test1.txt | awk '{printf \"%d\\t%d\\t%d\\n\", $1, $2, $2-$1}' > sf_temp0.txt # compute: sample mean, 1.96 * std of sample mean (95% of samples), speedup # std of sample mean = sqrt(NR/(NR-1)) * (std population) / sqrt(NR) cat sf_temp0.txt | awk '{sum1 += $1 ; sumq1 += $1**2 ;sum2 += $2 ; sumq2 += $2**2 ;sum3 += $3 ; sumq3 += $3**2 } END {printf \"\\nsf_base = %8d +/- %6d (95%)\\nsf_test = %8d +/- %6d (95%)\\ndiff = %8d +/- %6d (95%)\\nspeedup = %.5f% +/- %.3f% (95%)\\n\\n\", sum1/NR , 1.96 * sqrt(sumq1/NR - (sum1/NR)**2)/sqrt(NR-1) , sum2/NR , 1.96 * sqrt(sumq2/NR - (sum2/NR)**2)/sqrt(NR-1) , sum3/NR , 1.96 * sqrt(sumq3/NR - (sum3/NR)**2)/sqrt(NR-1) , 100*(sum2 - sum1)/sum1 , 100 * (1.96 * sqrt(sumq3/NR - (sum3/NR)**2)/sqrt(NR-1)) / (sum1/NR) }' # remove temporary files rm -f sf_base0.txt sf_test0.txt sf_temp0.txt sf_base1.txt sf_test1.txt Bench two git branches with bench_parallel #!/bin/bash if [ \"$#\" -ne 5 ]; then echo \"Usage: $0 branch1 branch2 depth runs compile_flags\" exit 1 fi BRANCH1=$1 BRANCH2=$2 DEPTH=$3 RUNS=$4 COMPILE_FLAGS=$5 set -e echo \"Switching to $BRANCH1 and building...\" git switch $BRANCH1 make clean make -j profile-build EXE=stockfish-$BRANCH1 $COMPILE_FLAGS echo \"Switching to $BRANCH2 and building...\" git switch $BRANCH2 make clean make -j profile-build EXE=stockfish-$BRANCH2 $COMPILE_FLAGS echo \"Running bench_parallel.sh with stockfish-$BRANCH1 and stockfish-$BRANCH2...\" ./bench_parallel.sh ./stockfish-$BRANCH1 ./stockfish-$BRANCH2 $DEPTH $RUNS speedtest command Windows only: FishBench: Latest release Fishbench v6.0 Buildtester: Latest release Buildtester 1.4.7.0 Cluster version There is a branch developed with a MPI cluster implementation of Stockfish, allowing stockfish to run on clusters of compute nodes connected with a high-speed network. See https://github.com/official-stockfish/Stockfish/pull/1571 for some discussion of the initial implementation and https://github.com/official-stockfish/Stockfish/pull/1931 for some early performance results. Feedback on this branch is welcome! Here are some git commands for people interested to test this MPI/Cluster idea: If you don't have the cluster branch yet on your local git repository, you can download the latest state of the official-stockfish/cluster branch, then switch to it with the following commands: git fetch official cluster:cluster git checkout -f cluster After switching to the cluster branch as above, see the README.md for detailed instructions on how to compile and run the branch. TL;DR: make clean make -j ARCH=x86-64-avx2 COMPCXX=mpic++ build mpirun -np 4 ./stockfish bench Classical versus NNUE evaluation Current versions of Stockfish use a strong neural network (NNUE) to evaluate positions. The venerable \"Classical\" evaluation, which was about 250 Elo points weaker, was removed from the codebase in August 2023. Both approaches assign a value to a position that is used in alpha-beta (PVS) search to find the best move. The classical evaluation computed this value as a function of various chess concepts, handcrafted by experts, tested and tuned using fishtest. The NNUE evaluation computes this value with a neural network based on basic inputs (e.g. piece positions only). The network is optimized and trained on the evaluations of millions of positions at moderate search depth. The NNUE evaluation was first introduced in shogi, and ported to Stockfish afterward. It can be evaluated efficiently on CPUs, and exploits the fact that only parts of the neural network need to be updated after a typical chess move. The nodchip repository provided the first version of the needed tools to train and develop the NNUE networks. Today, more advanced training tools are available in the nnue-pytorch repository, while data generation tools are available in a dedicated branch. On CPUs supporting modern vector instructions (avx2 and similar), the NNUE evaluation results in much stronger playing strength, even if the nodes per second computed by the engine is somewhat lower (roughly 50% of nps is typical). Note The NNUE evaluation depends on the Stockfish binary and the network parameter file (see the EvalFile UCI option). Not every parameter file is compatible with a given Stockfish binary, but the default value of the EvalFile UCI option is the name of a network that is guaranteed to be compatible with that binary. To use the NNUE evaluation, the additional data file with neural network parameters needs to be available. Normally, this file is already embedded in the binary or it can be downloaded. The filename for the default (recommended) net can be found as the default value of the EvalFile UCI option, with the format nn-[SHA256 first 12 digits].nnue (for instance, nn-c157e0a5755b.nnue). This file can be downloaded from https://tests.stockfishchess.org/api/nn/[filename] replacing [filename] as needed."
  },
  "Stockfish/wiki/Compiling-from-source.html": {
    "href": "Stockfish/wiki/Compiling-from-source.html",
    "title": "| Chess",
    "summary": "General make target [ARCH=arch] [COMP=compiler] [COMPCXX=cxx] Targets help > Display architecture details profile-build > standard build with profile-guided optimization build > skip profile-guided optimization net > Download the default nnue nets strip > Strip executable install > Install executable clean > Clean up Archs native > select the best architecture for the host processor (default) x86-64-vnni512 > x86 64-bit with vnni 512bit support x86-64-vnni256 > x86 64-bit with vnni 512bit support, limit operands to 256bit wide x86-64-avx512 > x86 64-bit with avx512 support x86-64-avxvnni > x86 64-bit with vnni 256bit support x86-64-bmi2 > x86 64-bit with bmi2 support x86-64-avx2 > x86 64-bit with avx2 support x86-64-sse41-popcnt > x86 64-bit with sse41 and popcnt support x86-64-modern > deprecated, currently x86-64-sse41-popcnt x86-64-ssse3 > x86 64-bit with ssse3 support x86-64-sse3-popcnt > x86 64-bit with sse3 compile and popcnt support x86-64 > x86 64-bit generic (with sse2 support) x86-32-sse41-popcnt > x86 32-bit with sse41 and popcnt support x86-32-sse2 > x86 32-bit with sse2 support x86-32 > x86 32-bit generic (with mmx compile support) ppc-64 > PPC 64-bit ppc-64-altivec > PPC 64-bit with altivec support ppc-64-vsx > PPC 64-bit with vsx support ppc-32 > PPC 32-bit armv7 > ARMv7 32-bit armv7-neon > ARMv7 32-bit with popcnt and neon armv8 > ARMv8 64-bit with popcnt and neon armv8-dotprod > ARMv8 64-bit with popcnt, neon and dot product support e2k > Elbrus 2000 apple-silicon > Apple silicon ARM64 general-64 > unspecified 64-bit general-32 > unspecified 32-bit riscv64 > RISC-V 64-bit loongarch64 > LoongArch 64-bit loongarch64-lsx > LoongArch 64-bit with SIMD eXtension loongarch64-lasx > LoongArch 64-bit with Advanced SIMD eXtension Compilers gcc > GNU compiler (default) mingw > GNU compiler with MinGW under Windows clang > LLVM Clang compiler icx > Intel oneAPI DPC++/C++ Compiler ndk > Google NDK to cross-compile for Android Simple examples If you don't know what to do, you likely want to run: Fast compile for most common modern CPUs make -j build Slow compile for 64-bit systems make -j build ARCH=x86-64 Slow compile for 32-bit systems make -j build ARCH=x86-32 Advanced examples For experienced users looking for performance: # Providing no ARCH so it will try to find the best ARCH for you make -j profile-build make -j profile-build ARCH=x86-64-bmi2 make -j profile-build ARCH=x86-64-bmi2 COMP=gcc COMPCXX=g++-9.0 make -j build ARCH=x86-64-ssse3 COMP=clang See also: How to lower compilation time and How to optimize for your CPU. Linux On Unix-like systems, it should be easy to compile Stockfish directly from the source code with the included Makefile in the folder src. In general it is recommended to run make help to see a list of make targets with corresponding descriptions. cd src make help make -j profile-build ARCH=x86-64-avx2 Windows About MSYS2 & MinGW-w64 MSYS2 is a software distribution and building platform for Windows. It provides a Unix-like environment, a command line interface, and a software repository, making it easy to install software on Windows or build software on Windows with either the GCC compiler or the Clang/LLVM compiler and using the Microsoft Visual C++ Runtime (mvscrt, shipped with all Windows versions) or the newer Microsoft Universal C Runtime (ucrt, shipped by default starting with Windows 10). MSYS2 consists of several subsystems, msys2, mingw32, and mingw64: The mingw32 and mingw64 subsystems are native Windows applications that use either the mvscrt or the ucrt. The msys2 subsystem provides an emulated mostly-POSIX-compliant environment based on Cygwin. Each subsystem has an associated \"terminal/shell\", which is essentially a set of environment variables that allows the subsystems to co-operate properly: MSYS2 MinGW x64, to build Windows-native 64-bit applications with GCC compiler using mvscrt. MSYS2 MinGW x86, to build Windows-native 32-bit applications using GCC compiler using mvscrt. MSYS2 MSYS, to build POSIX applications using the Cygwin compatibility layer. MSYS2 MinGW UCRT x64, to build Windows-native 64-bit applications with GCC compiler using ucrt. MSYS2 MinGW Clang x64, to build Windows-native 64-bit applications with Clang/LLVM compiler using ucrt. Refer to the MSYS2 homepage for more detailed information on the MSYS2 subsystems and terminals/shells. Installing MSYS2 Install MSYS2 with WinGet WinGet is the Microsoft command line tool enabling users to discover, install, upgrade, remove and configure applications on Windows 10, Windows 11, and Windows Server 2025 computers. This tool is the client interface to the Windows Package Manager service. Open a powershell and run: winget install MSYS2.MSYS2 Install MSYS2 with Chocolatey (for Windows 8) Chocolatey is a third-party command line package manager for Windows 8, Windows 10 and Windows 11, always run Chocolatey commands in a powershell/cmd with administrator rights (right click on Start menu, select Windows Powershell (Admin) or Command Prompt (Admin)): Open a powershell (admin) (not a cmd) and copy the official Chocolatey install command to install Chocolatey In a powershell/cmd (admin) execute the command: choco install msys2 -y As alternative write this text file install_choco_msys2.cmd, right click and select Run as administrator: Click to view @echo off ::https://chocolatey.org/install ::https://chocolatey.org/courses/installation/installing?method=installing-chocolatey?quiz=true ::download and run install.ps1 \"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" ::install msys2 choco install msys2 -y Install MSYS2 with the official installer Download and start the one-click installer for MSYS2. MSYS2 no longer support an installer for Windows 32-bit, the latest provided is not able to install packages. The installer runs a MSYS2 MSYS shell as a last step. Update the core packages by typing and executing pacman -Syuu. When finished, close the MSYS2 MSYS shell. With MSYS2 installed to C:\\msys64 your home directory will be C:\\msys64\\home\\<your_username>. Note that within the MSYS2 shell, paths are written in Unix-like way: Windows path: C:\\msys64 Unix-like path: /c/msys64 Windows path: C:\\msys64\\home Unix-like path: /home or /c/msys64/home Tip You can also use ls to list the files and folders in a directory, similar to how you would use dir in Windows. GCC This works with all the Windows versions. Using your favorite text editor, copy and paste the following bash script, calling it makefish.sh: 64-bit Windows #!/bin/bash # makefish.sh # install packages if not already installed pacman -S --noconfirm --needed unzip make mingw-w64-x86_64-gcc branch='master' github_user='official-stockfish' # download the Stockfish source code wget -O ${branch}.zip https://github.com/${github_user}/Stockfish/archive/refs/heads/${branch}.zip unzip -o ${branch}.zip cd Stockfish-${branch}/src file_nnue=$(grep 'define.*EvalFileDefaultName' evaluate.h | grep -Ewo 'nn-[a-z0-9]{12}.nnue') ls *.nnue | grep -v ${file_nnue} | xargs -d '\\n' -r rm -- # check all given flags check_flags () { for flag; do printf '%s\\n' \"$flags\" | grep -q -w \"$flag\" || return 1 done } # find the CPU architecture output=$(g++ -Q -march=native --help=target) flags=$(printf '%s\\n' \"$output\" | awk '/\\[enabled\\]/ {print substr($1, 3)}' | tr '\\n' ' ') arch=$(printf '%s\\n' \"$output\" | awk '/march/ {print $NF; exit}' | tr -d '[:space:]') if check_flags 'avx512vnni' 'avx512dq' 'avx512f' 'avx512bw' 'avx512vl'; then arch_cpu='x86-64-vnni256' elif check_flags 'avx512f' 'avx512bw'; then arch_cpu='x86-64-avx512' elif check_flags 'bmi2' && [ $arch != 'znver1' ] && [ $arch != 'znver2' ]; then arch_cpu='x86-64-bmi2' elif check_flags 'avx2'; then arch_cpu='x86-64-avx2' elif check_flags 'sse4.1' 'popcnt'; then arch_cpu='x86-64-sse41-popcnt' elif check_flags 'ssse3'; then arch_cpu='x86-64-ssse3' elif check_flags 'sse3' 'popcnt'; then arch_cpu='x86-64-sse3-popcnt' else arch_cpu='x86-64' fi # build the fastest Stockfish executable make -j profile-build ARCH=${arch_cpu} COMP=mingw make strip mv stockfish.exe ../../stockfish_${arch_cpu}.exe make clean cd 32-bit Windows #!/bin/bash # makefish.sh # install packages if not already installed pacman -S --noconfirm --needed unzip make mingw-w64-i686-gcc branch='master' github_user='official-stockfish' # download the Stockfish source code wget -O ${branch}.zip https://github.com/${github_user}/Stockfish/archive/refs/heads/${branch}.zip unzip -o ${branch}.zip cd Stockfish-${branch}/src file_nnue=$(grep 'define.*EvalFileDefaultName' evaluate.h | grep -Ewo 'nn-[a-z0-9]{12}.nnue') ls *.nnue | grep -v ${file_nnue} | xargs -d '\\n' -r rm -- # find the CPU architecture gcc_enabled=$(g++ -Q -march=native --help=target | grep \"\\[enabled\\]\") gcc_arch=$(g++ -Q -march=native --help=target | grep \"march\") if [[ \"${gcc_enabled}\" =~ \"-mpopcnt \" && \"${gcc_enabled}\" =~ \"-msse4.1 \" ]] ; then arch_cpu=\"x86-32-sse41-popcnt\" elif [[ \"${gcc_enabled}\" =~ \"--msse2 \" ]] ; then arch_cpu=\"x86-32-sse2\" else arch_cpu=\"x86-32\" fi # build the fastest Stockfish executable make -j profile-build ARCH=${arch_cpu} COMP=mingw make strip mv stockfish.exe ../../stockfish_${arch_cpu}.exe make clean cd Start a MSYS2 MinGW x64 shell (not a MSYS2 MSYS one), C:\\msys64\\mingw64.exe, or start a MSYS2 MinGW x86 shell, C:\\msys64\\mingw32.exe, to build a 32 bit application. Navigate to wherever you saved the script (e.g. type and execute cd '/d/Program Files/Stockfish' to navigate to D:\\Program Files\\Stockfish). Run the script by typing and executing bash makefish.sh. Clang/LLVM With Windows version older than Windows 10 you could need to install the Microsoft Windows Universal C Runtime. Using your favorite text editor, copy and paste the following bash script, calling it makefish.sh: 64-bit Windows #!/bin/bash # makefish.sh # install packages if not already installed pacman -S --noconfirm --needed unzip make mingw-w64-clang-x86_64-clang branch='master' github_user='official-stockfish' # download the Stockfish source code wget -O ${branch}.zip https://github.com/${github_user}/Stockfish/archive/refs/heads/${branch}.zip unzip -o ${branch}.zip cd Stockfish-${branch}/src file_nnue=$(grep 'define.*EvalFileDefaultName' evaluate.h | grep -Ewo 'nn-[a-z0-9]{12}.nnue') ls *.nnue | grep -v ${file_nnue} | xargs -d '\\n' -r rm -- # check all given flags check_flags () { for flag; do printf '%s\\n' \"$flags\" | grep -q -w \"$flag\" || return 1 done } # find the CPU architecture output=$(clang++ -E - -march=native -### 2>&1) flags=$(printf '%s\\n' \"$output\" | grep -o '\"-target-feature\" \"[^\"]*\"' | cut -d '\"' -f 4 | grep '^\\+' | cut -c 2- | tr '\\n' ' ') arch=$(printf '%s\\n' \"$output\" | grep -o '\"-target-cpu\" \"[^\"]*\"' | cut -d '\"' -f 4) if check_flags 'avx512vnni' 'avx512dq' 'avx512f' 'avx512bw' 'avx512vl'; then arch_cpu='x86-64-vnni256' elif check_flags 'avx512f' 'avx512bw'; then arch_cpu='x86-64-avx512' elif check_flags 'bmi2' && [ $arch != 'znver1' ] && [ $arch != 'znver2' ]; then arch_cpu='x86-64-bmi2' elif check_flags 'avx2'; then arch_cpu='x86-64-avx2' elif check_flags 'sse4.1' 'popcnt'; then arch_cpu='x86-64-sse41-popcnt' elif check_flags 'ssse3'; then arch_cpu='x86-64-ssse3' elif check_flags 'sse3' 'popcnt'; then arch_cpu='x86-64-sse3-popcnt' else arch_cpu='x86-64' fi # build the fastest Stockfish executable make -j profile-build ARCH=${arch_cpu} COMP=clang make strip COMP=clang mv stockfish.exe ../../stockfish_${arch_cpu}.exe make clean COMP=clang cd Start a MSYS2 MinGW Clang x64 shell, C:\\msys64\\clang64.exe. Navigate to wherever you saved the script (e.g. type and execute cd '/d/Program Files/Stockfish' to navigate to D:\\Program Files\\Stockfish). Run the script by typing and executing bash makefish.sh. Microsoft Visual Studio Caution Building Stockfish with Visual Studio is not officially supported. It is required to explicitly set the stack reserve to avoid crashes. See point 5. below. If you want to use MSVC to get a \"optimized\" build, you can change these settings in the IDE: Add \"NDEBUG;USE_POPCNT;USE_PEXT\" to preprocessor definitions. Optionally, depending on your processor's support, add one of the following definitions: USE_AVX512 / USE_AVX2 / USE_SSSE3 / USE_SSE2 / USE_MMX. Also, if your processor supports VNNI instructions, add the USE_AVXVNNI definition. For a 64-bit target, if your CPU supports AVX or later extensions set one of the following: /arch:AVX or /arch:AVX2 or /arch:AVX512. Optimization flags: /O2, /Oi, /Ot, /Oy, /GL Static link with runtime: /MT. Disable stack cookies: /GS-. Set stack reserve to 8388608 in under Linker -> System or use the linker option /STACK:reserve=8388608. Disable debugging information in compiler/linker. (VS 2017 only): Make a PGO instrument build(set under General), it should depend on \"pgort140.dll\" and it probably won't start. (VS 2017 only): Copy pgort140.dll from \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\bin\\Hostx64\\x64\" to the output folder. Run bench with the instrument build(very slow) and quit, it should generate \"Stockfish.pgd\" and \"Stockfish!1.pgc\". Make a PGO optimized build(set under General), should show something like: 1>0 of 0 ( 0.0%) original invalid call sites were matched. 1>0 new call sites were added. 1>54 of 4076 ( 1.32%) profiled functions will be compiled for speed, and the rest of the functions will be compiled for size 1>18615 of 46620 inline instances were from dead/cold paths 1>4076 of 4076 functions (100.0%) were optimized using profile data 1>14499840744 of 14499840744 instructions (100.0%) were optimized using profile data Enjoy, local tests show comparable speed to GCC builds. Troubleshooting If this tutorial will not work on your pc, you may try to change the Windows Security settings in via Windows Security >> App & Browser Control >> Exploit Protection Settings: Try to turn off \"Force randomization for images (Mandatory ASLR)\", if this not solve the problem then, Try to turn off also \"Randomize memory allocations (Bottom-up ASLR)\" . Using other MinGW-w64 with MSYS2 To use with MSYS2 a MinGW-w64 built by other projects, simply follow these instructions (Windows 64 bit): Download another version of MinGW-w64, e.g. MinGW-w64 (64-bit) GCC 8.1.0, extract the mingw64 folder renaming it to mingw64-810, copy the folder into C:\\msys64, check to have the directory C:\\msys64\\mingw64-810\\bin Build Stockfish writing and executing this bash script Click to view #!/bin/bash # makefish.sh # set PATH to use GCC 8.1.0 if [ -d \"/mingw64-810/bin\" ] ; then PATH=\"/mingw64-810/bin:${PATH}\" else echo \"folder error\" exit 1 fi branch='master' github_user='official-stockfish' # download the Stockfish source code wget -O ${branch}.zip https://github.com/${github_user}/Stockfish/archive/refs/heads/${branch}.zip unzip ${branch}.zip cd Stockfish-${branch}/src # find the CPU architecture # CPU without popcnt and bmi2 instructions (e.g. older than Intel Sandy Bridge) arch_cpu=x86-64 # CPU with bmi2 instruction (e.g. Intel Haswell or newer) if [ \"$(g++ -Q -march=native --help=target | grep mbmi2 | grep enabled)\" ] ; then # CPU AMD zen if [ \"$(g++ -Q -march=native --help=target | grep march | grep 'znver[12]')\" ] ; then arch_cpu=x86-64-avx2 else arch_cpu=x86-64-bmi2 fi # CPU with popcnt instruction (e.g. Intel Sandy Bridge) elif [ \"$(g++ -Q -march=native --help=target | grep mpopcnt | grep enabled)\" ] ; then arch_cpu=x86-64-sse41-popcnt fi # build the Stockfish executable make profile-build ARCH=${arch_cpu} COMP=mingw make strip mv stockfish.exe ../../stockfish_${arch_cpu}.exe make clean cd To use the compiler in the CLI write and run the script use_gcc810.sh in the user home folder # set PATH to use GCC 8.1.0 # use this command: source use_gcc810.sh if [ -d \"/mingw64-810/bin\" ] ; then PATH=\"/mingw64-810/bin:${PATH}\" else echo \"folder error\" fi macOS On macOS 10.14 or higher, it is possible to use the Clang compiler provided by Apple to compile Stockfish out of the box, and this is the method used by default in our Makefile (the Makefile sets the macosx-version-min=10.14 flag to select the right libc++ library for the Clang compiler with recent c++17 support). But it is quite possible to compile and run Stockfish on older versions of macOS! Below we describe a method to install a recent GNU compiler on these Macs, to get the c++17 support. We have tested the following procedure to install gcc10 on machines running macOS 10.7, macOS 10.9 and macOS 10.13. Install Xcode for your machine. Install Apple command-line developer tools for Xcode, by typing the following command in a Terminal: sudo xcode-select --install Go to the Stockfish \"src\" directory, then try a default build and run Stockfish: make clean make build make net ./stockfish If step 3 worked, congrats! You have a compiler recent enough on your Mac to compile Stockfish. If not, continue with step 5 to install GNU gcc10 :-) Install the MacPorts package manager (https://www.macports.org/install.php), for instance using the fast method in the \"macOS Package (.pkg) Installer\" section of the page. Use the \"port\" command to install the gcc10 package of MacPorts by typing the following command: sudo port install gcc10 With this step, MacPorts will install the gcc10 compiler under the name \"g++-mp-10\" in the /opt/local/bin directory: which g++-mp-10 /opt/local/bin/g++-mp-10 <--- answer You can now go back to the \"src\" directory of Stockfish, and try to build Stockfish by pointing at the right compiler: make clean make build COMP=gcc COMPCXX=/opt/local/bin/g++-mp-10 make net ./stockfish Enjoy Stockfish on macOS! See this pull request for further discussion. For Android You can build Stockfish for your ARM CPU based mobile Android device, using the Stockfish supplied Makefile. Supported architectures are: armv7: 32 bit ARM CPUs without Neon extension armv7-neon: 32 bit ARM CPUs with Neon SIMD Instruction Set Extension armv8: 64 bit ARM CPUs, with Neon extension As most modern Android smartphones and tablets nowadays use armv8 64 bit CPUs, we will cover these in this example. Before you try to build Stockfish, make sure that you know what kind of CPU architecture your device uses. You will have to specify one of the three mentioned architectures later on in the MAKE command by giving the \"ARCH=...\" variable on the command line. Furthermore you should be aware of the fact that Stockfish is just the chess engine. You cannot use it stand-alone, rather you need a host program, i.e. a Chess GUI that displays the chess board, takes your moves etc. on the one hand, and on the other hand \"talks\" to the Stockfish chess engine so that it analyses the chess position in a game and calculates its moves or variations, and gives that back to the GUI for display. The Chess GUI which is probably used most often on Android is Droidfish, so we will cover this here. You can get it from the F-Droid alternative app store. To build Stockfish, you need: The Android Native Development Kit (NDK), which contains a C/C++ compiler toolchain and all required headers and libraries to build native software for Android. POSIX compatible build enviroment with GNU coreutils, fileutilsand the make, git, expect (if you want to run the testsuite) and either wget or curl utilities. On Linux, install those tools using the package manager of your Linux distribution. On Windows, you can use MSYS2. We will assume further down in this example that you installed it to \"C:\\msys64\". Adapt the instructions accordingly, if you installed it elsewhere. Please see how to compile on Windows for more details about MSYS2, but please note that you ONLY need to install the basic MSYS environment and the package groups base-devel, expect and git with this command: pacman -S --noconfirm --needed base-devel expect git wget curl You do NOT need any of the MINGW64, MINGW32 nor the CLANG64 compiler toolchain for an Android build. We will use the Android NDK compiler toolchain instead. To get the Android NDK, you have two options: a) If you already have Android Studio installed, use its built-in SDK manager to download and install the NDK, as follows: On the \"Welcome to Android Studio\" start page of the IDE, click \"Customize\" on the left pane, then click \"All Settings...\" on the bottom. This should open the \"Android SDK\" maintenance dialog. Click on the \"SDK Tools\" tab on top of the list window. Click and select the \"NDK (Side by Side)\" option and then click on \"OK\" This will download and install the latest NDK version under the directory of the \"Android SDK Location\" directory. In this example, for the Windows environment we will assume that Android Studio is installed in \"C:\\Android\\Android Studio\", and that the Android SDK is installed in \"C:\\Android\\Sdk\". The NDK will then have been installed in \"C:\\Android\\Sdk\\ndk\" by the above installation process. b) If you do NOT have Android Studio installed, don't worry! You don't need it. To download just the Android NDK, go to https://developer.android.com/ndk/downloads and pick the latest version for your platform. In this example we will stick to either Windows or Linux, but the Mac version should be not much different to use. Note The latest LTS version is r23b (23.1.7779620). This will work fine. The minimum version you need is r21e (21.4.7075529), so if you already have that, you are all set. If you downloaded it directly, unzip it to \"C:\\Android\\Sdk\\ndk\", or if you are on Linux, inside your home directory to /home/(your user name)/Android/Sdk/ndk When the installation is finished, locate the NDK compiler toolchain directory. On Windows, this should be something like: \"C:\\Android\\Sdk\\ndk\\23.1.7779620\\toolchains\\llvm\\prebuilt\\windows-x86_64\" On Linux, the path might look like: /home/johndoe/Android/Sdk/ndk/23.1.7779620/toolchains/llvm/prebuilt/linux-x86_64 On Linux, we are now almost ready to go. On Windows however, to simplify its use with MSYS2, we will now create a symbolic link to that directory inside the MSYS2 installation directory. To do that, open a CMD.EXE command prompt with Administrator privileges, and use the Windows command MKLINK as follows: mklink /D \"C:\\msys64\\Android\" \"C:\\Android\\Sdk\\ndk\\23.1.7779620\\toolchains\\llvm\\prebuilt\\windows-x86_64\" Now the Android NDK compiler toolchain is available from inside an MSYS environment terminal session in the same way as the MINGW64 toolchain would be, and we don't have to type such long path names anymore. On Windows, you should now start the MSYS environment launcher. This will give you a terminal session with the Bash (1) shell. The PATH environment variable DOES NOT include a compiler toolchain yet. Verify this by entering: $ echo $PATH /usr/local/bin:/usr/bin:/bin:/opt/bin:/c/Windows/System32:/c/Windows:/c/Windows/System32/Wbem:/c/Windows/System32/WindowsPowerShell/v1.0/:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl On Linux, you can just open a plain terminal session. Now we prepend the NDK compiler toolchain bin/ subdirectory to our PATH: On Windows: $ export PATH=/Android/bin:$PATH On Linux: $ export PATH=/home/johndoe/Android/Sdk/ndk/23.1.7779620/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH Note These PATH settings are in effect only for your current session. Now you should be able to call the compiler we will use from the command line. Let's check which version we have, this example output is from Windows, the Linux output should be quite similar. $ aarch64-linux-android21-clang++ --version Android (7019983 based on r365631c3) clang version 9.0.9 (https://android.googlesource.com/toolchain/llvm-project a2a1e703c0edb03ba29944e529ccbf457742737b) (based on LLVM 9.0.9svn) Target: aarch64-unknown-linux-android21 Thread model: posix InstalledDir: C:\\msys64\\Android\\bin $ If you get an error message that the command \"aarch64-linux-android21-clang++\" could not be found, please go back and check that you have got all the path names correct in the above steps. Now we will checkout the Stockfish source code with git, and start the build. The steps for Windows in the MSYS environment session and for Linux are now basically the same. In your home directory, make subdirectories for the git checkout: $ mkdir -p ~/repos/official-stockfish $ cd ~/repos/official-stockfish $ git clone https://github.com/official-stockfish/Stockfish.git . . . $ cd Stockfish/src Now lets start the build. First we can display a help page with all the supported make targets (and ignore them :-) $ make help Next we download the NNUE neural network that powers Stockfish's evaluation. By default, it will be embedded into the compiled stockfish executable. $ make net This should download <some hex hash code...>.nnue file. If you get an error message that neither curl nor wget are installed, then please install one of these tools and repeat. Now we are ready to build. You now need to know your architecture (see the start of this documentation). We will use armv8 as an example here. Issue the command: $ make -j build ARCH=armv8 COMP=ndk After a short amount of time (or a minute, or two, depending on the speed of your machine) the compilation and linking should complete with messages like this: . . aarch64-linux-android21-clang++ -o stockfish benchmark.o bitbase.o bitboard.o endgame.o evaluate.o main.o material.o misc.o movegen.o movepick.o pawns.o position.o psqt.o search.o thread.o timeman.o tt.o uci.o ucioption.o tune.o tbprobe.o evaluate_nnue.o half_ka_v2_hm.o -static-libstdc++ -pie -lm -latomic -Wall -Wcast-qual -fno-exceptions -std=c++17 -stdlib=libc++ -fPIE -DUSE_PTHREADS -DNDEBUG -O3 -fexperimental-new-pass-manager -DIS_64BIT -DUSE_POPCNT -DUSE_NEON=8 -flto make[1]: Leaving directory '/home/johndoe/repos/official-stockfish/Stockfish/src' You will now have a binary file called stockfish in your current directory. Check with the file command that it is indeed an ARM binary for Android: $ file stockfish stockfish: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /system/bin/linker64, with debug_info, not stripped To make it smaller and run faster, we should strip the symbol table from the executable; this is not needed for running it, only for debugging. Issue the command: $ make strip ARCH=armv8 COMP=ndk aarch64-linux-android-strip stockfish Issuing the file command again shows that it has been stripped: $ file stockfish stockfish: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /system/bin/linker64, stripped It is a good idea to rename the binary: $ mv stockfish stockfish_DEV_armv8 So in Droidfish you will be able to see that you are running your self compiled DEVelopment version of Stockfish, and not the built-in version, which is substantially older. Voilà: you have your Android build of Stockfish. What is now left to do is to copy it over to your smartphone or tablet, to the \"uci\" subdirectory of your Droidfish installation. You can find the Droidfish documentation here: https://github.com/peterosterlund2/droidfish/tree/master/doc To do this, the easiest possibility is to have your build machine and your Android device on the same network, create a Windows network share, copy the Stockfish binary into that share directory, and then on your Android device use the File Manager app to connect to that network share and copy the Stockfish binary over to the Droidfish uci (engines) directory. In Droidfish, open the left menu, find the Engines management submenu, pick the stockfish_DEV_armv8 binary, and in the configuration menu adjust its UCI parameter settings. Depending on the CPU power of your device and the available memory, you should probably give it more than the default one Thread, and more than the default 16 MB of Hash memory. A good start would be to try 2 Threads, and 512 MB for the Hash tables, and see if you can beat it ;-) Warning As Stockfish is a very computation-intense program, you should probably not give it as many threads as your device CPU has processor cores. Especially in Analysis mode, when Stockfish is thinking permanently, and for extended amounts of time, this might suck your device battery empty quite quickly. Enjoy! Cross compilation For Windows in Ubuntu The script works with Ubuntu 18.04, Ubuntu 21.10 and Ubuntu 22.04, other versions could still have a packaging bug. Click to view #!/bin/bash # functions to build Stockfish _build_sf () { make build ARCH=x86-64$1 COMP=mingw -j make strip COMP=mingw mv stockfish.exe ../../stockfish-x64${1}.exe make clean COMP=mingw } _build_sf_pgo () { make profile-build ARCH=x86-64$1 COMP=mingw PGOBENCH=\"wine ./stockfish.exe bench\" -j make strip COMP=mingw mv stockfish.exe ../../stockfish-x64${1}-pgo.exe make clean COMP=mingw } # full-upgrade and install required packages sudo apt update && sudo apt full-upgrade -y && sudo apt autoremove -y && sudo apt clean sudo apt install -y \\ make \\ mingw-w64 \\ git \\ wine64 \\ binutils # clone Stockfish source code git clone --single-branch --branch master https://github.com/official-stockfish/Stockfish.git cd Stockfish/src # build Stockfish executables # to speedup the building process you can keep only the section fitting your CPU architecture # build the binary for CPUs without popcnt and bmi2 instructions (e.g. older than Intel Sandy Bridge) _build_sf_pgo # build the binary for CPU with popcnt instruction (e.g. Intel Sandy Bridge) if [ \"$(x86_64-w64-mingw32-c++-posix -Q -march=native --help=target | grep mpopcnt | grep enabled)\" ] ; then _build_sf_pgo -sse41-popcnt else _build_sf -sse41-popcnt fi # build the binary for CPU with bmi2 instruction (e.g. Intel Haswell or newer) if [ \"$(x86_64-w64-mingw32-c++-posix -Q -march=native --help=target | grep mbmi2 | grep enabled)\" ] ; then _build_sf_pgo -bmi2 else _build_sf -bmi2 fi For all platforms (host/target) using Zig Zig is a programming language in early development stage that is binary compatible with C. The Zig toolchain, based on LLVM, ships the source code of all the required libraries to easily cross compile Zig/C/C++ code for several CPU Architecture and OS combinations. All the work required is to set as target the proper supported triple <arch-os-abi> (eg x86_64-windows-gnu, aarch64-linux-musl). You can use Zig: installing Zig with a package manager for your OS, or unzipping the Zig archive (~70 Mbi) and setting the PATH for the shell with export PATH=/home/username/zig:$PATH Here is a script to cross compile from a clean Ubuntu a static build of Stockfish targeting an armv8 or armv7 CPU running on Linux or Android: Click to view # Use a clean Ubuntu to cross compile # a static build for armv8 and armv7 on Linux/Android # one time configuration sudo apt update && sudo apt install -y make git sudo snap install zig --classic --edge sudo apt install -y qemu-user # armv8 static build with musl libc git clone https://github.com/official-stockfish/Stockfish.git cd Stockfish/src make -j build ARCH=armv8 COMP=clang CXX=\"zig c++ -target aarch64-linux-musl\" # test: qemu's magic at work qemu-aarch64 stockfish compiler qemu-aarch64 stockfish bench # armv7 static build with musl libc make clean make -j build ARCH=armv7 COMP=clang CXX=\"zig c++ -target arm-linux-musleabihf\" # test: qemu's magic at work qemu-arm stockfish compiler qemu-arm stockfish bench Here is a script to cross compile from a msys2 msys/mingw-w64 shell a static build of Stockfish targeting an armv8 or armv7 CPU running on Linux or Android: Click to view # Use msys2 to cross compile # a static build for armv8 and armv7 on Linux/Android # one time configuration pacman -S --noconfirm --needed git make unzip wget https://ziglang.org/builds/zig-windows-x86_64-0.14.0-dev.2546+0ff0bdb4a.zip unzip zig-windows-x86_64-0.14.0-dev.2546+0ff0bdb4a.zip export PATH=\"$(pwd)/zig-windows-x86_64-0.14.0-dev.2546+0ff0bdb4a:$PATH\" # armv8 static build with musl libc git clone https://github.com/official-stockfish/Stockfish.git cd Stockfish/src make -j build ARCH=armv8 COMP=clang CXX=\"zig c++ -target aarch64-linux-musl\" mv stockfish.exe stockfish_armv8 Lower compilation time It is possible to lower the compile time on cpu multi core using make with the flag -j <n_jobs>, where <n_jobs> is the number of jobs (commands) to run simultaneously. The flag -j enables one job for each logical CPU core. make -j <n_jobs> profile-build ARCH=x86-64-avx2 COMP=mingw Optimize for your CPU To get the max speedup for your CPU (1.5% on Ivy Bridge) simply prepend the shell variable CXXFLAGS='-march=native' to the make command. At example, for a CPU Sandy/Ivy Bridge use this command: CXXFLAGS='-march=native' make -j profile-build ARCH=x86-64-avx2 COMP=gcc To view the compiler flags for your CPU: # for gcc gcc -Q -march=native --help=target | grep -v \"\\[disabled\\]\" # for clang clang -E - -march=native -### -march=native implies -mtune=native, below a high level explanation of the compiler flags -march and -mtune, view the gcc manual for more technically sound details: -march: determines what instruction sets are used in the binary. An instruction set is the list of commands implemented by the cpu. The generated code may not run at all on processors other than the one indicated. -mtune: determines the cost model that is used when generating code. The cost model describes how long it takes the cpu to do operations. This information is used by the scheduler to decide what operations to use and in what order."
  },
  "Stockfish/wiki/Developers.html": {
    "href": "Stockfish/wiki/Developers.html",
    "title": "| Chess",
    "summary": "Stockfish Development Setup Windows Show more Installing a compiler https://www.msys2.org/ Download the installer In the MSYS2 Installer change the installation folder to: C:\\tools\\msys64 In the URTC64 Shell run: pacman -S --needed base-devel mingw-w64-ucrt-x86_64-toolchain clang-format Download LLVM 18 Run the executable and in the installer choose: Add LLVM to the system PATH for current user Video Setup There's a much higher quality version of this available on our Discord. https://github.com/official-stockfish/Stockfish/assets/45608332/d0323339-21f1-4d1d-aa86-183a7e10ed06 More in depth information about various compilers can be found here. Ubuntu Show more Installing a compiler On Unix-like systems you will most likely have all the tools installed, which are required to build Stockfish. Expect clang-format which we use to format our codebase. sudo apt install build-essential git clang-format sudo apt install clang-format-18 MacOS Show more Installing a compiler On MacOS you will need to install the Xcode Command Line Tools. It is enough to run the following command in your terminal, instead of installing the full Xcode. sudo xcode-select --install clang-format brew install clang-format@17 Participating in the project Stockfish's improvement over the last decade has been a great community effort. Nowadays most development talk takes place on Discord. There are many ways to contribute to Stockfish: Stockfish (C++) Fishtest (Python) nnue-pytorch (C++ and Python) Donating hardware Stockfish If you want to contribute to Stockfish directly, you can do so in a couple of ways. Follow the steps described in our Fishtest wiki to create your first test. It is advised to first follow the development setup steps for your platform. New commits to stockfish can mostly be categorised in 2 categories: Non functional changes These are changes that don't change the search behaviour and can be directly submitted as pull requests. Functional changes These change the search behaviour and lead to a different search tree. Every functional patch (commit) has to be verified by Fishtest, our testing framework. NNUE Pytorch NNUE Pytorch is the trainer for Stockfish's neural network. Usually changes here are tested by training a new network and testing it against the current network via Fishtest. Donating hardware Improving Stockfish requires a massive amount of testing. You can donate your hardware resources by installing the Fishtest Worker and view the current tests on Fishtest. Using Stockfish in your own project First of all, you should read our Terms of Use and follow them carefully. Stockfish is a UCI chess engine, but what does that mean? It means that Stockfish follows the UCI protocol, which you find explained here in great detail. This is the usual way of communicating with Stockfish, so you do not need to write any C++! Your next step is probably gonna be researching how you can open an executable in your programming language. You will need to write to stdin and listen to stdout, that is where Stockfish's output will end up. Examples Python: https://python-chess.readthedocs.io/en/latest/engine.html NodeJS: You can follow this guide on how to communicate with a program. C++: Boost.Process can be used for easy process communication. Rust: Examine the documentation on how to spawn a Command. Limitations I want Stockfish to comment on the move it made, what do I need to do? That is not possible. You will have to write your own logic to create such a feature. I want to get an evaluation of the current position. While Stockfish has an eval command, it only statically evaluates positions without performing any search. A more precise evaluation is available after you use the go command together with a specified limit. Other resources Commands Advanced topics Useful data Terms of use Stockfish is free and distributed under the GNU General Public License version 3 (GPL v3). Essentially, this means you are free to do almost exactly what you want with the program, including distributing it among your friends, making it available for download from your website, selling it (either by itself or as part of some bigger software package), or using it as the starting point for a software project of your own. This also means that you can distribute Stockfish alongside your proprietary system, but to do this validly, you must make sure that Stockfish and your program communicate at arm's length, that they are not combined in a way that would make them effectively a single program. The only real limitation is that whenever you distribute Stockfish in some way, you MUST always include the license and the full source code (or a pointer to where the source code can be found) to generate the exact binary you are distributing. If you make any changes to the source code, these changes must also be made available under GPL v3. Git Hooks Show more Place the following file into .git/hooks/pre-push and make it executable. chmod +x .git/hooks/pre-push. This will prevent you from pushing commits that do not contain a Bench or 'No functional change' in the commit message. Only really useful for maintainers. #!/bin/bash if ! which clang-format-18 >/dev/null; then CLANG_FORMAT=clang-format else CLANG_FORMAT=clang-format-18 fi # Extracted from the Makefile SRCS=$(awk '/^SRCS = /{flag=1; sub(/^SRCS = /,\"\"); print} /^$/{flag=0} flag && !/^SRCS = /{print}' ./src/Makefile | tr -d '\\\\' | xargs echo | tr ' ' '\\n' | sed 's|^|./src/|') HEADERS=$(awk '/^HEADERS = /{flag=1; sub(/^HEADERS = /,\"\"); print} /^$/{flag=0} flag && !/^HEADERS = /{print}' ./src/Makefile | tr -d '\\\\' | xargs echo | tr ' ' '\\n' | sed 's|^|./src/|') while read local_ref local_sha remote_ref remote_sha; do if [[ \"$remote_ref\" == \"refs/heads/master\" ]]; then # Check open diffs if [[ -n $(git status --porcelain) ]]; then echo \"Please commit or stash your changes before pushing.\" exit 1 fi # Check formatting if ! $CLANG_FORMAT --dry-run -Werror -style=file $SRCS $HEADERS; then echo \"Please run 'make format' to fix formatting issues and rebase the last commit.\" exit 1 fi # Iterate through commits for commit in $(git rev-list --no-merges $remote_sha..$local_sha); do commit_msg=$(git log --format=%B -n 1 $commit) # bench regex as defined in ci # check for the existence of a bench in the commit message bench_regex='\\b[Bb]ench[ :]+[1-9][0-9]{5,7}\\b' if echo \"$commit_msg\" | grep -m 1 -o -x -E \"$bench_regex\" >/dev/null; then continue fi # check for the existence of \"No functional change\" in the commit message no_functional_change_regex='\\b[Nn]o[[:space:]][Ff]unctional[[:space:]][Cc]hange\\b' if echo \"$commit_msg\" | grep -o -x -E \"$no_functional_change_regex\" >/dev/null; then continue fi echo \"Commit $commit does not contain a Bench or 'No functional change'.\" exit 1 done fi done exit 0"
  },
  "Stockfish/wiki/Download-and-usage.html": {
    "href": "Stockfish/wiki/Download-and-usage.html",
    "title": "| Chess",
    "summary": "Download Stockfish Note Stockfish is a command line program. You may want to use it in your own UCI-compatible chess GUI. Developers should communicate with Stockfish via the UCI protocol. Get started First download Stockfish. Stockfish itself is completely free with all its options. Next, download a GUI (Graphical User Interface) as it is needed to conveniently use Stockfish. There are multiple free and commercial GUIs available. Different GUI's have more or less advanced features, for example, an opening explorer or automatic game analysis. Now Stockfish must be made available to the GUI. Install in a Chess GUI explains how this can be done for some of them. If a different GUI is used, please read the GUI's manual. Ultimately, change the default settings of Stockfish to get the best possible analysis. Official downloads Latest release https://stockfishchess.org/download/ https://github.com/official-stockfish/Stockfish/releases/latest Latest development build https://github.com/official-stockfish/Stockfish/releases?q=prerelease%3Atrue Note We only recommend downloading from the official GitHub releases. Websites such as Abrok are third parties, so we cannot guarantee the safety, reliability, and availability of those binaries because we are not responsible for them. Choose a binary In order of preference: x86-64-vnni512 x86-64-vnni256 x86-64-avx512 AMD Zen 4+ x86-64-bmi2 Intel (2013+) and AMD Zen 3+ x86-64-avx2 Intel (2013+) and AMD (2015+) x86-64-sse41-popcnt Intel (2008+) and AMD (2011+) x86-64 Download a Chess GUI A chess graphical user interface allows you to interact with the engine in a user-friendly way. Popular GUIs are: Free Computer En Croissant (source code) How to install Stockfish Change settings Nibbler (source code) How to install Stockfish Change settings Arena How to install Stockfish Change settings Lichess Local Engine (source code) (WIP) How to install Stockfish Change settings BanksiaGUI Cutechess (source code) ChessX (source code) LiGround (source code) Lucas Chess (source code) Scid vs. PC (source code) XBoard (source code) jose (source code) How to install Stockfish Mobile DroidFish (source code) SmallFish Chessis Paid Chessbase Hiarcs Shredder Online Note If you don't want to download a GUI, you can also use some of the available online interfaces. Keep in mind that you might not get the latest version of Stockfish, settings might be limited and speed will be slower. Lichess Change settings Chess.com Change settings ChessMonitor Chessify DecodeChess Install in a Chess GUI En Croissant Engines tab > Add new > Install Stockfish Arena Engines > Install New Engine... Select and open the Stockfish executable Nibbler Engine > Choose engine... Select and open the Stockfish executable Lichess Local Engine Log in with Lichess Click the Install Stockfish button Go to the Lichess analysis page https://lichess.org/analysis Select the engine from the engine list jose Stockfish is already bundled with jose. To enable it for play and analysis do: Edit > Options (F9) select the 'Engine' tab select Stockfish in the list of engines below, you can edit all the engine parameters Change settings Note Please check our FAQ guide to set the optimal settings. Arena Note First uncheck these two settings Right click in the engine name > Configure Nibbler Open the Engine menu En Croissant Select Stockfish in the engines tab or open the engine settings in the Analysis board Lichess Open the engine settings Chess.com Click the settings button in the analysis page"
  },
  "Stockfish/wiki/Governance-and-responsibilities.html": {
    "href": "Stockfish/wiki/Governance-and-responsibilities.html",
    "title": "| Chess",
    "summary": "Stockfish Stockfish organization Link: https://github.com/official-stockfish Type: Organization, GitHub Team for Open Source Owners: glinscott mcostalba zamar snicolet vondele disservin The Owners of the organization have Admin access to all repositories and can add new owners and maintainers. Maintainers have \"Admin\" permission level on the repo. Collaborators have \"Write\" permission level on the repo. Stockfish repository Link: https://github.com/official-stockfish/Stockfish Active Maintainers: disservin snicolet vondele Inactive Maintainers: glinscott mcostalba zamar locutus2 Fishtest repository Link: https://github.com/official-stockfish/fishtest Maintainers: ppigazzini Collaborators: zungur Inactive Maintainers: tomtor stefano80 glinscott NN trainer repository Link: https://github.com/official-stockfish/nnue-pytorch Maintainers: Sopel97 vondele glinscott Website repository Link: https://github.com/official-stockfish/stockfish-web Maintainer: daylen dav1312 Books repository Link: https://github.com/official-stockfish/books Maintainers: vondele snicolet disservin Fishtest VPS Link: https://tests.stockfishchess.org Owner: glinscott Maintainers: ppigazzini zungur Networks Server repository Link: https://github.com/ppigazzini/net-server Maintainers: ppigazzini Networks Server: data.stockfishchess.org see also https://tests.stockfishchess.org/nns Owner: glinscott Maintainers: ppigazzini zungur S3 Mongodb & Nets backups Owner: glinscott History of past tests Link: https://groups.google.com/g/fishcooking-results Owners: ppigazzini vondele zungur Link: https://groups.google.com/g/fishcooking_results Owner: mcostalba Website Hosting Link: https://stockfishchess.org/ Domain: daylen (stockfishchess.org) CDN: daylen Social Twitter Link: https://twitter.com/stockfishchess Owner: daylen Maintainer: daylen Facebook Link: https://www.facebook.com/stockfishchess Owner: daylen Maintainer: daylen Discord server Link: https://discord.gg/GWDRS3kU6R Owner: disservin Admins: Sopel97 vondele Forum (deprecated, use discord) Link: https://groups.google.com/g/fishcooking Owner: mcostalba Abrok (unofficial development versions) Link: http://abrok.eu/stockfish/ Owner: Roman Korba (roman.korba@t-online.de, korba.roman@gmail.com)"
  },
  "Stockfish/wiki/Home.html": {
    "href": "Stockfish/wiki/Home.html",
    "title": "| Chess",
    "summary": "Stockfish is a free, open source, and strong UCI chess engine derived from Glaurung 2.1 that analyzes chess positions and computes the optimal moves. Stockfish does not include a graphical user interface (GUI), which is needed to display a chessboard and to make it easy to input moves. Several free GUIs have been developed independently of Stockfish and are available online. Read the documentation for the GUI of your choice to find out how to use it with Stockfish. Guides For users Download Stockfish Download GUI Install in GUI Commands and options Frequently asked questions (FAQ) For Developers Compiling from sources Using Stockfish in your project Contributing Copying Support If you're looking for any kind of assistance with Stockfish. Discord Github discussions Related repositories Trainer: official-stockfish/nnue-pytorch Fishtest: official-stockfish/fishtest Website: official-stockfish/stockfish-web WDL model: official-stockfish/WDL_model Fishtest worker setup: ppigazzini/fishtest-worker-setup Matetrack: vondele/matetrack Mac app: daylen/stockfish-mac See also our overview of Governance and Responsibilities."
  },
  "Stockfish/wiki/Regression-Tests.html": {
    "href": "Stockfish/wiki/Regression-Tests.html",
    "title": "| Chess",
    "summary": "All of the information below has been generated from the results of tests performed on the Fishtest framework. Current Testing Criteria 1 Thread 60 seconds + 0.6 seconds for 60,000 games (2019-11-21 - current) 8 Threads 60 seconds + 0.6 seconds for 60,000 games (2023-06-29 - current) UHO_4060_v3.epd opening book (2023-09-10 - current) Previous Testing Criteria 1 Thread 60 seconds + 0.6 seconds for 40,000 games (2016-01-02 - 2019-11-21) 1 Thread 60 seconds + 0.5 seconds for 40,000 games (2013-10-13 - 2016-01-02) 1 Thread 60 seconds + 0.5 seconds for 20,000 games (2013-03-04 - 2013-10-13) 8 Threads 30 seconds + 0.3 seconds for 40,000 games (2018-12-13 - 2023-06-29) 8moves_GM.pgn opening book (2013-04-10 - 2013-11-01) varied.bin opening book (2013-03-04 - 2013-04-07) 8moves_v3.pgn opening book (2013-11-09 - 2023-06-29) UHO_XXL_+0.90_+1.19.epd opening book (2022-04-17 - 2023-06-29) UHO_4060_v2.epd opening book (2023-06-29 - 2023-09-10) Current Development Date Version 1 Thread 8 Threads 2024‑10‑12 master vs Stockfish 17 Bench: 1283457 Make low ply history size fixed [differences] 40 Elo: 8.99 ±1.3 Ptnml: 48, 5604, 17142, 7159, 47 nElo: 19.27 ±2.8 PairsRatio: 1.27 [raw statistics] Elo: 4.85 ±1.1 Ptnml: 4, 4647, 19867, 5471, 11 nElo: 11.80 ±2.8 PairsRatio: 1.18 [raw statistics] 2024‑11‑13 master vs Stockfish 17 Bench: 840721 Adjust statscore for captures [differences] 63 Elo: 11.88 ±1.3 Ptnml: 34, 5232, 17427, 7263, 44 nElo: 25.85 ±2.8 PairsRatio: 1.39 [raw statistics] Elo: 4.81 ±1.1 Ptnml: 3, 4639, 19887, 5466, 5 nElo: 11.72 ±2.8 PairsRatio: 1.18 [raw statistics] 2024‑12‑08 master vs Stockfish 17 Bench: 934447 Small Major/Minor piece key simplification/optimization. [differences] 81 Elo: 13.02 ±1.3 Ptnml: 36, 5189, 17325, 7392, 58 nElo: 28.18 ±2.8 PairsRatio: 1.43 [raw statistics] Elo: 7.59 ±1.1 Ptnml: 9, 4389, 19890, 5707, 5 nElo: 18.49 ±2.8 PairsRatio: 1.30 [raw statistics] 2025‑01‑06 master vs Stockfish 17 Bench: 999324 Remove non-functional std::min() [differences] 102 Elo: 15.05 ±1.3 Ptnml: 33, 5044, 17264, 7611, 48 nElo: 32.62 ±2.8 PairsRatio: 1.51 [raw statistics] Elo: 4.81 ±1.1 Ptnml: 9, 4603, 19941, 5443, 4 nElo: 11.73 ±2.8 PairsRatio: 1.18 [raw statistics] 2025‑01‑12 master vs Stockfish 17 Bench: 1379150 Increase the depth margin [differences] 118 Elo: 10.87 ±1.3 Ptnml: 52, 5424, 17161, 7321, 42 nElo: 23.35 ±2.8 PairsRatio: 1.34 [raw statistics] Elo: 12.23 ±1.1 Ptnml: 8, 4024, 19823, 6138, 7 nElo: 29.85 ±2.8 PairsRatio: 1.52 [raw statistics] 2025‑01‑25 master vs Stockfish 17 Bench: 1438043 Simplify futility margin in lmr for quiets. [differences] 150 Elo: 16.96 ±1.3 Ptnml: 50, 4861, 17260, 7770, 59 nElo: 36.72 ±2.8 PairsRatio: 1.59 [raw statistics] Elo: 14.54 ±1.1 Ptnml: 3, 3796, 19893, 6304, 4 nElo: 35.75 ±2.8 PairsRatio: 1.66 [raw statistics] 2025‑02‑04 master vs Stockfish 17 Bench: 2887850 Reduce less for positions without tt move [differences] 177 Elo: 7.14 ±1.3 Ptnml: 68, 5808, 17016, 7039, 69 nElo: 15.14 ±2.8 PairsRatio: 1.21 [raw statistics] Elo: 14.61 ±1.1 Ptnml: 5, 3923, 19625, 6440, 7 nElo: 35.41 ±2.8 PairsRatio: 1.64 [raw statistics] 2025‑02‑05 master vs Stockfish 17 Bench: 3197798 Increase PCM bonus when cutOffCnt is low [differences] 181 Elo: 10.76 ±1.3 Ptnml: 43, 5526, 17030, 7333, 68 nElo: 22.94 ±2.8 PairsRatio: 1.33 [raw statistics] Elo: 15.31 ±1.1 Ptnml: 4, 3845, 19662, 6482, 7 nElo: 37.23 ±2.8 PairsRatio: 1.69 [raw statistics] 2025‑02‑24 master vs Stockfish 17 Bench: 2146010 Simplify bestvalue update formula [differences] 200 Elo: 19.43 ±1.3 Ptnml: 21, 4662, 17306, 7966, 45 nElo: 42.50 ±2.8 PairsRatio: 1.71 [raw statistics] Elo: 12.09 ±1.2 Ptnml: 7, 4157, 19584, 6246, 6 nElo: 29.15 ±2.8 PairsRatio: 1.50 [raw statistics] 2025‑03‑21 master vs Stockfish 17 Bench: 2030154 Change layout of CorrectionHistory [differences] 221 Elo: 19.80 ±1.3 Ptnml: 30, 4563, 17419, 7938, 50 nElo: 43.44 ±2.8 PairsRatio: 1.74 [raw statistics] Elo: 18.76 ±1.1 Ptnml: 6, 3604, 19549, 6830, 11 nElo: 45.55 ±2.8 PairsRatio: 1.90 [raw statistics] Version Comparison Elo Progression Normalized Elo Progression Game Pair Ratio Progression 30 Day Average Draw Percentage vs Elo Historical Information Stockfish 3 Development (2013-03-01 - 2013-04-30) Date Version 1 Thread 2013‑03‑04 master vs Stockfish 2.3.1 Bench: 4968764 Increase see prune depth [differences] 226 Elo: 15.00 ±2.8 WDL: 2906, 13325, 3769 nElo: 26.02 ±4.8 [raw statistics] 2013‑03‑11 master vs Stockfish 2.3.1 Bench: 4968764 Be more aggressive on trying to finish iterations [differences] 227 Elo: 15.49 ±2.8 WDL: 3016, 13077, 3907 nElo: 26.38 ±4.8 [raw statistics] 2013‑03‑11 master vs Stockfish 2.3.1 Bench: 4968764 Check for easy move just once [differences] 228 Elo: 13.42 ±2.8 WDL: 2974, 13280, 3746 nElo: 23.19 ±4.8 [raw statistics] 2013‑03‑16 master vs Stockfish 2.3.1 Bench: 5442365 Further increase SEE prune depth [differences] 232 Elo: 17.77 ±2.8 WDL: 2897, 13184, 3919 nElo: 30.53 ±4.8 [raw statistics] 2013‑03‑24 master vs Stockfish 2.3.1 Bench: 4985829 Update bestValue when futility pruning (2) [differences] 237 Elo: 16.71 ±2.8 WDL: 2874, 13291, 3835 nElo: 28.92 ±4.8 [raw statistics] 2013‑03‑30 master vs Stockfish 2.3.1 Bench: 4781239 Set IID half way between d/2 and d-4 [differences] 241 Elo: 18.76 ±2.8 WDL: 2824, 13273, 3903 nElo: 32.46 ±4.8 [raw statistics] 2013‑04‑03 master vs Stockfish 2.3.1 Bench: 4705335 Double Impact of Gain tables [differences] 242 Elo: 15.44 ±2.8 WDL: 3040, 13032, 3928 nElo: 26.21 ±4.8 [raw statistics] 2013‑04‑06 master vs Stockfish 2.3.1 Bench: 4361224 Increase null verification threshold to 12 plies [differences] 249 Elo: 17.11 ±2.8 WDL: 2774, 12861, 3727 nElo: 29.62 ±4.9 [raw statistics] 2013‑04‑07 master vs Stockfish 2.3.1 Bench: 5473339 Rescale UCI parameters to 100 [differences] 252 Elo: 19.02 ±2.8 WDL: 2948, 13010, 4042 nElo: 32.29 ±4.8 [raw statistics] 2013‑04‑10 master vs Stockfish 2.3.1 Bench: 5157061 De-templetize Position::is_draw() [differences] 257 Elo: 24.13 ±2.8 WDL: 2791, 13031, 4178 nElo: 41.10 ±4.8 [raw statistics] 2013‑04‑19 master vs Stockfish 2.3.1 Bench: 5274705 Skip a couple of popcount in previous patch [differences] 262 Elo: 28.27 ±2.9 WDL: 2754, 12868, 4378 nElo: 47.69 ±4.9 [raw statistics] 2013‑04‑26 master vs Stockfish 2.3.1 Bench: 4311634 Fix a crash introduced few days ago [differences] 270 Elo: 33.67 ±2.9 WDL: 2642, 12784, 4574 nElo: 56.61 ±4.9 [raw statistics] 2013‑04‑28 master vs Stockfish 2.3.1 Bench: 4176431 Temporary revert \"Expose EvalInfo struct to search\" [differences] 273 Elo: 30.86 ±2.9 WDL: 2721, 12786, 4493 nElo: 51.82 ±4.9 [raw statistics] 2013‑04‑30 Stockfish 3 [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] [[https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png|width=20px]] Bench: 4176431 [differences] 275 Stockfish 4 Development (2013-04-30 - 2013-08-20) Date Version 1 Thread 2013‑05‑16 master vs Stockfish 3 Bench: 4327405 Use two counter moves instead of one [differences] 28 Elo: 22.11 ±3.0 WDL: 3212, 12305, 4483 nElo: 35.78 ±4.8 [raw statistics] 2013‑05‑23 master vs Stockfish 3 Bench: 4821467 Bunch of 3 small patches [differences] 33 Elo: 26.70 ±2.1 WDL: 6435, 24062, 9503 nElo: 42.53 ±3.4 [raw statistics] 2013‑05‑31 master vs Stockfish 3 Bench: 4931544 Passed pawn tuning [differences] 38 Elo: 29.50 ±2.2 WDL: 6588, 23436, 9976 nElo: 46.13 ±3.4 [raw statistics] 2013‑06‑23 master vs Stockfish 3 Bench: 4609948 Fix some stale comments [differences] 72 Elo: 35.47 ±2.2 WDL: 6196, 23539, 10265 nElo: 55.80 ±3.4 [raw statistics] 2013‑07‑03 master vs Stockfish 3 Bench: 4507288 Simplify aspiration window code [differences] 88 Elo: 37.36 ±2.2 WDL: 6223, 23269, 10508 nElo: 58.35 ±3.4 [raw statistics] 2013‑07‑13 master vs Stockfish 3 Bench: 4558173 Fully qualify memset and memcpy [differences] 100 Elo: 39.27 ±3.1 WDL: 3052, 11645, 5303 nElo: 61.44 ±4.9 [raw statistics] 2013‑07‑19 master vs Stockfish 3 Bench: 4769737 Halve king eval margin [differences] 110 Elo: 39.83 ±3.1 WDL: 3067, 11583, 5350 nElo: 62.10 ±4.9 [raw statistics] 2013‑07‑25 master vs Stockfish 3 Bench: 4727133 Rewrite pawn shield and storm code [differences] 133 Elo: 48.84 ±3.3 WDL: 3203, 10801, 5996 nElo: 73.11 ±4.9 [raw statistics] 2013‑08‑03 master vs Stockfish 3 Bench: 4424151 Streamline time computation [differences] 147 Elo: 50.95 ±3.2 WDL: 3056, 10976, 5968 nElo: 77.14 ±4.9 [raw statistics] 2013‑08‑18 master vs Stockfish 3 Bench: 4132374 Further tweak movecount pruning [differences] 162 Elo: 56.66 ±3.3 WDL: 2988, 10791, 6221 nElo: 85.22 ±5.0 [raw statistics] 2013‑08‑20 Stockfish 4 [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] [[https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png|width=20px]] Bench: 4132374 [differences] 165 Stockfish DD Development (2013-08-20 - 2013-11-29) Date Version 1 Thread 2013‑08‑29 master vs Stockfish 4 Bench: 4620975 Enable LMR for dangerous moves [differences] 12 Elo: 16.18 ±2.9 WDL: 3221, 12627, 4152 nElo: 26.72 ±4.8 [raw statistics] 2013‑09‑01 master vs Stockfish 4 Bench: 3453945 Don't use lpthread for Android [differences] 18 Elo: 19.30 ±2.9 WDL: 3083, 12724, 4193 nElo: 32.11 ±4.8 [raw statistics] 2013‑09‑05 master vs Stockfish 4 Bench: 4633330 Do not prune useless checks in QS [differences] 23 Elo: 23.80 ±2.9 WDL: 2932, 12768, 4300 nElo: 39.78 ±4.8 [raw statistics] 2013‑09‑07 master vs Stockfish 4 Bench: 3864419 Remove unreachable values in mobility table [differences] 27 Elo: 27.66 ±2.9 WDL: 2766, 12879, 4355 nElo: 46.68 ±4.9 [raw statistics] 2013‑09‑11 master vs Stockfish 4 Bench: 4554576 Extend checks more when below alpha [differences] 35 Elo: 24.87 ±2.9 WDL: 2824, 12923, 4253 nElo: 42.04 ±4.8 [raw statistics] 2013‑09‑12 master vs Stockfish 4 Bench: 4554579 Revert \"Move draw by material check\" [differences] 37 Elo: 24.34 ±2.9 WDL: 2825, 12951, 4224 nElo: 41.22 ±4.8 [raw statistics] 2013‑09‑13 master vs Stockfish 4 Bench: 3846852 Increase passed bonus for having more pieces [differences] 38 Elo: 26.21 ±2.9 WDL: 2871, 12752, 4377 nElo: 43.80 ±4.8 [raw statistics] 2013‑09‑16 master vs Stockfish 4 Bench: 3884003 Fix time parameters for blitz games [differences] 47 Elo: 31.56 ±2.1 WDL: 5588, 25200, 9212 nElo: 52.33 ±3.4 [raw statistics] 2013‑09‑23 master vs Stockfish 4 Bench: 3529630 Update disabled warnings for Intel compiler [differences] 54 Elo: 34.03 ±2.1 WDL: 5449, 25197, 9354 nElo: 56.49 ±3.4 [raw statistics] 2013‑09‑28 master vs Stockfish 4 Bench: 3172206 Drop 'is' prefix from query functions [differences] 62 Elo: 33.49 ±2.9 WDL: 2571, 12936, 4493 nElo: 56.93 ±4.9 [raw statistics] 2013‑09‑29 master vs Stockfish 4 Bench: 8336338 Add more depth/positions to bench [differences] 63 Elo: 33.90 ±2.0 WDL: 5292, 25525, 9183 nElo: 56.93 ±3.4 [raw statistics] 2013‑10‑08 master vs Stockfish 4 Bench: 8340585 Use TT refined value to stand pat [differences] 66 Elo: 36.58 ±2.9 WDL: 2623, 12656, 4721 nElo: 61.07 ±4.9 [raw statistics] 2013‑10‑08 master vs Stockfish 4 Bench: 8340585 Increase slowmover and reduce instability [differences] 67 Elo: 38.91 ±2.1 WDL: 5102, 25335, 9563 nElo: 65.11 ±3.5 [raw statistics] 2013‑10‑09 master vs Stockfish 4 Bench: 8279065 Smoother transition for LMR [differences] 68 Elo: 39.29 ±2.1 WDL: 5071, 25354, 9575 nElo: 65.80 ±3.4 [raw statistics] 2013‑10‑14 master vs Stockfish 4 Bench: 7700683 Double king safety weights [differences] 75 Elo: 43.64 ±2.9 WDL: 2432, 12637, 4931 nElo: 73.12 ±4.9 [raw statistics] 2013‑10‑18 master vs Stockfish 4 Bench: 8440524 Score chain pawn also by rank [differences] 78 Elo: 49.51 ±2.1 WDL: 4821, 24696, 10483 nElo: 81.68 ±3.5 [raw statistics] 2013‑10‑19 master vs Stockfish 4 Bench: 9160831 Further increase safe checks bonus [differences] 80 Elo: 50.11 ±2.1 WDL: 4817, 24636, 10547 nElo: 82.54 ±3.5 [raw statistics] 2013‑10‑20 master vs Stockfish 4 Bench: 9294116 Further improve chain pawn evaluation [differences] 84 Elo: 49.72 ±3.1 WDL: 2677, 11803, 5520 nElo: 79.12 ±4.9 [raw statistics] 2013‑10‑22 master vs Stockfish 4 Bench: 8455956 Tweak again chain pawn bonus [differences] 87 Elo: 53.85 ±3.0 WDL: 2425, 12075, 5500 nElo: 87.51 ±4.9 [raw statistics] 2013‑10‑24 master vs Stockfish 4 Bench: 8291883 Retire mirror() [differences] 94 Elo: 55.18 ±3.0 WDL: 2385, 12080, 5535 nElo: 89.82 ±4.9 [raw statistics] 2013‑10‑28 master vs Stockfish 4 Bench: 8029334 Tweak bishop pair and knight weight [differences] 96 Elo: 52.84 ±2.1 WDL: 4866, 24231, 10903 nElo: 86.04 ±3.5 [raw statistics] 2013‑11‑01 master vs Stockfish 4 Bench: 7995098 Set timer to a fixed interval [differences] 98 Elo: 59.73 ±3.0 WDL: 2324, 11947, 5729 nElo: 96.77 ±5.0 [raw statistics] 2013‑11‑09 master vs Stockfish 4 Bench: 7243575 Futility pruning simplification [differences] 106 Elo: 60.68 ±3.0 WDL: 2198, 12146, 5656 nElo: 99.73 ±5.0 [raw statistics] 2013‑11‑10 master vs Stockfish 4 Bench: 9282549 Remove opposed flag for doubled pawns [differences] 113 Elo: 61.23 ±2.1 WDL: 4333, 24357, 11310 nElo: 100.91 ±3.5 [raw statistics] 2013‑11‑11 master vs Stockfish 4 Bench: 8331357 Simplify generate<EVASIONS> [differences] 116 Elo: 63.85 ±2.1 WDL: 4185, 24361, 11454 nElo: 105.53 ±3.5 [raw statistics] 2013‑11‑29 master vs Stockfish 4 Bench: 8596156 Add support for PPC 64bit on Linux [differences] 123 Elo: 67.44 ±2.1 WDL: 4119, 24094, 11787 nElo: 110.87 ±3.5 [raw statistics] 2013‑11‑29 Stockfish DD [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] [[https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png|width=20px]] Bench: 8596156 [differences] 124 Stockfish 5 Development (2013-11-29 - 2014-05-31) Date Version 1 Thread 2013‑12‑09 master vs Stockfish DD Bench: 7869223 Research at intermediate depth if LMR is very high [differences] 23 Elo: 7.94 ±1.9 WDL: 5662, 27762, 6576 nElo: 14.37 ±3.4 [raw statistics] 2013‑12‑19 master vs Stockfish DD Bench: 7425809 Faster and simplified threat eval [differences] 29 Elo: 11.35 ±1.9 WDL: 5766, 27162, 7072 nElo: 20.06 ±3.4 [raw statistics] 2013‑12‑23 master vs Stockfish DD Bench: 6835416 Loosened trigger condition for king safety [differences] 31 Elo: 18.62 ±2.0 WDL: 5619, 26620, 7761 nElo: 32.31 ±3.4 [raw statistics] 2013‑12‑29 master vs Stockfish DD Bench: 7762310 Retire asymmThreshold [differences] 36 Elo: 19.54 ±2.0 WDL: 5580, 26593, 7827 nElo: 33.87 ±3.4 [raw statistics] 2014‑01‑02 master vs Stockfish DD Bench: 7602383 Ensure move_importance() is non-zero [differences] 46 Elo: 25.36 ±2.0 WDL: 5371, 26343, 8286 nElo: 43.67 ±3.4 [raw statistics] 2014‑01‑08 master vs Stockfish DD Bench: 8502826 Position::gives_check - use ci.ksq [differences] 55 Elo: 29.85 ±2.0 WDL: 5165, 26242, 8593 nElo: 51.32 ±3.4 [raw statistics] 2014‑01‑14 master vs Stockfish DD Bench: 7205153 Introduce 'follow up' moves [differences] 59 Elo: 29.84 ±2.0 WDL: 5222, 26129, 8649 nElo: 51.09 ±3.4 [raw statistics] 2014‑01‑19 master vs Stockfish DD Bench: 7804908 Small simplification to Position::see [differences] 64 Elo: 32.49 ±2.0 WDL: 5088, 26094, 8818 nElo: 55.65 ±3.4 [raw statistics] 2014‑01‑29 master vs Stockfish DD Bench: 6875743 Tweak bishop PSQT tables [differences] 70 Elo: 36.66 ±2.0 WDL: 4905, 25985, 9110 nElo: 62.70 ±3.4 [raw statistics] 2014‑02‑09 master vs Stockfish DD Bench: 8347121 Faster handling of king captures in Position::see [differences] 79 Elo: 38.63 ±2.0 WDL: 4956, 25659, 9385 nElo: 65.38 ±3.4 [raw statistics] 2014‑02‑22 master vs Stockfish DD Bench: 8430785 Fix a warning with Intel compiler [differences] 99 Elo: 38.93 ±2.0 WDL: 4944, 25649, 9407 nElo: 65.87 ±3.4 [raw statistics] 2014‑02‑26 master vs Stockfish DD Bench: 7990513 Dynamic draw value [differences] 100 Elo: 39.25 ±2.1 WDL: 5164, 25172, 9664 nElo: 65.32 ±3.4 [raw statistics] 2014‑03‑14 master vs Stockfish DD Bench: 7451319 Depth dependent aspiration window delta [differences] 122 Elo: 40.85 ±2.0 WDL: 4925, 25469, 9606 nElo: 68.77 ±3.5 [raw statistics] 2014‑03‑24 master vs Stockfish DD Bench: 7682173 Simplify TT replace strategy [differences] 138 Elo: 43.70 ±2.1 WDL: 4887, 25221, 9892 nElo: 73.08 ±3.5 [raw statistics] 2014‑04‑08 master vs Stockfish DD Bench: 7533692 Restrict queen mobility to safe squares [differences] 159 Elo: 47.70 ±2.1 WDL: 4689, 25165, 10146 nElo: 79.86 ±3.5 [raw statistics] 2014‑04‑12 master vs Stockfish DD Bench: 6921356 Move args parsing to UCI::loop [differences] 174 Elo: 49.21 ±2.1 WDL: 4717, 24938, 10345 nElo: 81.84 ±3.5 [raw statistics] 2014‑04‑21 master vs Stockfish DD Bench: 7384368 Reset DrawValue[] before new search [differences] 184 Elo: 54.53 ±2.1 WDL: 4742, 24289, 10969 nElo: 89.09 ±3.5 [raw statistics] 2014‑04‑25 master vs Stockfish DD Bench: 7905850 Speed up picking of killers [differences] 191 Elo: 57.08 ±2.2 WDL: 4858, 23771, 11371 nElo: 91.87 ±3.5 [raw statistics] 2014‑05‑04 master vs Stockfish DD Bench: 8802105 Revert dynamic contempt [differences] 216 Elo: 53.27 ±2.2 WDL: 5183, 23549, 11268 nElo: 84.84 ±3.5 [raw statistics] 2014‑05‑13 master vs Stockfish DD Bench: 8739659 Drop to qsearch at low depth in razoring [differences] 227 Elo: 57.15 ±1.8 WDL: 7289, 35641, 17070 nElo: 91.95 ±2.9 [raw statistics] 2014‑05‑17 master vs Stockfish DD Bench: 8732553 Fix an off-by-one bug in extract_pv_from_tt [differences] 229 Elo: 55.26 ±2.2 WDL: 5108, 23475, 11417 nElo: 87.95 ±3.5 [raw statistics] 2014‑05‑24 master vs Stockfish DD Bench: 7396783 Fix a warning with Intel compiler [differences] 234 Elo: 53.28 ±2.1 WDL: 4858, 24198, 10944 nElo: 86.68 ±3.5 [raw statistics] 2014‑05‑31 Stockfish 5 [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] [[https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png|width=20px]] Bench: 8732553 [differences] 236 Stockfish 6 Development (2014-05-31 - 2015-01-27) Date Version 1 Thread 2014‑06‑03 master vs Stockfish 5 Bench: 8205159 Symmetric King Safety: take 2 [differences] 8 Elo: 5.35 ±1.8 WDL: 5386, 28612, 6002 nElo: 10.03 ±3.4 [raw statistics] 2014‑06‑11 master vs Stockfish 5 Bench: 7875814 Simplify pawn threats and merge into ThreatenedByPawn[] [differences] 22 Elo: 8.30 ±2.0 WDL: 4589, 24491, 5413 nElo: 15.43 ±3.7 [raw statistics] 2014‑06‑29 master vs Stockfish 5 Bench: 8759675 Fix Singular extension condition to handle mate scores [differences] 46 Elo: 10.78 ±1.8 WDL: 5152, 28455, 6393 nElo: 20.10 ±3.4 [raw statistics] 2014‑07‑22 master vs Stockfish 5 Bench: 7831429 Outpost tuning [differences] 62 Elo: 19.63 ±1.8 WDL: 4775, 28192, 7033 nElo: 36.29 ±3.4 [raw statistics] 2014‑08‑06 master vs Stockfish 5 Bench: 7461881 Remove insufficient material rule [differences] 73 Elo: 19.68 ±1.8 WDL: 4737, 28263, 7000 nElo: 36.49 ±3.4 [raw statistics] 2014‑09‑04 master vs Stockfish 5 Bench: 7461881 Small tweak to idle_loop() [differences] 82 Elo: 15.90 ±1.8 WDL: 4986, 28199, 6815 nElo: 29.35 ±3.4 [raw statistics] 2014‑09‑27 master vs Stockfish 5 Bench: 6545733 Remove use of half-ply reductions [differences] 93 Elo: 22.80 ±1.9 WDL: 4664, 28051, 7285 nElo: 41.96 ±3.4 [raw statistics] 2014‑10‑15 master vs Stockfish 5 Bench: 7328585 Document why initing eval tables [differences] 108 Elo: 27.58 ±1.9 WDL: 4613, 27605, 7782 nElo: 49.96 ±3.4 [raw statistics] 2014‑11‑01 master vs Stockfish 5 Bench: 6564212 Merge pull request #89 from official-stockfish/pull_no_pretty [differences] 129 Elo: 31.00 ±1.9 WDL: 4484, 27472, 8044 nElo: 55.96 ±3.4 [raw statistics] 2014‑11‑10 master vs Stockfish 5 Bench: 6807896 Profile Build with Hash=16 [differences] 148 Elo: 36.21 ±1.9 WDL: 4357, 27132, 8511 nElo: 64.71 ±3.4 [raw statistics] 2014‑11‑25 master vs Stockfish 5 Bench: 8255966 Bitbase index() from ADD to OR [differences] 168 Elo: 39.02 ±1.9 WDL: 4151, 27225, 8624 nElo: 70.14 ±3.4 [raw statistics] 2014‑12‑07 master vs Stockfish 5 Bench: 9324905 Simpler PRNG and faster magics search [differences] 181 Elo: 41.42 ±1.9 WDL: 4108, 27038, 8854 nElo: 74.04 ±3.4 [raw statistics] 2014‑12‑22 master vs Stockfish 5 Bench: 9498821 Prefer names to numbers in storm code [differences] 197 Elo: 46.26 ±1.9 WDL: 4011, 26683, 9306 nElo: 81.89 ±3.4 [raw statistics] 2015‑01‑07 master vs Stockfish 5 Bench: 7604776 Assorted formatting and comment tweaks in position.h [differences] 213 Elo: 52.10 ±2.0 WDL: 3913, 26688, 9948 nElo: 91.46 ±3.4 [raw statistics] 2015‑01‑18 master vs Stockfish 5 Bench: 8080602 Stockfish 6 Release Candidate 1 [differences] 228 Elo: 51.71 ±1.9 WDL: 3723, 26644, 9633 nElo: 91.89 ±3.5 [raw statistics] 2015‑01‑27 Stockfish 6 [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] [[https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png|width=20px]] Bench: 8918745 [differences] 236 Stockfish 7 Development (2015-01-27 - 2016-01-02) Date Version 1 Thread 2015‑02‑08 master vs Stockfish 6 Bench: 7699138 Pawn Center Bind Bonus [differences] 12 Elo: 7.50 ±2.0 WDL: 6423, 26291, 7286 nElo: 12.81 ±3.4 [raw statistics] 2015‑03‑19 master vs Stockfish 6 Bench: 8226843 Retire ConditionVariable [differences] 123 Elo: 15.92 ±1.8 WDL: 4796, 28576, 6628 nElo: 29.89 ±3.4 [raw statistics] 2015‑03‑29 master vs Stockfish 6 Bench: 7658627 Remove some difficult to understand C++11 constructs [differences] 137 Elo: 19.02 ±1.8 WDL: 4590, 28633, 6777 nElo: 35.82 ±3.4 [raw statistics] 2015‑04‑10 master vs Stockfish 6 Bench: 6985247 Allow Position::init() to be called more than once [differences] 151 Elo: 22.12 ±1.8 WDL: 4480, 28497, 7023 nElo: 41.48 ±3.4 [raw statistics] 2015‑05‑09 master vs Stockfish 6 Bench: 8787152 Smart TT save [differences] 164 Elo: 28.82 ±1.8 WDL: 4197, 28295, 7508 nElo: 53.80 ±3.4 [raw statistics] 2015‑06‑07 master vs Stockfish 6 Bench: 6716940 Simplify outpost evaluation [differences] 176 Elo: 27.85 ±1.9 WDL: 4501, 27798, 7701 nElo: 50.86 ±3.4 [raw statistics] 2015‑07‑16 master vs Stockfish 6 Bench: 6943812 Fix formatting of previous patch [differences] 187 Elo: 30.74 ±1.9 WDL: 4367, 27736, 7897 nElo: 56.09 ±3.4 [raw statistics] 2015‑07‑30 master vs Stockfish 6 Bench: 8040572 Simplify IID depth formula [differences] 192 Elo: 34.04 ±1.9 WDL: 4283, 27527, 8190 nElo: 61.72 ±3.4 [raw statistics] 2015‑10‑03 master vs Stockfish 6 Bench: 8073614 File based passed pawn bonus [differences] 214 Elo: 44.23 ±1.9 WDL: 3690, 27555, 8755 nElo: 80.99 ±3.4 [raw statistics] 2015‑10‑25 master vs Stockfish 6 Bench: 8004751 Use atomics instead of volatile [differences] 232 Elo: 61.76 ±1.9 WDL: 3197, 26570, 10233 nElo: 110.69 ±3.5 [raw statistics] 2015‑12‑27 master vs Stockfish 6 Bench: 8355485 Stockfish 7 Beta 1 [differences] 267 Elo: 62.62 ±1.6 WDL: 4472, 40358, 15170 nElo: 113.94 ±2.8 [raw statistics] 2016‑01‑02 Stockfish 7 [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] [[https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png|width=20px]] Bench: 8355485 [differences] 273 Stockfish 8 Development (2016-01-02 - 2016-11-01) Date Version 1 Thread 2016‑01‑28 master vs Stockfish 7 Bench: 7751425 Time management simplification [differences] 16 Elo: 4.93 ±1.5 WDL: 3814, 31804, 4382 nElo: 10.90 ±3.4 [raw statistics] 2016‑03‑10 master vs Stockfish 7 Bench: 8261839 Add follow up moves history for move ordering [differences] 28 Elo: 12.83 ±1.5 WDL: 3354, 31816, 4830 nElo: 28.44 ±3.4 [raw statistics] 2016‑04‑08 master vs Stockfish 7 Bench: 7482426 Small passed pawn simplification [differences] 42 Elo: 15.27 ±1.5 WDL: 3251, 31741, 5008 nElo: 33.74 ±3.4 [raw statistics] 2016‑05‑20 master vs Stockfish 7 Bench: 8428997 More detailed dependence of time allocation [differences] 64 Elo: 29.44 ±1.6 WDL: 2719, 31217, 6104 nElo: 63.61 ±3.4 [raw statistics] 2016‑06‑10 master vs Stockfish 7 Bench: 8276130 Stat Formula Tweak [differences] 76 Elo: 36.29 ±1.6 WDL: 2606, 30625, 6769 nElo: 76.48 ±3.4 [raw statistics] 2016‑07‑24 master vs Stockfish 7 Bench: 8145304 Allow null pruning at depth 1 [differences] 94 Elo: 49.73 ±1.7 WDL: 2415, 29483, 8102 nElo: 100.27 ±3.4 [raw statistics] 2016‑08‑18 master vs Stockfish 7 Bench: 7662861 Remove a stale assignment [differences] 101 Elo: 52.59 ±1.7 WDL: 2413, 29165, 8422 nElo: 104.74 ±3.4 [raw statistics] 2016‑09‑07 master vs Stockfish 7 Bench: 6024713 Refactor previous patch [differences] 124 Elo: 66.53 ±1.8 WDL: 1893, 28647, 9460 nElo: 131.97 ±3.3 [raw statistics] 2016‑10‑07 master vs Stockfish 7 Bench: 6421663 Optimisation of Position::see and Position::see_sign [differences] 149 Elo: 76.60 ±1.8 WDL: 1571, 28179, 10250 nElo: 151.24 ±3.3 [raw statistics] 2016‑11‑01 Stockfish 8 [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] [[https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png|width=20px]] Bench: 5926706 [differences] 168 Stockfish 9 Development (2016-11-01 - 2018-01-31) Date Version 1 Thread 2016‑12‑31 master vs Stockfish 8 Bench: 5468995 Small eval cleanup and renaming [differences] 55 Elo: 5.21 ±1.5 WDL: 3656, 32088, 4256 nElo: 11.72 ±3.4 [raw statistics] 2017‑01‑29 master vs Stockfish 8 Bench: 5941174 Simplify TT penalty stat (#980) [differences] 86 Elo: 8.82 ±1.5 WDL: 3580, 31825, 4595 nElo: 19.53 ±3.4 [raw statistics] 2017‑03‑08 master vs Stockfish 8 Bench: 5803228 Helper functions to count material for both sides [differences] 106 Elo: 10.84 ±1.6 WDL: 3569, 31614, 4817 nElo: 23.73 ±3.4 [raw statistics] 2017‑04‑20 master vs Stockfish 8 Bench: 6581936 simplify logic for history based pruning [differences] 127 Elo: 15.17 ±1.6 WDL: 3430, 31395, 5175 nElo: 32.82 ±3.4 [raw statistics] 2017‑05‑07 master vs Stockfish 8 Bench: 6107863 Linear Protector bonus by distance [differences] 144 Elo: 20.25 ±1.6 WDL: 3258, 31155, 5587 nElo: 43.35 ±3.4 [raw statistics] 2017‑06‑21 master vs Stockfish 8 Bench: 5725676 Increase reduction if tt-move is a capture [differences] 167 Elo: 27.41 ±1.6 WDL: 2918, 31015, 6067 nElo: 58.52 ±3.4 [raw statistics] 2017‑08‑26 master vs Stockfish 8 Bench: 5965302 Improve multi-threaded mate finding [differences] 218 Elo: 29.32 ±1.6 WDL: 2886, 30860, 6254 nElo: 62.17 ±3.4 [raw statistics] 2017‑10‑02 master vs Stockfish 8 Bench: 5620312 Good bishops on the main diagonals [differences] 237 Elo: 32.61 ±1.6 WDL: 2688, 30881, 6431 nElo: 69.44 ±3.4 [raw statistics] 2017‑11‑03 master vs Stockfish 8 Bench: 5536775 Introduce capture history table for capture move sorting [differences] 247 Elo: 35.18 ±1.6 WDL: 2682, 30600, 6718 nElo: 73.93 ±3.4 [raw statistics] 2017‑12‑03 master vs Stockfish 8 Bench: 5051254 Use constexpr when makes sense [differences] 261 Elo: 43.31 ±1.7 WDL: 2406, 30227, 7367 nElo: 90.06 ±3.3 [raw statistics] 2018‑01‑23 master vs Stockfish 8 Bench: 5783344 Contempt 20 [differences] 286 Elo: 57.25 ±1.9 WDL: 2917, 27634, 9449 nElo: 106.75 ±3.4 [raw statistics] 2018‑01‑31 Stockfish 9 [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] [[https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png|width=20px]] Bench: 5023629 [differences] 291 Stockfish 10 Development (2018-01-31 - 2018-11-29) Date Version 1 Thread 2018‑02‑28 master vs Stockfish 9 Bench: 5765806 Reintroduce depth 2 razoring (with additional margin) [differences] 41 Elo: 5.16 ±1.7 WDL: 5143, 30105, 5752 nElo: 10.02 ±3.4 [raw statistics] 2018‑03‑07 master vs Stockfish 9 Bench: 5544908 Simplification: use Arctan for the optimism S-curve [differences] 53 Elo: 6.94 ±1.7 WDL: 4813, 29575, 5612 nElo: 13.60 ±3.4 [raw statistics] 2018‑03‑13 master vs Stockfish 9 Bench: 5741807 Use intrinsics only for LSB/MSB [differences] 64 Elo: 13.03 ±1.7 WDL: 4463, 29574, 5963 nElo: 25.59 ±3.4 [raw statistics] 2018‑03‑26 master vs Stockfish 9 Bench: 5934103 Make kingRing always 8 squares [differences] 75 Elo: 13.77 ±1.7 WDL: 4339, 29737, 5924 nElo: 27.26 ±3.4 [raw statistics] 2018‑04‑03 master vs Stockfish 9 Bench: 4989125 Remove the Queen from the mobility area of minor pieces [differences] 92 Elo: 16.59 ±1.7 WDL: 4283, 29525, 6192 nElo: 32.54 ±3.4 [raw statistics] 2018‑04‑07 master vs Stockfish 9 Bench: 5170165 Reset negative statScore on fail high [differences] 94 Elo: 16.63 ±1.8 WDL: 4397, 29293, 6310 nElo: 32.25 ±3.4 [raw statistics] 2018‑04‑23 master vs Stockfish 9 Bench: 5549801 Alternative formula for dynamic contempt [differences] 106 Elo: 15.90 ±1.8 WDL: 4462, 29247, 6291 nElo: 30.76 ±3.4 [raw statistics] 2018‑04‑29 master vs Stockfish 9 Bench: 5254862 Always scale using pawn contribution [differences] 112 Elo: 14.61 ±1.7 WDL: 4430, 29459, 6111 nElo: 28.54 ±3.4 [raw statistics] 2018‑05‑03 master vs Stockfish 9 Bench: 5186783 Tweak the connected[] array value for pawns on rank 5 [differences] 116 Elo: 18.52 ±1.8 WDL: 4385, 29100, 6515 nElo: 35.63 ±3.4 [raw statistics] 2018‑05‑13 master vs Stockfish 9 Bench: 5294316 Update search.cpp [differences] 128 Elo: 24.92 ±1.8 WDL: 4175, 28786, 7039 nElo: 47.42 ±3.4 [raw statistics] 2018‑05‑24 master vs Stockfish 9 Bench: 5167159 LMR Capture Tweak [differences] 137 Elo: 26.72 ±1.8 WDL: 4033, 28864, 7103 nElo: 51.08 ±3.4 [raw statistics] 2018‑06‑05 master vs Stockfish 9 Bench: 4326784 Call cycle detection before qsearch() [differences] 148 Elo: 28.16 ±1.8 WDL: 3971, 28823, 7206 nElo: 53.79 ±3.4 [raw statistics] 2018‑06‑11 master vs Stockfish 9 Bench: 4980482 Optimize an expression in endgame.cpp [differences] 154 Elo: 29.72 ±1.9 WDL: 4335, 27917, 7748 nElo: 54.60 ±3.4 [raw statistics] 2018‑06‑23 master vs Stockfish 9 Bench: 4557946 Another set of tuned values after one million games [differences] 162 Elo: 31.98 ±1.9 WDL: 4354, 27621, 8025 nElo: 58.11 ±3.4 [raw statistics] 2018‑07‑19 master vs Stockfish 9 Bench: 4817583 Better check evasion move sorting [differences] 179 Elo: 36.70 ±1.9 WDL: 4312, 27166, 8522 nElo: 65.70 ±3.4 [raw statistics] 2018‑07‑27 master vs Stockfish 9 Bench: 4905530 Simplify cmh pruning [differences] 199 Elo: 37.45 ±1.9 WDL: 4183, 27339, 8478 nElo: 67.55 ±3.4 [raw statistics] 2018‑07‑28 master vs Stockfish 9 Bench: 4883742 Increase the mg->eg gradient for the PawnlessFlank malus [differences] 200 Elo: 35.84 ±1.9 WDL: 4235, 27418, 8347 nElo: 64.78 ±3.4 [raw statistics] 2018‑07‑31 master vs Stockfish 9 Bench: 5591925 Small tweaks to recent code changes [differences] 203 Elo: 37.67 ±1.9 WDL: 4019, 27642, 8339 nElo: 68.82 ±3.4 [raw statistics] 2018‑08‑08 master vs Stockfish 9 Bench: 4669050 First check threshold in space evaluation [differences] 207 Elo: 37.78 ±1.9 WDL: 4224, 27220, 8556 nElo: 67.82 ±3.4 [raw statistics] 2018‑08‑12 master vs Stockfish 9 Bench: 4694813 Combo of several promising parameter tweaks [differences] 211 Elo: 40.88 ±1.9 WDL: 4069, 27177, 8754 nElo: 73.46 ±3.4 [raw statistics] 2018‑08‑14 master vs Stockfish 9 Bench: 4272361 Double weight of capture history [differences] 214 Elo: 41.69 ±1.9 WDL: 3942, 27339, 8719 nElo: 75.47 ±3.4 [raw statistics] 2018‑08‑17 master vs Stockfish 9 Bench: 4592766 Use an affine formula to mix stats and eval [differences] 217 Elo: 43.15 ±1.9 WDL: 3922, 27213, 8865 nElo: 77.82 ±3.4 [raw statistics] 2018‑08‑28 master vs Stockfish 9 Bench: 4172767 Tweak stat bonus formula [differences] 220 Elo: 44.20 ±1.9 WDL: 3861, 27217, 8922 nElo: 79.79 ±3.4 [raw statistics] 2018‑08‑28 master vs Stockfish 9 Bench: 4413173 Remove PawnsOnBothFlanks [differences] 225 Elo: 42.37 ±1.9 WDL: 3952, 27242, 8806 nElo: 76.44 ±3.4 [raw statistics] 2018‑09‑01 master vs Stockfish 9 Bench: 4609645 Re-introduce \"keep pawns on both flanks\" [differences] 227 Elo: 46.46 ±1.9 WDL: 3804, 27075, 9121 nElo: 83.56 ±3.4 [raw statistics] 2018‑09‑10 master vs Stockfish 9 Bench: 4248710 Tweak opposite colored bishops endgame scaling [differences] 230 Elo: 45.47 ±1.9 WDL: 3911, 26973, 9116 nElo: 81.36 ±3.4 [raw statistics] 2018‑09‑27 master vs Stockfish 9 Bench: 4059356 Fix two typos in comments [differences] 235 Elo: 46.93 ±1.9 WDL: 3883, 26864, 9253 nElo: 83.72 ±3.4 [raw statistics] 2018‑10‑14 master vs Stockfish 9 Bench: 4274207 Simplify check extensions [differences] 241 Elo: 49.01 ±1.9 WDL: 3783, 26829, 9388 nElo: 87.49 ±3.4 [raw statistics] 2018‑10‑25 master vs Stockfish 9 Bench: 3314347 On main thread: reduce depth after fail high [differences] 245 Elo: 52.82 ±1.9 WDL: 3514, 26937, 9549 nElo: 95.10 ±3.4 [raw statistics] 2018‑11‑01 master vs Stockfish 9 Bench: 3556672 Fix issues from using adjustedDepth too broadly [differences] 248 Elo: 51.68 ±1.9 WDL: 3581, 26932, 9487 nElo: 92.90 ±3.4 [raw statistics] 2018‑11‑08 master vs Stockfish 9 Bench: 3647775 Update list of top CPU contributors [differences] 254 Elo: 50.43 ±1.9 WDL: 3773, 26689, 9538 nElo: 89.65 ±3.5 [raw statistics] 2018‑11‑19 master vs Stockfish 9 Bench: 3717396 Stockfish 10-beta [differences] 267 Elo: 53.77 ±1.9 WDL: 3612, 26634, 9754 nElo: 95.73 ±3.5 [raw statistics] 2018‑11‑27 master vs Stockfish 9 Bench: 3939338 Simplify casting extension [differences] 274 Elo: 54.21 ±1.9 WDL: 3562, 26685, 9753 nElo: 96.75 ±3.5 [raw statistics] 2018‑11‑29 Stockfish 10 [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] [[https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png|width=20px]] Bench: 3939338 [differences] 277 Stockfish 11 Development (2018-11-29 - 2020-01-17) Date Version 1 Thread 8 Threads 2018‑12‑06 master vs Stockfish 10 Bench: 3773021 Revert \"pseudo_legal() and MOVE_NONE\" [differences] 8 Elo: 4.32 ±1.7 WDL: 5033, 29437, 5530 nElo: 8.40 ±3.4 [raw statistics] 2018‑12‑13 master vs Stockfish 10 Bench: 3332460 A combo of parameter tweaks [differences] 16 Elo: 8.06 ±1.8 WDL: 5020, 29032, 5948 nElo: 15.41 ±3.4 [raw statistics] Elo: 12.70 ±1.7 WDL: 4068, 30403, 5529 nElo: 25.98 ±3.4 [raw statistics] 2018‑12‑16 master vs Stockfish 10 Bench: 3646542 Use stronglyProtected [differences] 21 Elo: 7.85 ±1.7 WDL: 5107, 30004, 6037 nElo: 15.10 ±3.4 [raw statistics] 2019‑01‑04 master vs Stockfish 10 Bench: 3559104 Check tablebase files [differences] 40 Elo: 7.20 ±1.8 WDL: 5164, 28843, 5993 nElo: 13.64 ±3.4 [raw statistics] 2019‑01‑10 master vs Stockfish 10 Bench: 3739723 Remove pvExact [differences] 45 Elo: 13.14 ±1.8 WDL: 4779, 28930, 6291 nElo: 25.03 ±3.4 [raw statistics] Elo: 16.17 ±1.7 WDL: 3887, 30366, 5747 nElo: 33.07 ±3.4 [raw statistics] 2019‑01‑22 master vs Stockfish 10 Bench: 3665090 Simplify TrappedRook [differences] 53 Elo: 13.98 ±1.8 WDL: 4714, 28963, 6323 nElo: 26.68 ±3.4 [raw statistics] 2019‑02‑03 master vs Stockfish 10 Bench: 3653942 Less king danger if we have a knight [differences] 61 Elo: 17.71 ±1.8 WDL: 4624, 28715, 6661 nElo: 33.46 ±3.4 [raw statistics] Elo: 19.77 ±1.7 WDL: 3728, 30270, 6002 nElo: 40.32 ±3.4 [raw statistics] 2019‑03‑12 master vs Stockfish 10 Bench: 3318033 Increase thread stack for OS X (#2035) [differences] 80 Elo: 16.58 ±1.8 WDL: 4635, 28823, 6542 nElo: 31.46 ±3.4 [raw statistics] 2019‑03‑31 master vs Stockfish 10 Bench: 3548313 Assorted trivial cleanups 3/2019 (#2030) [differences] 91 Elo: 16.58 ±1.8 WDL: 4742, 28609, 6649 nElo: 31.16 ±3.4 [raw statistics] Elo: 24.33 ±1.7 WDL: 3633, 29937, 6430 nElo: 48.91 ±3.4 [raw statistics] 2019‑04‑24 master vs Stockfish 10 Bench: 3402947 Remove useless initializations (#2115) [differences] 113 Elo: 16.39 ±1.8 WDL: 4634, 28847, 6519 nElo: 31.13 ±3.4 [raw statistics] 2019‑05‑05 master vs Stockfish 10 Bench: 3644175 LMR for captures not cracking alpha [differences] 121 Elo: 16.65 ±1.8 WDL: 4788, 28508, 6704 nElo: 31.17 ±3.4 [raw statistics] 2019‑05‑15 master vs Stockfish 10 Bench: 3824325 Update failedHighCnt rule #2063 [differences] 136 Elo: 19.76 ±1.8 WDL: 4665, 28397, 6938 nElo: 36.86 ±3.4 [raw statistics] Elo: 28.93 ±1.7 WDL: 3573, 29531, 6896 nElo: 57.18 ±3.4 [raw statistics] 2019‑06‑09 master vs Stockfish 10 Bench: 3424592 Remove depth condition for ttPv (#2166) [differences] 151 Elo: 19.87 ±1.9 WDL: 4796, 28123, 7081 nElo: 36.62 ±3.4 [raw statistics] 2019‑06‑20 master vs Stockfish 10 Bench: 3398333 More bonus for free passed pawn [differences] 161 Elo: 24.06 ±1.8 WDL: 4547, 28140, 7313 nElo: 44.48 ±3.4 [raw statistics] Elo: 30.76 ±1.7 WDL: 3462, 29544, 6994 nElo: 60.92 ±3.4 [raw statistics] 2019‑06‑27 master vs Stockfish 10 Bench: 3633546 Bonus for double attacks [differences] 167 Elo: 22.75 ±1.9 WDL: 4644, 28096, 7260 nElo: 41.95 ±3.4 [raw statistics] 2019‑07‑11 master vs Stockfish 10 Bench: 3206912 Assorted trivial cleanups June 2019 [differences] 176 Elo: 24.39 ±1.9 WDL: 4596, 28005, 7399 nElo: 44.83 ±3.4 [raw statistics] 2019‑07‑25 master vs Stockfish 10 Bench: 3935523 Tweak of SEE pruning condition [differences] 192 Elo: 25.72 ±1.9 WDL: 4519, 28006, 7475 nElo: 47.32 ±3.4 [raw statistics] Elo: 37.49 ±1.7 WDL: 3225, 29251, 7524 nElo: 73.63 ±3.4 [raw statistics] 2019‑08‑14 master vs Stockfish 10 Bench: 4139590 Tweak unsafe checks [differences] 198 Elo: 32.24 ±1.9 WDL: 4168, 27963, 7869 nElo: 59.45 ±3.4 [raw statistics] 2019‑08‑26 master vs Stockfish 10 Bench: 3568210 Tweak Late Move Reduction at root [differences] 207 Elo: 35.63 ±1.9 WDL: 4021, 27870, 8109 nElo: 65.62 ±3.4 [raw statistics] Elo: 44.52 ±1.8 WDL: 2958, 28986, 8056 nElo: 86.99 ±3.4 [raw statistics] 2019‑09‑12 master vs Stockfish 10 Bench: 3954190 Scale down complexity [differences] 211 Elo: 39.10 ±1.9 WDL: 3824, 27869, 8307 nElo: 72.22 ±3.4 [raw statistics] 2019‑09‑16 master vs Stockfish 10 Bench: 4272173 Raise stack size to 8MB for pthreads [differences] 218 Elo: 37.63 ±1.9 WDL: 4007, 27670, 8323 nElo: 68.83 ±3.4 [raw statistics] Elo: 46.57 ±1.8 WDL: 2764, 28492, 7994 nElo: 91.44 ±3.4 [raw statistics] 2019‑09‑24 master vs Stockfish 10 Bench: 3618154 Increase weight for supported pawns [differences] 226 Elo: 38.97 ±1.9 WDL: 3857, 27818, 8325 nElo: 71.81 ±3.4 [raw statistics] 2019‑10‑05 master vs Stockfish 10 Bench: 4131643 Introduce separate counter-move tables [differences] 239 Elo: 41.96 ±1.9 WDL: 3746, 27701, 8553 nElo: 77.13 ±3.4 [raw statistics] Elo: 51.76 ±1.8 WDL: 2628, 28829, 8543 nElo: 101.26 ±3.4 [raw statistics] 2019‑10‑18 master vs Stockfish 10 Bench: 4423737 Current capture for Counter-Move history [differences] 247 Elo: 44.63 ±1.9 WDL: 3641, 27608, 8751 nElo: 81.93 ±3.4 [raw statistics] 2019‑11‑04 master vs Stockfish 10 Bench: 4707799 Rook PSQT Tuned [differences] 259 Elo: 42.20 ±1.9 WDL: 3686, 27793, 8521 nElo: 77.91 ±3.4 [raw statistics] Elo: 52.90 ±1.8 WDL: 2601, 28754, 8645 nElo: 103.29 ±3.4 [raw statistics] 2019‑11‑14 master vs Stockfish 10 Bench: 4532366 Prune before extension [differences] 266 Elo: 43.12 ±1.9 WDL: 3676, 27709, 8615 nElo: 79.39 ±3.4 [raw statistics] 2019‑11‑21 master vs Stockfish 10 Bench: 5067870 Do lmr for more captures [differences] 271 Elo: 46.56 ±1.5 WDL: 5306, 41395, 13299 nElo: 85.60 ±2.8 [raw statistics] Elo: 53.93 ±1.8 WDL: 2502, 28837, 8661 nElo: 105.86 ±3.4 [raw statistics] 2019‑12‑02 master vs Stockfish 10 Bench: 5122362 UnblockedStorm tuned [differences] 278 Elo: 44.88 ±1.5 WDL: 5273, 41746, 12981 nElo: 83.21 ±2.8 [raw statistics] 2019‑12‑10 master vs Stockfish 10 Bench: 5371271 Refine improving-logic [differences] 288 Elo: 47.27 ±1.5 WDL: 5329, 41229, 13442 nElo: 86.56 ±2.8 [raw statistics] Elo: 56.62 ±1.8 WDL: 2365, 28809, 8826 nElo: 111.42 ±3.4 [raw statistics] 2020‑01‑07 master vs Stockfish 10 Bench: 4747984 Tuned nullmove search [differences] 294 Elo: 51.50 ±1.5 Ptnml: 160, 3173, 15729, 9546, 1387 nElo: 98.05 ±2.8 PairsRatio: 3.28 [raw statistics] Elo: 58.15 ±1.7 Ptnml: 36, 1527, 11059, 6509, 860 nElo: 118.69 ±3.4 PairsRatio: 4.71 [raw statistics] 2020‑01‑17 master vs Stockfish 10 Bench: 5156767 Stockfish 11 [differences] 307 Elo: 53.59 ±1.5 Ptnml: 138, 2988, 15833, 9631, 1407 nElo: 102.99 ±2.8 PairsRatio: 3.53 [raw statistics] Elo: 58.07 ±1.7 Ptnml: 36, 1478, 11159, 6463, 854 nElo: 119.25 ±3.4 PairsRatio: 4.83 [raw statistics] 2020‑01‑17 Stockfish 11 [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] [[https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png|width=20px]] Bench: 5156767 [differences] 307 Stockfish 12 Development (2020-01-17 - 2020-09-02) Date Version 1 Thread 8 Threads 2020‑01‑28 master vs Stockfish 11 Bench: 5545845 More bonus for bestMoves [differences] 16 Elo: -2.47 ±1.3 Ptnml: 330, 5657, 18424, 5285, 303 nElo: -5.21 ±2.8 PairsRatio: 0.93 [raw statistics] 2020‑01‑31 master vs Stockfish 11 Bench: 5153165 Revert 5 recent patches [differences] 19 Elo: 0.85 ±1.3 Ptnml: 306, 5327, 18593, 5457, 314 nElo: 1.80 ±2.8 PairsRatio: 1.02 [raw statistics] 2020‑02‑27 master vs Stockfish 11 Bench: 4923286 Weak queen protection [differences] 32 Elo: 1.33 ±1.3 Ptnml: 327, 5308, 18486, 5567, 312 nElo: 2.80 ±2.8 PairsRatio: 1.04 [raw statistics] Elo: 0.51 ±1.4 Ptnml: 118, 3072, 13560, 3133, 117 nElo: 1.21 ±3.4 PairsRatio: 1.02 [raw statistics] 2020‑03‑20 master vs Stockfish 11 Bench: 5398277 Adjust singular extension search depth [differences] 48 Elo: 2.94 ±1.3 Ptnml: 351, 5099, 18580, 5631, 339 nElo: 6.21 ±2.8 PairsRatio: 1.10 [raw statistics] 2020‑04‑07 master vs Stockfish 11 Bench: 4417023 Introduce capture history pruning [differences] 63 Elo: 5.74 ±1.3 Ptnml: 274, 5058, 18460, 5818, 390 nElo: 12.11 ±2.8 PairsRatio: 1.16 [raw statistics] Elo: 6.49 ±1.5 Ptnml: 113, 2854, 13369, 3501, 163 nElo: 15.05 ±3.4 PairsRatio: 1.23 [raw statistics] 2020‑04‑16 master vs Stockfish 11 Bench: 4958027 Remove one condition in probcut TTmove [differences] 76 Elo: 11.33 ±1.3 Ptnml: 281, 4681, 18282, 6313, 443 nElo: 23.65 ±2.8 PairsRatio: 1.36 [raw statistics] 2020‑05‑02 master vs Stockfish 11 Bench: 4247490 Fishtest Tuning Framework [differences] 84 Elo: 15.21 ±1.3 Ptnml: 236, 4370, 18388, 6545, 461 nElo: 32.08 ±2.8 PairsRatio: 1.52 [raw statistics] Elo: 16.71 ±1.5 Ptnml: 105, 2457, 13100, 4087, 251 nElo: 37.85 ±3.4 PairsRatio: 1.69 [raw statistics] 2020‑05‑21 master vs Stockfish 11 Bench: 4778956 Tweak knight mobility [differences] 100 Elo: 15.97 ±1.3 Ptnml: 230, 4544, 17963, 6766, 497 nElo: 33.08 ±2.8 PairsRatio: 1.52 [raw statistics] 2020‑06‑06 master vs Stockfish 11 Bench: 4582693 Use lowply-history also on low depths [differences] 117 Elo: 19.45 ±1.4 Ptnml: 250, 4360, 17761, 7042, 587 nElo: 39.70 ±2.8 PairsRatio: 1.65 [raw statistics] Elo: 23.70 ±1.5 Ptnml: 88, 2142, 12987, 4524, 259 nElo: 53.99 ±3.4 PairsRatio: 2.14 [raw statistics] 2020‑06‑13 master vs Stockfish 11 Bench: 4246971 Tuned values for search constants [differences] 127 Elo: 20.91 ±1.4 Ptnml: 195, 4263, 17878, 7069, 595 nElo: 43.14 ±2.8 PairsRatio: 1.72 [raw statistics] Elo: 24.86 ±1.5 Ptnml: 81, 2088, 13016, 4523, 292 nElo: 56.58 ±3.4 PairsRatio: 2.22 [raw statistics] 2020‑06‑29 master vs Stockfish 11 Bench: 4523573 Tweak single queen endgame scaling [differences] 148 Elo: 25.67 ±1.3 Ptnml: 192, 3878, 17888, 7397, 645 nElo: 53.10 ±2.8 PairsRatio: 1.98 [raw statistics] 2020‑07‑17 master vs Stockfish 11 Bench: 4578298 Do not overwrite valuable TT data [differences] 163 Elo: 26.44 ±1.3 Ptnml: 192, 3800, 17928, 7418, 662 nElo: 54.75 ±2.8 PairsRatio: 2.02 [raw statistics] Elo: 30.71 ±1.5 Ptnml: 63, 1923, 12759, 4935, 320 nElo: 69.50 ±3.4 PairsRatio: 2.65 [raw statistics] 2020‑07‑31 master vs Stockfish 11 Bench: 4746616 Tweak cutnode reduction [differences] 167 Elo: 25.49 ±1.4 Ptnml: 203, 3910, 17861, 7342, 684 nElo: 52.38 ±2.8 PairsRatio: 1.95 [raw statistics] Elo: 32.39 ±1.5 Ptnml: 69, 1829, 12779, 4961, 362 nElo: 73.03 ±3.4 PairsRatio: 2.80 [raw statistics] 2020‑08‑06 master vs Stockfish 11 Bench: 4746616 Add NNUE evaluation [differences] 168 Elo: 83.42 ±1.7 Ptnml: 172, 2656, 12724, 11761, 2687 nElo: 144.72 ±3.0 PairsRatio: 5.11 [raw statistics] Elo: 86.10 ±1.9 Ptnml: 36, 1192, 9342, 7881, 1549 nElo: 163.20 ±3.6 PairsRatio: 7.68 [raw statistics] 2020‑08‑07 Add NNUE evaluation [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] Bench: 4746616 [differences] 168 2020‑08‑08 master vs Stockfish 11 Bench: 4084753 LMR search tweak [differences] 185 Elo: 106.20 ±1.7 Ptnml: 67, 1716, 11867, 13060, 3290 nElo: 189.91 ±3.2 PairsRatio: 9.17 [raw statistics] 2020‑08‑11 master vs Stockfish 11 Bench: 4290577 This commit enables a mixed bench [differences] 205 Elo: 125.60 ±1.7 Ptnml: 48, 1240, 10613, 14070, 4029 nElo: 224.82 ±3.3 PairsRatio: 14.05 [raw statistics] Elo: 111.78 ±1.9 Ptnml: 11, 591, 8286, 9168, 1944 nElo: 217.93 ±3.8 PairsRatio: 18.46 [raw statistics] 2020‑08‑18 master vs Stockfish 11 Bench: 4026216 Fix Makefile typo [differences] 226 Elo: 121.54 ±1.7 Ptnml: 52, 1373, 10930, 13640, 4005 nElo: 215.22 ±3.3 PairsRatio: 12.38 [raw statistics] Elo: 111.40 ±1.9 Ptnml: 20, 700, 8128, 9161, 1991 nElo: 213.20 ±3.8 PairsRatio: 15.49 [raw statistics] 2020‑08‑30 master vs Stockfish 11 Bench: 3736029 Update parameters in classical evaluation [differences] 255 Elo: 130.96 ±1.7 Ptnml: 44, 1161, 10305, 14128, 4362 nElo: 232.58 ±3.4 PairsRatio: 15.34 [raw statistics] 2020‑09‑02 master vs Stockfish 11 Bench: 3624569 Stockfish 12 [differences] 262 Elo: 133.65 ±1.7 Ptnml: 32, 1088, 10158, 14286, 4436 nElo: 238.67 ±3.4 PairsRatio: 16.72 [raw statistics] Elo: 117.62 ±1.9 Ptnml: 10, 562, 8016, 9195, 2217 nElo: 224.93 ±3.8 PairsRatio: 19.95 [raw statistics] 2020‑09‑02 Stockfish 12 [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] [[https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png|width=20px]] Bench: 3624569 [differences] 262 Stockfish 13 Development (2020-09-02 - 2021-02-18) Date Version 1 Thread 8 Threads 2020‑09‑08 master vs Stockfish 12 Bench: 4161067 Double probability of using classical eval [differences] 10 Elo: 6.49 ±1.0 Ptnml: 85, 3319, 22112, 4359, 125 nElo: 17.26 ±2.8 PairsRatio: 1.32 [raw statistics] 2020‑09‑21 master vs Stockfish 12 Bench: 3973739 Add large page support for NNUE weights [differences] 21 Elo: 13.88 ±1.0 Ptnml: 49, 2767, 22106, 4896, 182 nElo: 37.07 ±2.8 PairsRatio: 1.80 [raw statistics] Elo: 8.97 ±1.1 Ptnml: 15, 1474, 16020, 2445, 46 nElo: 27.99 ±3.4 PairsRatio: 1.67 [raw statistics] 2020‑09‑28 master vs Stockfish 12 Bench: 3776081 Include pawns in NNUE scaling [differences] 33 Elo: 23.15 ±1.0 Ptnml: 38, 1945, 22217, 5587, 213 nElo: 63.29 ±2.7 PairsRatio: 2.92 [raw statistics] 2020‑10‑18 master vs Stockfish 12 Bench: 4066972 Do more reductions for late quiet moves [differences] 41 Elo: 24.09 ±1.0 Ptnml: 43, 2023, 21889, 5827, 218 nElo: 64.60 ±2.7 PairsRatio: 2.93 [raw statistics] Elo: 21.17 ±1.1 Ptnml: 12, 908, 15789, 3216, 75 nElo: 65.43 ±3.2 PairsRatio: 3.58 [raw statistics] 2020‑11‑01 master vs Stockfish 12 Bench: 3517795 Update default net to nn-cb26f10b1fd9.nnue [differences] 48 Elo: 28.02 ±1.1 Ptnml: 63, 2079, 21107, 6469, 282 nElo: 71.59 ±2.7 PairsRatio: 3.15 [raw statistics] 2020‑11‑15 master vs Stockfish 12 Bench: 3597730 Rook Mobility Tweak [differences] 60 Elo: 29.99 ±1.0 Ptnml: 32, 1667, 21658, 6389, 254 nElo: 80.38 ±2.7 PairsRatio: 3.91 [raw statistics] Elo: 25.49 ±1.1 Ptnml: 10, 799, 15532, 3570, 89 nElo: 77.27 ±3.2 PairsRatio: 4.52 [raw statistics] 2020‑11‑29 master vs Stockfish 12 Bench: 3561701 Update default net to nn-62ef826d1a6d.nnue [differences] 72 Elo: 30.61 ±1.0 Ptnml: 19, 1645, 21655, 6407, 274 nElo: 82.09 ±2.7 PairsRatio: 4.02 [raw statistics] 2020‑12‑14 master vs Stockfish 12 Bench: 4050630 Increase reduction in case of stable best move [differences] 79 Elo: 32.09 ±1.0 Ptnml: 33, 1581, 21474, 6651, 261 nElo: 85.57 ±2.7 PairsRatio: 4.28 [raw statistics] Elo: 27.50 ±1.1 Ptnml: 10, 706, 15480, 3723, 81 nElo: 83.75 ±3.1 PairsRatio: 5.31 [raw statistics] 2020‑12‑31 master vs Stockfish 12 Bench: 4109336 WeakUnopposed penalty for backwards [differences] 89 Elo: 33.71 ±1.0 Ptnml: 23, 1475, 21475, 6730, 297 nElo: 90.01 ±2.6 PairsRatio: 4.69 [raw statistics] 2021‑01‑13 master vs Stockfish 12 Bench: 4287509 Optimize generate_moves [differences] 101 Elo: 32.40 ±1.0 Ptnml: 31, 1487, 21588, 6660, 234 nElo: 87.55 ±2.7 PairsRatio: 4.54 [raw statistics] Elo: 28.29 ±1.1 Ptnml: 10, 671, 15468, 3761, 90 nElo: 86.06 ±3.1 PairsRatio: 5.65 [raw statistics] 2021‑02‑15 master vs Stockfish 12 Bench: 3766422 Small trivial clean-ups, February 2021 [differences] 121 Elo: 36.03 ±1.1 Ptnml: 29, 1395, 21210, 7079, 287 nElo: 95.63 ±2.7 PairsRatio: 5.17 [raw statistics] Elo: 29.08 ±1.1 Ptnml: 6, 626, 15476, 3806, 86 nElo: 89.08 ±3.1 PairsRatio: 6.16 [raw statistics] 2021‑02‑18 Stockfish 13 [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] [[https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png|width=20px]] Bench: 3766422 [differences] 123 Stockfish 14 Development (2021-02-18 - 2021-07-02) Date Version 1 Thread 8 Threads 2021‑02‑26 master vs Stockfish 13 Bench: 5037279 Introduce DistanceFromPV [differences] 4 Elo: 1.34 ±0.8 Ptnml: 28, 2367, 24980, 2596, 29 nElo: 4.55 ±2.8 PairsRatio: 1.10 [raw statistics] 2021‑03‑24 master vs Stockfish 13 Bench: 4339126 Small cleanups (march 2021) [differences] 18 Elo: 0.61 ±0.8 Ptnml: 18, 2457, 24938, 2575, 12 nElo: 2.09 ±2.8 PairsRatio: 1.05 [raw statistics] 2021‑04‑15 master vs Stockfish 13 Bench: 4503918 Use classical eval for Bishop vs Pawns [differences] 29 Elo: 1.47 ±0.8 Ptnml: 39, 2384, 24886, 2667, 24 nElo: 4.93 ±2.8 PairsRatio: 1.11 [raw statistics] Elo: 0.89 ±0.9 Ptnml: 11, 1279, 17318, 1381, 11 nElo: 3.38 ±3.4 PairsRatio: 1.08 [raw statistics] 2021‑05‑22 master vs Stockfish 13 Bench: 3856635 Sometimes change the balance [differences] 62 Elo: 10.12 ±1.0 Ptnml: 60, 2454, 23277, 4096, 113 nElo: 29.34 ±2.8 PairsRatio: 1.67 [raw statistics] 2021‑06‑14 master vs Stockfish 13 Bench: 4877339 Update default net to nn-8e47cf062333.nnue [differences] 90 Elo: 21.80 ±1.1 Ptnml: 67, 2216, 21852, 5620, 245 nElo: 57.47 ±2.7 PairsRatio: 2.57 [raw statistics] Elo: 16.96 ±1.1 Ptnml: 15, 1083, 15923, 2894, 85 nElo: 52.38 ±3.3 PairsRatio: 2.71 [raw statistics] 2021‑06‑18 master vs Stockfish 13 Bench: 4900906 Make net nn-50144f835024.nnue the default [differences] 100 Elo: 25.56 ±1.0 Ptnml: 30, 1814, 22084, 5864, 208 nElo: 69.95 ±2.7 PairsRatio: 3.29 [raw statistics] 2021‑06‑29 master vs Stockfish 13 Bench: 4770936 Update Top CPU Contributors [differences] 113 Elo: 30.27 ±1.0 Ptnml: 14, 1443, 22127, 6146, 270 nElo: 83.66 ±2.6 PairsRatio: 4.40 [raw statistics] Elo: 22.62 ±1.1 Ptnml: 7, 755, 15977, 3153, 108 nElo: 71.15 ±3.1 PairsRatio: 4.28 [raw statistics] 2021‑07‑02 Stockfish 14 [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] [[https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png|width=20px]] Bench: 4770936 [differences] 114 Stockfish 15 Development (2021-07-02 - 2022-04-18) Date Version 1 Thread 8 Threads 1 Thread (UHO) 2021‑07‑26 master vs Stockfish 14 Bench: 5124774 Update default net to nn-26abeed38351.nnue [differences] 17 Elo: 2.74 ±0.8 Ptnml: 24, 2000, 25476, 2478, 22 nElo: 9.85 ±2.8 PairsRatio: 1.24 [raw statistics] 2021‑08‑15 master vs Stockfish 14 Bench: 5189338 New NNUE architecture and net [differences] 26 Elo: 9.31 ±0.9 Ptnml: 24, 2044, 24321, 3522, 89 nElo: 29.61 ±2.7 PairsRatio: 1.75 [raw statistics] Elo: 6.08 ±0.9 Ptnml: 5, 1063, 17183, 1725, 24 nElo: 22.66 ±3.4 PairsRatio: 1.64 [raw statistics] 2021‑08‑31 master vs Stockfish 14 Bench: 5600615 Update default net to nn-735bba95dec0.nnue [differences] 39 Elo: 15.04 ±0.9 Ptnml: 17, 1601, 24272, 3990, 120 nElo: 47.86 ±2.7 PairsRatio: 2.54 [raw statistics] 2021‑09‑15 master vs Stockfish 14 Bench: 6658747 Update default net to nn-13406b1dcbe0.nnue [differences] 46 Elo: 16.64 ±0.9 Ptnml: 21, 1878, 23452, 4506, 143 nElo: 49.53 ±2.7 PairsRatio: 2.45 [raw statistics] Elo: 12.39 ±0.9 Ptnml: 1, 766, 17084, 2104, 45 nElo: 45.59 ±3.2 PairsRatio: 2.80 [raw statistics] 2021‑10‑06 master vs Stockfish 14 Bench: 6261865 Capping stat bonus at 2000 [differences] 57 Elo: 18.68 ±0.9 Ptnml: 28, 1496, 23821, 4535, 120 nElo: 57.70 ±2.7 PairsRatio: 3.05 [raw statistics] Elo: 11.74 ±0.9 Ptnml: 4, 769, 17137, 2052, 38 nElo: 43.60 ±3.2 PairsRatio: 2.70 [raw statistics] 2021‑10‑18 master vs Stockfish 14 Bench: 5005810 Simplify probCutCount away [differences] 67 Elo: 17.69 ±0.9 Ptnml: 13, 1577, 23891, 4382, 137 nElo: 54.78 ±2.7 PairsRatio: 2.84 [raw statistics] 2021‑10‑23 master vs Stockfish 14 Bench: 6334068 Adjust ButterflyHistory decay parameter [differences] 78 Elo: 17.87 ±0.9 Ptnml: 11, 1377, 24244, 4253, 115 nElo: 57.35 ±2.6 PairsRatio: 3.15 [raw statistics] Elo: 10.27 ±0.9 Ptnml: 3, 696, 17438, 1842, 21 nElo: 40.55 ±3.2 PairsRatio: 2.67 [raw statistics] 2021‑10‑28 Stockfish 14.1 [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] Bench: 6334068 [differences] 80 2021‑11‑05 master vs Stockfish 14 Bench: 6719976 Tweak initial aspiration window [differences] 89 Elo: 18.71 ±0.9 Ptnml: 16, 1293, 24255, 4319, 117 nElo: 60.14 ±2.6 PairsRatio: 3.39 [raw statistics] 2021‑11‑23 master vs Stockfish 14 Bench: 7334766 Less futility pruning [differences] 98 Elo: 19.35 ±0.9 Ptnml: 19, 1405, 23923, 4524, 129 nElo: 60.39 ±2.6 PairsRatio: 3.27 [raw statistics] Elo: 13.28 ±0.9 Ptnml: 3, 696, 17112, 2148, 41 nElo: 49.26 ±3.2 PairsRatio: 3.13 [raw statistics] 2021‑11‑28 master vs Stockfish 14 Bench: 6302543 Refine futility pruning for parent nodes [differences] 103 Elo: 24.44 ±0.9 Ptnml: 9, 1054, 23776, 5037, 124 nElo: 76.95 ±2.5 PairsRatio: 4.86 [raw statistics] 2021‑12‑07 master vs Stockfish 14 Bench: 4667742 Update default net to nn-63376713ba63.nnue [differences] 118 Elo: 26.99 ±0.9 Ptnml: 11, 998, 23473, 5365, 153 nElo: 83.13 ±2.5 PairsRatio: 5.47 [raw statistics] Elo: 17.80 ±0.9 Ptnml: 6, 529, 16919, 2504, 42 nElo: 64.76 ±3.1 PairsRatio: 4.76 [raw statistics] 2021‑12‑14 master vs Stockfish 14 Bench: 4735679 Remove NNUE scaling term [differences] 126 Elo: 26.45 ±0.9 Ptnml: 9, 962, 23656, 5207, 166 nElo: 82.28 ±2.5 PairsRatio: 5.53 [raw statistics] 2021‑12‑22 master vs Stockfish 14 Bench: 4633875 Update default net to nn-ac07bd334b62.nnue [differences] 139 Elo: 28.65 ±0.9 Ptnml: 11, 1036, 23172, 5567, 214 nElo: 85.61 ±2.5 PairsRatio: 5.52 [raw statistics] Elo: 17.66 ±0.9 Ptnml: 2, 520, 16976, 2448, 54 nElo: 64.60 ±3.0 PairsRatio: 4.79 [raw statistics] 2022‑01‑10 master vs Stockfish 14 Bench: 4572746 Adjust pruning constants [differences] 148 Elo: 30.51 ±1.0 Ptnml: 13, 1065, 22809, 5879, 234 nElo: 89.03 ±2.5 PairsRatio: 5.67 [raw statistics] 2022‑01‑29 master vs Stockfish 14 Bench: 4637392 Do stats updates after LMR for captures [differences] 159 Elo: 32.07 ±1.0 Ptnml: 10, 1009, 22681, 6049, 251 nElo: 93.05 ±2.5 PairsRatio: 6.18 [raw statistics] Elo: 22.31 ±1.0 Ptnml: 3, 496, 16495, 2945, 61 nElo: 76.78 ±3.0 PairsRatio: 6.02 [raw statistics] 2022‑02‑10 master vs Stockfish 14 Bench: 4919707 Update architecture to \"SFNNv4\" [differences] 166 Elo: 34.88 ±1.0 Ptnml: 13, 884, 22430, 6432, 241 nElo: 100.85 ±2.5 PairsRatio: 7.44 [raw statistics] Elo: 24.37 ±1.0 Ptnml: 2, 416, 16441, 3061, 80 nElo: 83.29 ±2.9 PairsRatio: 7.51 [raw statistics] 2022‑02‑17 master vs Stockfish 14 Bench: 6318903 Tune search at very long time control [differences] 168 Elo: 33.07 ±1.0 Ptnml: 17, 984, 22522, 6243, 234 nElo: 95.49 ±2.5 PairsRatio: 6.47 [raw statistics] Elo: 23.83 ±1.0 Ptnml: 4, 410, 16496, 3023, 67 nElo: 82.31 ±2.9 PairsRatio: 7.46 [raw statistics] 2022‑03‑19 master vs Stockfish 14 Bench: 7044203 Remove ttPv tree shrinking [differences] 180 Elo: 35.01 ±1.0 Ptnml: 11, 801, 22566, 6395, 227 nElo: 102.62 ±2.5 PairsRatio: 8.16 [raw statistics] 2022‑04‑17 master vs Stockfish 14 Bench: 8129754 Decrease LMR at PV nodes with low depth [differences] 189 Elo: 36.69 ±1.0 Ptnml: 5, 711, 22489, 6557, 238 nElo: 107.69 ±2.4 PairsRatio: 9.49 [raw statistics] Elo: 26.09 ±1.0 Ptnml: 1, 341, 16379, 3217, 62 nElo: 89.84 ±2.8 PairsRatio: 9.59 [raw statistics] Elo: 91.22 ±1.3 Ptnml: 17, 1335, 12388, 15750, 510 nElo: 205.62 ±3.6 PairsRatio: 12.03 [raw statistics] 2022‑04‑18 Stockfish 15 [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] [[https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png|width=20px]] Bench: 8129754 [differences] 190 Stockfish 16 Development (2022-04-18 - 2023-06-29) Date Version 1 Thread 8 Threads 1 Thread (UHO) 2022‑05‑14 master vs Stockfish 15 Bench: 6481017 SE depth scaling using the previous depth [differences] 9 Elo: 4.54 ±0.8 Ptnml: 18, 1850, 25507, 2580, 45 nElo: 16.29 ±2.8 PairsRatio: 1.41 [raw statistics] Elo: 3.12 ±0.8 Ptnml: 5, 803, 18029, 1154, 9 nElo: 13.92 ±3.4 PairsRatio: 1.44 [raw statistics] 2022‑06‑16 master vs Stockfish 15 Bench: 5845802 Simplify away condition in ttSave in probCut [differences] 25 Elo: 5.72 ±0.8 Ptnml: 31, 1838, 25288, 2799, 44 nElo: 19.99 ±2.8 PairsRatio: 1.52 [raw statistics] 2022‑07‑13 master vs Stockfish 15 Bench: 5905619 Update default net to nn-ad9b42354671.nnue [differences] 34 Elo: 5.70 ±0.8 Ptnml: 42, 1867, 25207, 2832, 52 nElo: 19.67 ±2.8 PairsRatio: 1.51 [raw statistics] Elo: 4.86 ±0.8 Ptnml: 3, 734, 17975, 1276, 12 nElo: 21.46 ±3.3 PairsRatio: 1.75 [raw statistics] 2022‑08‑12 master vs Stockfish 15 Bench: 5868987 Remove an unneeded randomization of evals [differences] 43 Elo: 7.18 ±0.8 Ptnml: 48, 1784, 25112, 2993, 63 nElo: 24.44 ±2.8 PairsRatio: 1.67 [raw statistics] Elo: 4.60 ±0.8 Ptnml: 5, 737, 17987, 1265, 6 nElo: 20.43 ±3.4 PairsRatio: 1.71 [raw statistics] Elo: 14.61 ±1.3 Ptnml: 149, 5043, 17073, 7608, 127 nElo: 30.73 ±2.8 PairsRatio: 1.49 [raw statistics] 2022‑09‑07 master vs Stockfish 15 Bench: 5609606 VLTC tuning [differences] 52 Elo: 6.87 ±0.8 Ptnml: 40, 1796, 25154, 2958, 52 nElo: 23.61 ±2.8 PairsRatio: 1.64 [raw statistics] Elo: 5.45 ±0.8 Ptnml: 3, 732, 17913, 1339, 13 nElo: 23.68 ±3.3 PairsRatio: 1.84 [raw statistics] 2022‑10‑05 master vs Stockfish 15 Bench: 4114228 Revert \"Mix alpha and statScore for reduction\" [differences] 66 Elo: 6.86 ±0.8 Ptnml: 21, 1580, 25632, 2727, 40 nElo: 25.04 ±2.7 PairsRatio: 1.73 [raw statistics] Elo: 5.98 ±0.8 Ptnml: 6, 643, 18015, 1329, 7 nElo: 26.72 ±3.3 PairsRatio: 2.06 [raw statistics] 2022‑10‑30 master vs Stockfish 15 Bench: 4271738 Adjust reduction less at medium depths [differences] 81 Elo: 8.52 ±0.8 Ptnml: 23, 1469, 25573, 2884, 51 nElo: 30.84 ±2.7 PairsRatio: 1.97 [raw statistics] Elo: 5.91 ±0.7 Ptnml: 6, 589, 18129, 1271, 5 nElo: 27.24 ±3.3 PairsRatio: 2.14 [raw statistics] Elo: 17.17 ±1.8 Ptnml: 38, 2430, 8572, 3933, 27 nElo: 36.91 ±4.0 PairsRatio: 1.60 [raw statistics] 2022‑12‑02 master vs Stockfish 15 Bench: 3467381 Fix bestThread selection [differences] 97 Elo: 7.46 ±0.7 Ptnml: 21, 1389, 25902, 2657, 31 nElo: 28.19 ±2.7 PairsRatio: 1.91 [raw statistics] Elo: 5.97 ±0.7 Ptnml: 3, 573, 18164, 1254, 6 nElo: 27.83 ±3.3 PairsRatio: 2.19 [raw statistics] Elo: 17.04 ±1.3 Ptnml: 73, 4844, 17208, 7820, 55 nElo: 36.73 ±2.8 PairsRatio: 1.60 [raw statistics] 2022‑12‑04 Stockfish 15.1 [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] Bench: 3467381 [differences] 98 2022‑12‑19 master vs Stockfish 15 Bench: 3727508 Sometimes do a reduced search if LMR is skipped [differences] 119 Elo: 8.55 ±0.8 Ptnml: 16, 1420, 25675, 2850, 39 nElo: 31.50 ±2.7 PairsRatio: 2.01 [raw statistics] 2023‑01‑01 master vs Stockfish 15 Bench: 4015511 Update default net to nn-60fa44e376d9.nnue [differences] 126 Elo: 10.00 ±0.8 Ptnml: 15, 1301, 25667, 2976, 41 nElo: 36.92 ±2.7 PairsRatio: 2.29 [raw statistics] Elo: 7.10 ±0.7 Ptnml: 6, 529, 18118, 1336, 11 nElo: 32.56 ±3.2 PairsRatio: 2.52 [raw statistics] Elo: 23.55 ±1.3 Ptnml: 59, 4354, 17132, 8377, 78 nElo: 51.05 ±2.8 PairsRatio: 1.92 [raw statistics] 2023‑01‑23 master vs Stockfish 15 Bench: 3941848 Update default net to nn-bc24c101ada0.nnue [differences] 143 Elo: 11.37 ±0.7 Ptnml: 9, 1127, 25786, 3048, 30 nElo: 42.95 ±2.7 PairsRatio: 2.71 [raw statistics] Elo: 9.09 ±0.8 Ptnml: 2, 484, 17984, 1526, 4 nElo: 40.84 ±3.2 PairsRatio: 3.15 [raw statistics] Elo: 29.49 ±1.3 Ptnml: 43, 3893, 17099, 8870, 95 nElo: 64.58 ±2.9 PairsRatio: 2.28 [raw statistics] 2023‑02‑09 master vs Stockfish 15 Bench: 3841998 Update default net to nn-1337b1adec5b.nnue [differences] 162 Elo: 12.76 ±0.8 Ptnml: 9, 1089, 25635, 3224, 43 nElo: 47.33 ±2.6 PairsRatio: 2.98 [raw statistics] Elo: 8.49 ±0.8 Ptnml: 2, 502, 18018, 1473, 5 nElo: 38.38 ±3.2 PairsRatio: 2.93 [raw statistics] Elo: 32.71 ±1.3 Ptnml: 44, 3760, 16821, 9269, 106 nElo: 71.26 ±2.9 PairsRatio: 2.46 [raw statistics] 2023‑02‑18 master vs Stockfish 15 Bench: 4283297 Remove one reduction call [differences] 168 Elo: 12.58 ±0.8 Ptnml: 11, 1127, 25591, 3221, 50 nElo: 46.26 ±2.6 PairsRatio: 2.87 [raw statistics] Elo: 31.91 ±1.3 Ptnml: 47, 3828, 16804, 9225, 96 nElo: 69.38 ±2.9 PairsRatio: 2.41 [raw statistics] 2023‑02‑24 master vs Stockfish 15 Bench: 4705194 Search tuning at very long time control [differences] 174 Elo: 11.69 ±0.7 Ptnml: 10, 1151, 25692, 3105, 42 nElo: 43.51 ±2.6 PairsRatio: 2.71 [raw statistics] Elo: 9.37 ±0.8 Ptnml: 1, 455, 18013, 1526, 5 nElo: 42.48 ±3.1 PairsRatio: 3.36 [raw statistics] Elo: 32.42 ±1.3 Ptnml: 44, 3804, 16761, 9307, 84 nElo: 70.59 ±2.9 PairsRatio: 2.44 [raw statistics] 2023‑03‑19 master vs Stockfish 15 Bench: 4980082 Remove 'si' StateInfo variable/parameter. [differences] 196 Elo: 13.36 ±0.8 Ptnml: 9, 1098, 25532, 3300, 61 nElo: 48.75 ±2.6 PairsRatio: 3.04 [raw statistics] Elo: 10.10 ±0.8 Ptnml: 0, 460, 17934, 1589, 17 nElo: 44.63 ±3.1 PairsRatio: 3.49 [raw statistics] Elo: 35.27 ±1.3 Ptnml: 48, 3610, 16657, 9594, 91 nElo: 76.91 ±2.9 PairsRatio: 2.65 [raw statistics] 2023‑04‑01 master vs Stockfish 15 Bench: 4380438 Decrease Depth more for positions not in TT. [differences] 211 Elo: 14.42 ±0.8 Ptnml: 7, 1031, 25480, 3431, 51 nElo: 52.68 ±2.6 PairsRatio: 3.35 [raw statistics] Elo: 9.90 ±0.8 Ptnml: 2, 450, 17964, 1575, 9 nElo: 44.20 ±3.1 PairsRatio: 3.50 [raw statistics] Elo: 37.37 ±1.3 Ptnml: 48, 3485, 16555, 9815, 97 nElo: 81.54 ±2.9 PairsRatio: 2.81 [raw statistics] 2023‑04‑22 master vs Stockfish 15 Bench: 3548023 Less reduction for tt move. [differences] 235 Elo: 14.60 ±0.8 Ptnml: 9, 967, 25569, 3405, 50 nElo: 53.91 ±2.6 PairsRatio: 3.54 [raw statistics] Elo: 11.32 ±0.8 Ptnml: 0, 386, 17939, 1661, 14 nElo: 50.39 ±3.0 PairsRatio: 4.34 [raw statistics] Elo: 38.07 ±1.3 Ptnml: 27, 3392, 16687, 9793, 101 nElo: 83.87 ±2.9 PairsRatio: 2.89 [raw statistics] 2023‑05‑07 master vs Stockfish 15 Bench: 3808503 Refine deeper post-lmr searches [differences] 244 Elo: 14.36 ±0.8 Ptnml: 11, 1004, 25521, 3423, 41 nElo: 52.83 ±2.6 PairsRatio: 3.41 [raw statistics] Elo: 10.63 ±0.7 Ptnml: 0, 379, 18029, 1581, 11 nElo: 48.41 ±3.0 PairsRatio: 4.20 [raw statistics] Elo: 39.62 ±1.3 Ptnml: 34, 3309, 16568, 9988, 101 nElo: 87.17 ±2.9 PairsRatio: 3.02 [raw statistics] 2023‑06‑04 master vs Stockfish 15 Bench: 2551691 Move internal iterative reduction before probcut [differences] 265 Elo: 15.01 ±0.8 Ptnml: 9, 1037, 25355, 3552, 47 nElo: 54.25 ±2.6 PairsRatio: 3.44 [raw statistics] Elo: 11.87 ±0.8 Ptnml: 3, 362, 17908, 1720, 7 nElo: 52.68 ±3.0 PairsRatio: 4.73 [raw statistics] Elo: 38.10 ±1.3 Ptnml: 48, 3387, 16634, 9826, 105 nElo: 83.49 ±2.9 PairsRatio: 2.89 [raw statistics] 2023‑06‑12 master vs Stockfish 15 Bench: 2370027 Use block sparse input for the first layer. [differences] 274 Elo: 17.57 ±0.8 Ptnml: 10, 881, 25223, 3840, 46 nElo: 63.12 ±2.5 PairsRatio: 4.36 [raw statistics] Elo: 13.95 ±0.8 Ptnml: 1, 290, 17828, 1865, 16 nElo: 60.93 ±2.8 PairsRatio: 6.46 [raw statistics] Elo: 44.18 ±1.3 Ptnml: 45, 3031, 16345, 10449, 130 nElo: 97.20 ±3.0 PairsRatio: 3.44 [raw statistics] 2023‑06‑22 master vs Stockfish 15 Bench: 2593605 Update default net to nn-5af11540bbfe.nnue [differences] 289 Elo: 18.30 ±0.8 Ptnml: 3, 812, 25265, 3864, 56 nElo: 66.19 ±2.5 PairsRatio: 4.81 [raw statistics] Elo: 14.33 ±0.8 Ptnml: 3, 297, 17767, 1914, 19 nElo: 61.59 ±2.9 PairsRatio: 6.44 [raw statistics] Elo: 47.03 ±1.3 Ptnml: 26, 2938, 16102, 10805, 129 nElo: 103.71 ±3.0 PairsRatio: 3.69 [raw statistics] 2023‑06‑29 Stockfish 16 [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] [[https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png|width=20px]] Bench: 2593605 [differences] 290 Stockfish 17 Development (2023-06-29 - 2024-09-06) Date Version 1 Thread 8 Threads 2023‑07‑19 master vs Stockfish 16 Bench: 1727577 Do more futility pruning for cutNodes that are not in TT [differences] 41 Elo: 0.10 ±1.4 Ptnml: 96, 6835, 16121, 6851, 97 nElo: 0.21 ±2.8 PairsRatio: 1.00 [raw statistics] Elo: 2.10 ±1.3 Ptnml: 30, 5872, 17820, 6261, 17 nElo: 4.64 ±2.8 PairsRatio: 1.06 [raw statistics] 2023‑08‑13 master vs Stockfish 16 Bench: 1447866 Simplify material difference in evaluate [differences] 68 Elo: 0.58 ±1.4 Ptnml: 120, 6787, 16066, 6927, 100 nElo: 1.17 ±2.8 PairsRatio: 1.02 [raw statistics] Elo: 2.08 ±1.2 Ptnml: 15, 5797, 18021, 6147, 20 nElo: 4.65 ±2.8 PairsRatio: 1.06 [raw statistics] 2023‑09‑11 master vs Stockfish 16 Bench: 1603079 Cleanup code after dropping ICC support in favor of ICX [differences] 93 Elo: 7.66 ±1.4 Ptnml: 86, 6160, 16212, 7429, 113 nElo: 15.68 ±2.8 PairsRatio: 1.21 [raw statistics] Elo: 5.65 ±1.2 Ptnml: 16, 5524, 17944, 6500, 16 nElo: 12.57 ±2.8 PairsRatio: 1.18 [raw statistics] 2023‑09‑22 master vs Stockfish 16 Bench: 1246812 Update NNUE architecture to SFNNv8: L1-2560 nn-ac1dbea57aa3.nnue [differences] 103 Elo: 3.33 ±1.4 Ptnml: 106, 6534, 16134, 7131, 95 nElo: 6.78 ±2.8 PairsRatio: 1.09 [raw statistics] Elo: 6.61 ±1.3 Ptnml: 21, 5553, 17713, 6689, 24 nElo: 14.56 ±2.8 PairsRatio: 1.20 [raw statistics] 2023‑10‑08 master vs Stockfish 16 Bench: 1246560 Skip futility pruning if ttMove has bad history [differences] 119 Elo: 9.68 ±1.4 Ptnml: 100, 6094, 15972, 7702, 132 nElo: 19.61 ±2.8 PairsRatio: 1.26 [raw statistics] Elo: 10.30 ±1.3 Ptnml: 13, 5168, 17868, 6930, 21 nElo: 22.90 ±2.8 PairsRatio: 1.34 [raw statistics] 2023‑10‑23 master vs Stockfish 16 Bench: 1241996 Follow up Makefile changes for clang-format [differences] 136 Elo: 10.47 ±1.4 Ptnml: 94, 6071, 15901, 7801, 133 nElo: 21.17 ±2.8 PairsRatio: 1.29 [raw statistics] Elo: 9.16 ±1.3 Ptnml: 19, 5311, 17763, 6884, 23 nElo: 20.24 ± 2.8 ParsRatio: 1.30 [raw statistics] 2023‑11‑03 master vs Stockfish 16 Bench: 1330590 Update pawn history based on static eval difference [differences] 150 Elo: 10.57 ±1.4 Ptnml: 112, 6018, 15922, 7829, 119 nElo: 21.38 ±2.8 PairsRatio: 1.30 [raw statistics] Elo: 9.16 ±1.3 Ptnml: 27, 5330, 17701, 6919, 23 nElo: 20.17 ±2.8 PairsRatio: 1.30 [raw statistics] 2023‑12‑02 master vs Stockfish 16 Bench: 1403703 Tweak return value in futility pruning [differences] 172 Elo: 12.59 ±1.4 Ptnml: 93, 5810, 16029, 7966, 102 nElo: 25.70 ±2.8 PairsRatio: 1.37 [raw statistics] Elo: 10.08 ±1.3 Ptnml: 18, 5168, 17893, 6897, 24 nElo: 22.42 ±2.8 PairsRatio: 1.33 [raw statistics] 2023‑12‑31 master vs Stockfish 16 Bench: 1392883 Tweak static eval history update [differences] 202 Elo: 19.19 ±1.4 Ptnml: 74, 5393, 15884, 8446, 203 nElo: 38.89 ±2.8 PairsRatio: 1.58 [raw statistics] Elo: 16.82 ±1.3 Ptnml: 13, 4672, 17747, 7535, 33 nElo: 37.42 ±2.8 PairsRatio: 1.62 [raw statistics] 2024‑01‑07 master vs Stockfish 16 Bench: 1438336 Prefix abs with std:: [differences] 219 Elo: 25.53 ±1.4 Ptnml: 58, 4917, 15789, 9038, 198 nElo: 52.14 ±2.8 PairsRatio: 1.86 [raw statistics] Elo: 18.88 ±1.3 Ptnml: 12, 4602, 17534, 7820, 32 nElo: 41.76 ±2.8 PairsRatio: 1.70 [raw statistics] 2024‑01‑21 master vs Stockfish 16 Bench: 1235377 VLTC search tune [differences] 242 Elo: 26.49 ±1.4 Ptnml: 64, 4791, 15823, 9159, 163 nElo: 54.42 ±2.8 PairsRatio: 1.92 [raw statistics] Elo: 22.91 ±1.2 Ptnml: 12, 4114, 17807, 8046, 21 nElo: 51.64 ±2.8 PairsRatio: 1.96 [raw statistics] 2024‑02‑11 master vs Stockfish 16 Bench: 1027182 Format code using clang-format [differences] 269 Elo: 22.81 ±1.4 Ptnml: 81, 5104, 15792, 8846, 177 nElo: 46.39 ±2.8 PairsRatio: 1.74 [raw statistics] Elo: 22.13 ±1.3 Ptnml: 22, 4312, 17524, 8112, 30 nElo: 49.11 ±2.8 PairsRatio: 1.88 [raw statistics] 2024‑02‑17 master vs Stockfish 16 Bench: 1303971 Simplify PV node reduction [differences] 276 Elo: 27.04 ±1.4 Ptnml: 65, 4832, 15656, 9272, 175 nElo: 55.20 ±2.9 PairsRatio: 1.93 [raw statistics] Elo: 27.03 ±1.2 Ptnml: 16, 3891, 17544, 8517, 32 nElo: 60.62 ±2.9 PairsRatio: 2.19 [raw statistics] 2024‑02‑24 Stockfish 16.1 [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] Bench: 1303971 [differences] 280 2024‑03‑12 master vs Stockfish 16 Bench: 1715522 Search + Eval + Movepick Tune [differences] 302 Elo: 27.13 ±1.4 Ptnml: 79, 4801, 15674, 9257, 189 nElo: 55.27 ±2.9 PairsRatio: 1.94 [raw statistics] Elo: 29.99 ±1.2 Ptnml: 15, 3656, 17515, 8775, 39 nElo: 67.59 ±2.9 PairsRatio: 2.40 [raw statistics] 2024‑03‑29 master vs Stockfish 16 Bench: 1759189 Simplify NMP Condition [differences] 322 Elo: 27.73 ±1.4 Ptnml: 80, 4736, 15703, 9287, 194 nElo: 56.57 ±2.9 PairsRatio: 1.97 [raw statistics] Elo: 30.03 ±1.2 Ptnml: 16, 3637, 17534, 8784, 29 nElo: 67.81 ±2.9 PairsRatio: 2.41 [raw statistics] 2024‑04‑11 master vs Stockfish 16 Bench: 1479416 Simplify the depth-dependent part of the best value adjustment formula in main search [differences] 333 Elo: 23.53 ±1.4 Ptnml: 75, 5095, 15696, 8965, 169 nElo: 47.82 ±2.8 PairsRatio: 1.77 [raw statistics] Elo: 35.27 ±1.2 Ptnml: 10, 3235, 17465, 9255, 35 nElo: 80.49 ±2.9 PairsRatio: 2.86 [raw statistics] 2024‑04‑24 master vs Stockfish 16 Bench: 1836777 Implement accumulator refresh table [differences] 348 Elo: 32.04 ±1.4 Ptnml: 51, 4471, 15578, 9709, 191 nElo: 65.84 ±2.9 PairsRatio: 2.19 [raw statistics] Elo: 37.86 ±1.2 Ptnml: 7, 3255, 17012, 9670, 56 nElo: 85.18 ±2.9 PairsRatio: 2.98 [raw statistics] 2024‑05‑05 master vs Stockfish 16 Bench: 2180675 VVLTC search tune [differences] 369 Elo: 28.90 ±1.4 Ptnml: 70, 4716, 15571, 9451, 192 nElo: 58.87 ±2.9 PairsRatio: 2.01 [raw statistics] Elo: 40.41 ±1.2 Ptnml: 6, 3047, 16994, 9899, 54 nElo: 91.59 ±2.9 PairsRatio: 3.26 [raw statistics] 2024‑05‑13 master vs Stockfish 16 Bench: 1876282 Optimize update_accumulator_refresh_cache() [differences] 386 Elo: 28.23 ±1.4 Ptnml: 94, 4694, 15651, 9376, 185 nElo: 57.50 ±2.9 PairsRatio: 2.00 [raw statistics] Elo: 39.08 ±1.2 Ptnml: 12, 3037, 17207, 9707, 37 nElo: 89.14 ±2.9 PairsRatio: 3.20 [raw statistics] 2024‑05‑18 master vs Stockfish 16 Bench: 1198142 VVLTC search tune [differences] 405 Elo: 26.54 ±1.4 Ptnml: 78, 4876, 15650, 9185, 211 nElo: 53.85 ±2.8 PairsRatio: 1.90 [raw statistics] Elo: 38.55 ±1.2 Ptnml: 11, 3150, 17089, 9698, 52 nElo: 87.18 ±2.9 PairsRatio: 3.08 [raw statistics] 2024‑05‑28 master vs Stockfish 16 Bench: 1856147 Improve performance on NUMA systems [differences] 433 Elo: 30.13 ±1.4 Ptnml: 65, 4557, 15687, 9504, 187 nElo: 61.85 ±2.9 PairsRatio: 2.10 [raw statistics] Elo: 39.34 ±1.2 Ptnml: 6, 3094, 17063, 9803, 34 nElo: 89.36 ±2.9 PairsRatio: 3.17 [raw statistics] 2024‑06‑08 master vs Stockfish 16 Bench: 1174094 Make repeated bench runs identical [differences] 490 Elo: 35.60 ±1.4 Ptnml: 70, 4218, 15445, 10049, 218 nElo: 73.01 ±2.9 PairsRatio: 2.39 [raw statistics] Elo: 39.31 ±1.2 Ptnml: 15, 3169, 16895, 9884, 37 nElo: 88.49 ±2.9 PairsRatio: 3.12 [raw statistics] 2024‑07‑01 master vs Stockfish 16 Bench: 1227870 Probcut in check no matter if pv or capture [differences] 517 Elo: 40.07 ±1.4 Ptnml: 83, 3933, 15243, 10493, 248 nElo: 82.11 ±2.9 PairsRatio: 2.67 [raw statistics] Elo: 40.34 ±1.2 Ptnml: 11, 3043, 16987, 9918, 41 nElo: 91.47 ±2.9 PairsRatio: 3.26 [raw statistics] 2024‑07‑09 master vs Stockfish 16 Bench: 1300471 Move Loop Consistency in Probcut [differences] 548 Elo: 41.51 ±1.4 Ptnml: 68, 3769, 15319, 10649, 195 nElo: 86.22 ±3.0 PairsRatio: 2.83 [raw statistics] Elo: 43.42 ±1.2 Ptnml: 15, 2811, 16912, 10224, 38 nElo: 99.12 ±3.0 PairsRatio: 3.63 [raw statistics] 2024‑07‑23 master vs Stockfish 16 Bench: 1371485 Update default main net to nn-31337bea577c.nnue [differences] 578 Elo: 42.30 ±1.4 Ptnml: 59, 3800, 15131, 10833, 177 nElo: 87.72 ±3.0 PairsRatio: 2.85 [raw statistics] Elo: 45.06 ±1.2 Ptnml: 14, 2685, 16907, 10337, 57 nElo: 103.20 ±3.0 PairsRatio: 3.85 [raw statistics] 2024‑08‑20 master vs Stockfish 16 Bench: 1484730 Tweak late move extensions [differences] 595 Elo: 44.12 ±1.4 Ptnml: 69, 3686, 15064, 10960, 221 nElo: 91.20 ±3.0 PairsRatio: 2.98 [raw statistics] Elo: 44.32 ±1.2 Ptnml: 16, 2814, 16741, 10400, 29 nElo: 100.85 ±3.0 PairsRatio: 3.69 [raw statistics] 2024‑09‑03 master vs Stockfish 16 Bench: 1484730 Update Top CPU Contributors [differences] 601 Elo: 46.04 ±1.3 Ptnml: 50, 3562, 15030, 11150, 208 nElo: 95.92 ±3.0 PairsRatio: 3.14 [raw statistics] Elo: 42.62 ±1.2 Ptnml: 15, 2882, 16912, 10147, 44 nElo: 96.95 ±3.0 PairsRatio: 3.52 [raw statistics] 2024‑09‑06 Stockfish 17 [[https://stockfishchess.org/images/logo/icon_128x128.png|width=20px]] [[https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png|width=20px]] Bench: 1484730 [differences] 602 External Links There are several pages on the web run by chess engine fans. Some collect progress of Stockfish over previous stable versions and development builds. Some compare Stockfish progress to other chess engines. Here is a collection of some useful links in that regard. Computer Chess Rating Lists (CCRL) FastGMs Rating Lists (FGRL) Ipman Chess Mate Finding Effectiveness Next Chess Move (NCM) Stefan Pohl Computer Chess (SPCC)"
  },
  "Stockfish/wiki/Stockfish-FAQ.html": {
    "href": "Stockfish/wiki/Stockfish-FAQ.html",
    "title": "| Chess",
    "summary": "Interpretation of the Stockfish evaluation Centipawns The evaluation of a position that results from search has traditionally been measured in pawns or centipawns (1 pawn = 100 centipawns). A value of 1, implied a 1 pawn advantage. However, with engines being so strong, and the NNUE evaluation being much less tied to material value, a new scheme was needed. The new normalized evaluation is now linked to the probability of winning, with a 1.0 pawn advantage being a 0.5 (that is 50%) win probability. An evaluation of 0.0 means equal chances for a win or a loss, but also nearly 100% chance of a draw. Some GUIs will be able to show the win/draw/loss probabilities directly when the UCI_ShowWDL engine option is set to True. The full plots of win, loss, and draw probability are given below. From these probabilities, one can also obtain the expected match score. Probabilities Expected match score The probability of winning or drawing a game, of course, depends on the opponent and the time control. With bullet games, the draw rate will be lower, and against a weak opponent, even a negative evaluation could result in a win. These graphs have been generated from a model derived from Fishtest data for Stockfish playing against Stockfish (so an equally strong opponent), at 60+0.6s per game. The curves are expected to evolve, i.e. as the engines get stronger, an evaluation of 0.0 will approach the 100% draw limit. These curves are for SF15.1 (Dec 2022). Tablebase scores Since Stockfish 16 (def2966) a value of 200.00 pawns is reported when entering a tablebase won position. Values close to 200.00 refer to the distance in plies from the root to the probed position, where 1 cp is 1 ply distance. This means that a score of, for example, 199.50 means that the engine found a forced way to get from the current position to a tablebase winning position in 25 moves (50 ply). Optimal settings To get the best possible evaluation or the strongest move for a given position, the key is to let Stockfish analyze long enough, using a recent release (or development version), properly selected for the CPU architecture. The following settings are important as well: Threads Set it to the maximum minus 1 or 2 threads. Set the number of threads to the maximum available, possibly leaving 1 or 2 threads free for other tasks. SMT or Hyper-threading is beneficial, so normally the number of threads available is twice the number of cores available. Consumer hardware typically has at least 4-8 threads, Stockfish supports hundreds of threads. Note More detailed results on the efficiency of threading are available. Hash Tip The Hash can be any value, not just powers of two. The value is specified in MiB. Gameplay Some general guidelines (for games played using 1 thread) are: Ultra-bullet games (10s+0.1s) a value of 16 (default). Bullet games (60s+0.6s, aprox. 1+0 or 1+1) a value of 64. Blitz games (180s+1.8s, aprox. 3+2) a value of 192. Longer time controls or games played with more threads will require more hash. 60s+0.6s with 8 threads would require a hash of 64 * 8 = 512. Note The data suggests that keeping the average hashfull below 30% is best to maintain strength. More detailed results on the cost of too little hash are available. Analysis Depending on how long you want to leave Stockfish analyzing a position for the amount of hash needed will vary. For shallow analysis (e.g. depth 24 or 1 million nodes), a hash of 64 or 128 should be enough. For deep analysis set it to as much as you can afford given the available memory in your system, leaving some memory for the operating system and other applications. MultiPV Set it to 1. A value higher than 1 weakens the quality of the best move computed, as resources are used to compute other moves. Note More detailed results on the cost of MultiPV are available. The Elo rating of Stockfish \"What is the Elo of Stockfish?\": A seemingly simple question, with no easy answer. First, the obvious: it is higher than any human Elo, and when SF 15.1 ranked with more than 4000 Elo on some rating lists, YouTube knew. To answer the question in more detail, some background information is needed. Background information In its simplest form, the Elo rating system predicts the score of a match between two players, and conversely, a match between two players gives information about the Elo difference between them. The Elo difference depends on the conditions of the match. For human players, time control (blitz vs. classical TC) or variant (standard chess vs. Fischer random chess) are well-known factors that influence the Elo difference between two players. Finally, given an Elo difference between two players, one needs to know the Elo rating of one of them to know the Elo rating of the other. More generally, you need an anchor or reference within a group of opponents, and if that reference is different in different groups, the Elo value cannot be compared. Caveats The same observations apply to the calculation of Stockfish's Elo rating, with the caveat that top engines play at an extremely high level and, from the starting position or any balanced opening, have achieved a draw rate approaching 100% against other engines of similar strength, especially at rapid or longer time controls, and even more so on powerful hardware. This results in small Elo differences between top engines. For instance in a match between two engines, 19 wins, 2 losses and 79 draws is a convincing win for the first engine, but results in a small Elo difference between the two because of the 79 draws. Carefully constructed books of starting positions with a clear advantage for one side can significantly reduce this draw rate and increase Elo differences. The book used in the match is therefore an important factor in the computed Elo difference. Similarly, the pool of opponents and their rankings has a large impact on the Elo rating, and Elo ratings computed with different pools of opponents are difficult to compare, especially if weaker (but different) engines are part of that pool. Finally, to accurately compute Elo differences at this level, a very large number of games (typically tens of thousands of games) are needed, as small samples of games (regardless of time control) will lead to large relative errors. Having introduced all these caveats, accurately measuring Elo differences is central to the development of Stockfish, and our Fishtest framework constantly measures with great precision the Elo difference of Stockfish and its proposed improvements. These performance improvements are accurately tracked over time on the regression testing wiki page. The same page also links to various external websites that rank Stockfish against a wide range of other engines. Conclusion Rating Stockfish on a human scale (e.g. FIDE Elo) has become an almost impossible task, as the difference in strength between it and humans is now so large that this difference can hardly be measured. This would require a human to play Stockfish long enough to have at least a handful of draws and wins. Move annotations Stockfish does not provide move annotations such as blunders or brilliants, it only provides evaluations and what it considers the best move in the position. Websites and GUIs often add move annotations separately, using Stockfish's output as a basis for them. Why is Stockfish regressing? Sometimes, Elo gain may seem to be decreasing over time in regression tests, but this does not necessarily mean that Stockfish is regressing. Regression tests don't provide an exact number for Elo gain, instead, they return a range dictated by an error bound (usually displayed next to the Elo) where the true Elo likely lies on. As long as the error bounds overlap, there is a substantial likelihood that Stockfish did not regress, even if the amount of Elo gain decreased between regression tests. Stockfish crashed Stockfish may crash if fed incorrect fens, or fens with illegal positions. Full validation code is complex to write, and within the UCI protocol, there is no established mechanism to communicate such an error back to the GUI. Therefore Stockfish is written with the expectation that the input fen is correct. On the other hand, the GUI must carefully check fens. If you find a GUI through which you can crash Stockfish or any other engine, then by all means report it to that GUI's developers. Does Stockfish support chess variants? The official Stockfish engine only supports standard chess and Chess960 or Fischer Random Chess (FRC) as well as Double Fischer Random Chess (DFRC). However, various forks based on Stockfish support more variants, most notably the Fairy-Stockfish project. Can Stockfish use my GPU? No, Stockfish is a chess engine that uses the CPU only for chess evaluation. Its NNUE evaluation (see this in-depth description) is very effective on CPUs. With extremely short inference times (sub-micro-second), this network can not be efficiently evaluated on GPUs, in particular with the alpha-beta search that Stockfish employs. However, for training networks, Stockfish employs GPUs with effective code that is part of the NNUE pytorch trainer. Other chess engines require GPUs for effective evaluation, as they are based on large convolutional or transformer networks, and use a search algorithm that allows for batching evaluations. See also the Leela Chess Zero (Lc0) project. Executing Stockfish opens a CMD window Stockfish is a command line program, so this behavior is intentional and serves as the interface for interacting with the engine. User-friendly experience If you prefer a more user-friendly experience with a chessboard and additional features, you can consider using a graphical user interface (GUI) alongside Stockfish. To set up a GUI, you can visit the Download and Usage page. Available commands The CMD window allows you to input various commands and receive corresponding outputs from Stockfish. If you want to explore the available commands and their explanations, you can refer to the Commands page but this is only recommended for advanced users and developers. What is depth? First, we need to understand how minimax search works. We will go with the vanilla one because explaining what Alpha-beta is does not do much. Minimax Each player tries to maximize the score in their favor. White wants the evaluation to be as positive as it can, and Black as negative as it can - we do this all the time when we play chess. Search works in a similar way - you explore your moves, explore the opponent's replies, assign a value called evaluation to each resulting board position (which is not precise but tries to be), and find a sequence where White plays some move that has the maximum evaluation for the best opponent's reply. Then you search one ply (half-move) deeper - exploring your reply to the last opponent's replies. This process is called iterative deepening - you explore a position up to depth 1, then to depth 2, then to depth 3, and so on - you deepen your search with each iteration and this is why it is called this way. So, for now, \"depth\" is a perfect thing - it means you fully calculated the search tree up to this \"depth\" and you know everything that can happen within it. For a mate in 5, you will need depth 9 to see it (because depth is written in half-moves). But chess has a lot of possible moves, 20 from the starting position and usually many more from any middlegame position. Even if you can evaluate millions of positions per second as engines like Stockfish do, you will still hit a wall in what depths you can realistically reach, and it would not be that high - depth 8, maybe 10. Pruning How to combat this? With a thing called pruning. Pruning splits into quite a lot of different heuristics, but they mostly serve one purpose - remove branches in search that do not look too desirable, to re-explore them later when iterative deepening depth goes higher. So this is where \"depth\" starts to mean less - because you do not search the entire game tree and modern engines prune large percentages of branches. Reductions Another way we combat this is with reductions, techniques to reduce the depth of a certain position. While pruning results in the complete elimination of a branch, a reduction merely reduces its size. We often use these on positions that are not too desirable, but we give them the benefit of the doubt and search them at a shallow depth to confirm whether they were desirable or not. An advantage over pruning is that it allows us to double-check positions to avoid missing winning tactics while reducing the game tree. Extensions But then there is also a thing called \"extensions\" which is more or less the opposite of reductions. With extensions, you start by searching \"important\" branches deeper (for example, checks) than what is needed to complete the iterative deepening iteration. Conclusion With all of this, instead of a search tree that is strictly cut off at this \"depth\", you have most of the branches ending really early and a lot of branches searched deeper than the given \"depth\". Stockfish is the most aggressive engine in both pruning and extensions, so its search tree looks nothing like what you usually see on Wikipedia. Coming back to how much Stockfish prunes, there is some data here. The branching factor indicates how many moves you calculate on average per depth increase, calculated as \\(nodes^{\\frac{1}{depth}}\\). Stockfish 15.1 with higher depths goes all the way down to 1.5, so at depth 50 considers approximately 1.5 moves per ply from the full 20-30-40 moves we usually have. And this is why it misses some short mates up to high depths while vanilla minimax would have found them at lower ones. It just throws away 90%+ of the moves."
  },
  "Stockfish/wiki/Terminology.html": {
    "href": "Stockfish/wiki/Terminology.html",
    "title": "| Chess",
    "summary": "General terms Threads Also known as \"cores\", \"CPUs\" or \"vCPUs\". The amount of CPU threads that the engine will use, usually the higher the better. Note that a modern CPU will have multiple cores and typically can run two threads each. Hash Also known as \"memory\". The amount of Hash is the amount of RAM that the engine will use to store positions in the game tree. This information can be reused during the analysis, for example after a transposition, which means usually the higher the Hash the better. See also Transposition Table. Depth Counter of iterative deepening loop at the root of the game tree, thus also known as rootDepth. Regardless of the name, there is no simple connection to the actual depth searched in the game tree. The deepest lines searched are usually quite a bit deeper than the rootDepth. See also a discussion on rootDepth vs depth. Selective Depth Also known as \"seldepth\". Is the depth of the deepest principal variation line in the search. Multiple PVs Also known as \"number of lines\" or \"multiple lines\". The top N moves and their principal variations can be computed. This gives additional insight in the options of the position. However, in Stockfish, this weakens the quality of the best move computed, as resources are used to compute other moves. Transposition Table Also known as \"TT\". A database / hash table that stores results of previously performed searches. See also Hash. Lazy Symmetric Multiprocessing Also known as \"Lazy SMP\". The idea of executing the search function on N many threads and share the Transposition table. This allows for faster filling of the transposition table, resulting in a faster and wider search. This approach to parallelism is known to scale well, especially with longer searches. Iterative deepening The idea of performing consecutive searches at higher depths each time. Null Move Also known as \"passing move\", it is when you don't make a move, \"passing\" the ability to move to the opponent. Although not a legal move, it is used in Null Move Pruning. Time Control Also known as \"TC\". How the time limits are set for playing a game. For chess engine testing, Stockfish uses 10+0.1s (10 seconds for the game, 0.1 seconds for every move), and 60+0.6s. These TCs are known as STC (short TC) and LTC (long TC). Principal Variation Search Principal Variation Also known as \"PV\". The sequence of moves that the engine considers best and therefore expects to be played. Pruning The idea of ignoring certain parts of the search tree in order to reduce the amount of time it takes to execute a search. Null Move Pruning Based on the assumption that, if we can reach beta by not making a move at lower depths, we will most likely be able to reach it anyway. Futility Pruning The idea that quiet moves don't tend to improve positions significantly, therefore we can safely prune quiet moves in positions where the current position is evaluated to be below alpha by a margin. Late Move Pruning Also known as \"LMP\". The idea that all quiet moves can be pruned after searching the first few given by the move ordering algorithm. Late Move Reductions Also known as \"LMR\". A way of proving if a move is lower than alpha quickly. This is done by searching moves that are expected to underperform at a lower depth. Extensions The idea of extending certain moves, usually by one ply, to try to find better moves faster. Check Extensions They can have two distinct forms: one of them extends when giving check, the other when evading it. The reason behind check extension is that we are in a forcing sequence, so that it is desirable to know its outcome with more certainty. Move Ordering In order to maximize the efficiency of alpha-beta search, we optimally want to try the best moves first. Quiescence Search Also known as \"qSearch\". Performed at the end of the main search, the purpose of this search is to only evaluate \"quiet\" positions, or positions where there are no winning tactical moves to be made. Evaluation Handcrafted Evaluation Also known as \"classic\", \"classical\" or \"HCE\". This is the older evaluation method that is generally not used today in most engines and was removed from Stockfish in July 2023. It uses various heuristics and rules (e.g. material, pawn structure, king safety, mobility, etc.) to assign the evaluation. Although it is faster than a NNUE evaluation, it is much less accurate. Efficiently Updatable Neural Network Also known as \"NNUE\". Introduced in Stockfish in August 2020 and first shipped with Stockfish 12. This implementation evaluates positions using a neural network, which is trained on a large set of training data. NNUE is typically much more accurate than classical evaluation, gaining hundreds of Elo."
  },
  "Stockfish/wiki/UCI-&-Commands.html": {
    "href": "Stockfish/wiki/UCI-&-Commands.html",
    "title": "| Chess",
    "summary": "The Universal Chess Interface (UCI) is a standard text-based protocol used to communicate with a chess engine and is the recommended way to do so for typical graphical user interfaces (GUI) or chess tools. Stockfish implements the majority of its options. Developers can see the default values for the UCI options available in Stockfish by typing ./stockfish uci in a terminal, but most users should typically use a chess GUI to interact with Stockfish. Standard commands quit Quit the program as soon as possible. uci Tell the engine to use the UCI (universal chess interface). This will be sent once, by a GUI, as a first command after the program boots to tell the engine to switch to UCI mode. After receiving the uci command the engine will identify itself with the id command and send the option commands to tell the GUI which engine settings the engine supports. After that, the engine will send uciok to acknowledge the UCI mode. If no uciok is sent within a certain time period, the engine task will be killed by the GUI. Example Note that a different Stockfish version than the one used below may have a different output, with different values and other available options. Please run this command yourself to know what values are available in your specific version. > uci id name Stockfish 16.1 id author the Stockfish developers (see AUTHORS file) option name Debug Log File type string default option name Threads type spin default 1 min 1 max 1024 option name Hash type spin default 16 min 1 max 33554432 option name Clear Hash type button option name Ponder type check default false option name MultiPV type spin default 1 min 1 max 256 option name Skill Level type spin default 20 min 0 max 20 option name Move Overhead type spin default 10 min 0 max 5000 option name nodestime type spin default 0 min 0 max 10000 option name UCI_Chess960 type check default false option name UCI_LimitStrength type check default false option name UCI_Elo type spin default 1320 min 1320 max 3190 option name UCI_ShowWDL type check default false option name SyzygyPath type string default <empty> option name SyzygyProbeDepth type spin default 1 min 1 max 100 option name Syzygy50MoveRule type check default true option name SyzygyProbeLimit type spin default 7 min 0 max 7 option name EvalFile type string default nn-b1a57edbea57.nnue option name EvalFileSmall type string default nn-baff1ede1f90.nnue uciok setoption Usage: setoption name <id> [value <x>] This is sent to the engine when the user wants to change the internal parameters of the engine. For the button type no value is needed. One string will be sent for each parameter and this will only be sent when the engine is waiting. Examples: > setoption name Threads value 6 > setoption name SyzygyPath value C:\\Chess\\tb\\tb345;C:\\Chess\\tb\\wdl6;C:\\Chess\\tb\\wdl7 > setoption name UCI_ShowWDL value true > setoption name Clear Hash List of options: Threads type spin default 1 min 1 max 1024 The number of CPU threads used for searching a position. For best performance, set this equal to the number of CPU cores available. Hash type spin default 16 min 1 max 33554432 The size of the hash table in MB. It is recommended to set Hash after setting Threads. MultiPV type spin default 1 min 1 max 500 Output the N best lines (principal variations, PVs) when searching. Leave at 1 for the best performance. NumaPolicy type string default auto Binds threads to a specific NUMA node to enhance performance on multi-CPU or multi-NUMA domain systems. Options: none - assumes a single NUMA node, no thread binding system - uses NUMA information available from the system and binds the threads accordingly auto - default; automatically selects system or none based on the system hardware - uses NUMA information from the underlying hardware and binds the threads accordingly, overrides any previous affinities. Should be used if Stockfish doesn't utilize all threads, e.g. Windows 10 or certain GUI's like ChessBase. [[custom]] - precisely specify the available CPUs per numa domain. ':' separates numa nodes; ',' separates cpu indices; supports \"first-last\" range syntax for cpu indices, for example 0-15,32-47:16-31,48-63 Clear Hash type button Clear the hash table. Ponder type check default false Let Stockfish ponder its next move while the opponent is thinking. EvalFile type string default nn-[SHA256 first 12 digits].nnue The name of the file of the NNUE evaluation parameters. Depending on the GUI the filename might have to include the full path to the folder/directory that contains the file. Other locations, such as the directory that contains the binary and the working directory, are also searched. EvalFileSmall type string default nn-[SHA256 first 12 digits].nnue Same as EvalFile. UCI_Chess960 type check default false An option handled by your GUI. If true, Stockfish will play Chess960. UCI_ShowWDL type check default false If enabled, show approximate WDL statistics as part of the engine output. These WDL numbers model expected game outcomes for a given evaluation and game ply for engine self-play at fishtest LTC conditions (60+0.6s per game). UCI_LimitStrength type check default false Enable weaker play aiming for an Elo rating as set by UCI_Elo. This option overrides Skill Level. UCI_Elo type spin default 1320 min 1320 max 3190 If UCI_LimitStrength is enabled, it aims for an engine strength of the given Elo. This Elo rating has been calibrated at a time control of 120s+1s and anchored to CCRL 40/4. Skill Level type spin default 20 min 0 max 20 Lower the Skill Level in order to make Stockfish play weaker (see also UCI_LimitStrength). Internally, MultiPV is enabled, and with a certain probability depending on the Skill Level, a weaker move will be played. SyzygyPath type string default <empty> Path to the folders/directories storing the Syzygy tablebase files. Multiple directories are to be separated by ; on Windows and by : on Unix-based operating systems. Do not use spaces around the ; or :. Example: C:\\tablebases\\wdl345;C:\\tablebases\\wdl6;D:\\tablebases\\dtz345;D:\\tablebases\\dtz6 It is recommended to store .rtbw files on an SSD. There is no loss in storing the .rtbz files on a regular HDD. It is recommended to verify all md5 checksums of the downloaded tablebase files (md5sum -c checksum.md5) as corruption will lead to engine crashes. SyzygyProbeDepth type spin default 1 min 1 max 100 Minimum remaining search depth for which a position is probed. Set this option to a higher value to probe less aggressively if you experience too much slowdown (in terms of nps) due to tablebase probing. Syzygy50MoveRule type check default true Disable to let fifty-move rule draws detected by Syzygy tablebase probes count as wins or losses. This is useful for ICCF correspondence games. SyzygyProbeLimit type spin default 7 min 0 max 7 Limit Syzygy tablebase probing to positions with at most this many pieces left (including kings and pawns). Move Overhead type spin default 10 min 0 max 5000 Assume a time delay of x ms due to network and GUI overheads. Specifying a value larger than the default is needed to avoid time losses or near instantaneous moves, in particular for time controls without increment (e.g. sudden death). The default is suitable for engine-engine matches played locally on dedicated hardware, while it needs to be increased on a loaded system, when playing over a network, or when using certain GUIs such as Arena or ChessGUI. nodestime type spin default 0 min 0 max 10000 Tells the engine to use nodes searched instead of wall time to account for elapsed time. Useful for engine testing. When this option is set, the engine is only limited by the total amount of nodes searched per game; this limit is calculated once per game. The initial time control values in milliseconds (time time and increment per move inc) are used as input values to calculate the total number of nodes per game (totalnodes). The increment per move inc is used as if it was just one move per game. The formula is totalnodes = (time + inc * 1) * nodestime. Suppose you specified nodestime = 600, and the time control per game is 300 seconds plus 3 seconds increment per move (\"300+3s\"), or 300000 milliseconds plus 3000 milliseconds increment per move. In that case, the maximum total number of nodes searched per game by the engine is totalnodes = (300000 + 3000 * 1) * 600 = 181800000 (one hundred eighty-one million, eight hundred thousand) nodes, regardless of how much wall time it will actually take. Debug Log File type string default Write all communication to and from the engine into a text file. position Usage: position [fen <fenstring> | startpos ] moves <move1> .... <movei> Set up the position described in fenstring. If the game was played from the start position the string startpos must be sent. Note If this position is from a different game than the last position sent to the engine, the GUI should have sent a ucinewgame in between. Examples: > position startpos > position startpos moves e2e4 e7e5 g1f3 b8c6 f1b5 > position fen 8/1B6/8/5p2/8/8/5Qrq/1K1R2bk w - - 0 1 > position fen 8/3P3k/n2K3p/2p3n1/1b4N1/2p1p1P1/8/3B4 w - - 0 1 moves g4f6 h7g7 f6h5 g7g6 d1c2 ucinewgame This is sent to the engine when the next search (started with position and go) will be from a different game. This can be a new game the engine should play or a new game it should analyze but also the next position from a test suite with positions only. If the GUI hasn't sent a ucinewgame before the first position command, the engine won't expect any further ucinewgame commands as the GUI is probably not supporting the ucinewgame command. So the engine will not rely on this command even though all new GUIs should support it. As the engine's reaction to ucinewgame can take some time the GUI should always send isready after ucinewgame to wait for the engine to finish its operation. The engine will respond with readyok. Note This clears the hash and any information which was collected during the previous search. Example > ucinewgame > isready readyok > position startpos > go depth 1 info string NNUE evaluation using nn-ad9b42354671.nnue enabled info depth 1 seldepth 1 multipv 1 score cp 18 nodes 20 nps 10000 hashfull 0 tbhits 0 time 2 pv e2e4 bestmove e2e4 > ucinewgame > isready readyok > position fen r2q1rk1/p2bbppp/Q7/2p1P2P/8/2p1B3/PPP2P1P/2KR3R w - - 0 17 isready This is used to synchronize the engine with the GUI. When the GUI has sent a command or multiple commands that can take some time to complete, this command can be used to wait for the engine to be ready again or to ping the engine to find out if it is still alive. e.g. this should be sent after setting the path to the tablebases as this can take some time. This command is also required once, before the engine is asked to do any searching, to wait for the engine to finish initializing. This command will always be answered with readyok and can be sent also when the engine is calculating in which case the engine will also immediately answer with readyok without stopping the search. Example: > isready readyok go Start calculating on the current position set up with the position command. There are a number of parameters that can follow this command and all will be sent in the same string. Note If no parameter is sent, then go depth 245 will be executed. Note Mixing and matching different ways of limiting the search time (depth, nodes, movetime, wtime + winc + btime + binc) will result in the search ending when it hits any one of those limits. For example, you can limit the search to a maximum depth and time with go depth x movetime y. Example: go infinite > position startpos > go infinite info string NNUE evaluation using nn-ad9b42354671.nnue enabled info depth 1 seldepth 1 multipv 1 score cp 18 nodes 20 nps 4000 hashfull 0 tbhits 0 time 5 pv e2e4 info depth 2 seldepth 2 multipv 1 score cp 46 nodes 66 nps 11000 hashfull 0 tbhits 0 time 6 pv d2d4 info depth 3 seldepth 2 multipv 1 score cp 51 nodes 120 nps 20000 hashfull 0 tbhits 0 time 6 pv e2e4 info depth 4 seldepth 2 multipv 1 score cp 58 nodes 144 nps 18000 hashfull 0 tbhits 0 time 8 pv d2d4 info depth 5 seldepth 2 multipv 1 score cp 58 nodes 174 nps 15818 hashfull 0 tbhits 0 time 11 pv d2d4 a7a6 info depth 6 seldepth 7 multipv 1 score cp 34 nodes 1303 nps 81437 hashfull 0 tbhits 0 time 16 pv e2e4 c7c5 g1f3 b8c6 c2c3 info depth 7 seldepth 6 multipv 1 score cp 29 nodes 3126 nps 120230 hashfull 1 tbhits 0 time 26 pv d2d4 g8f6 e2e3 d7d5 c2c4 d5c4 info depth 8 seldepth 7 multipv 1 score cp 26 nodes 5791 nps 152394 hashfull 4 tbhits 0 time 38 pv g1f3 g8f6 d2d4 d7d5 e2e3 info depth 9 seldepth 9 multipv 1 score cp 31 nodes 8541 nps 174306 hashfull 5 tbhits 0 time 49 pv g1f3 c7c5 e2e4 e7e6 d2d4 c5d4 f3d4 info depth 10 seldepth 13 multipv 1 score cp 25 nodes 20978 nps 209780 hashfull 10 tbhits 0 time 100 pv e2e4 c7c5 g1f3 b8c6 f1c4 e7e6 e1g1 g8f6 info depth 11 seldepth 13 multipv 1 score cp 32 nodes 29040 nps 220000 hashfull 14 tbhits 0 time 132 pv e2e4 c7c5 c2c3 g8f6 e4e5 f6d5 d2d4 info depth 12 seldepth 14 multipv 1 score cp 38 nodes 41207 nps 242394 hashfull 18 tbhits 0 time 170 pv e2e4 e7e6 d2d4 d7d5 b1c3 d5e4 c3e4 > stop info depth 13 seldepth 14 multipv 1 score cp 38 nodes 45531 nps 247451 hashfull 21 tbhits 0 time 184 pv e2e4 e7e6 d2d4 d7d5 b1c3 d5e4 c3e4 bestmove e2e4 ponder e7e6 Example: go depth > position startpos > go depth 25 info string NNUE evaluation using nn-ad9b42354671.nnue enabled info depth 1 seldepth 1 multipv 1 score cp 18 nodes 20 nps 10000 hashfull 0 tbhits 0 time 2 pv e2e4 info depth 2 seldepth 2 multipv 1 score cp 46 nodes 66 nps 33000 hashfull 0 tbhits 0 time 2 pv d2d4 info depth 3 seldepth 2 multipv 1 score cp 51 nodes 120 nps 60000 hashfull 0 tbhits 0 time 2 pv e2e4 info depth 4 seldepth 2 multipv 1 score cp 58 nodes 144 nps 72000 hashfull 0 tbhits 0 time 2 pv d2d4 info depth 5 seldepth 2 multipv 1 score cp 58 nodes 174 nps 58000 hashfull 0 tbhits 0 time 3 pv d2d4 a7a6 info depth 6 seldepth 7 multipv 1 score cp 34 nodes 1303 nps 325750 hashfull 0 tbhits 0 time 4 pv e2e4 c7c5 g1f3 b8c6 c2c3 info depth 7 seldepth 6 multipv 1 score cp 29 nodes 3126 nps 521000 hashfull 1 tbhits 0 time 6 pv d2d4 g8f6 e2e3 d7d5 c2c4 d5c4 info depth 8 seldepth 7 multipv 1 score cp 26 nodes 5791 nps 643444 hashfull 4 tbhits 0 time 9 pv g1f3 g8f6 d2d4 d7d5 e2e3 info depth 9 seldepth 9 multipv 1 score cp 31 nodes 8541 nps 711750 hashfull 5 tbhits 0 time 12 pv g1f3 c7c5 e2e4 e7e6 d2d4 c5d4 f3d4 info depth 10 seldepth 13 multipv 1 score cp 25 nodes 20978 nps 839120 hashfull 10 tbhits 0 time 25 pv e2e4 c7c5 g1f3 b8c6 f1c4 e7e6 e1g1 g8f6 info depth 11 seldepth 13 multipv 1 score cp 32 nodes 29040 nps 854117 hashfull 14 tbhits 0 time 34 pv e2e4 c7c5 c2c3 g8f6 e4e5 f6d5 d2d4 info depth 12 seldepth 14 multipv 1 score cp 38 nodes 41207 nps 895804 hashfull 18 tbhits 0 time 46 pv e2e4 e7e6 d2d4 d7d5 b1c3 d5e4 c3e4 info depth 13 seldepth 15 multipv 1 score cp 31 nodes 60308 nps 927815 hashfull 25 tbhits 0 time 65 pv e2e4 c7c5 g1f3 d7d6 d2d4 c5d4 f3d4 b8c6 c1e3 g8f6 b1c3 g7g6 info depth 14 seldepth 18 multipv 1 score cp 35 nodes 97789 nps 922537 hashfull 44 tbhits 0 time 106 pv d2d4 g8f6 c2c4 e7e6 g1f3 d7d5 g2g3 f8e7 b1c3 c7c5 info depth 15 seldepth 21 multipv 1 score cp 31 nodes 142447 nps 901563 hashfull 64 tbhits 0 time 158 pv d2d4 g8f6 c2c4 e7e6 g1f3 d7d5 c1g5 f8e7 b1c3 e8g8 e2e3 h7h6 g5h4 f6e4 h4e7 d8e7 info depth 16 seldepth 21 multipv 1 score cp 40 nodes 199887 nps 896354 hashfull 88 tbhits 0 time 223 pv d2d4 d7d5 c2c4 d5c4 g1f3 a7a6 b1c3 c7c6 a2a4 info depth 17 seldepth 19 multipv 1 score cp 32 nodes 268004 nps 896334 hashfull 120 tbhits 0 time 299 pv d2d4 g8f6 c2c4 e7e6 g2g3 d7d5 g1f3 f8e7 f1g2 e8g8 e1g1 c7c5 c4d5 e6d5 b1c3 h7h6 d4c5 e7c5 info depth 18 seldepth 21 multipv 1 score cp 29 nodes 298071 nps 903245 hashfull 131 tbhits 0 time 330 pv d2d4 g8f6 c2c4 e7e6 g2g3 d7d5 g1f3 f8e7 f1g2 e8g8 e1g1 c7c5 c4d5 e6d5 c1g5 b8c6 d4c5 e7c5 g5f6 d8f6 info depth 19 seldepth 25 multipv 1 score cp 28 nodes 332202 nps 910142 hashfull 142 tbhits 0 time 365 pv d2d4 g8f6 c2c4 e7e6 g1f3 d7d5 c1g5 f8e7 b1c3 e8g8 e2e3 h7h6 g5f4 c7c5 d4c5 e7c5 c4d5 f6d5 c3d5 e6d5 info depth 20 seldepth 23 multipv 1 score cp 37 nodes 557706 nps 900978 hashfull 243 tbhits 0 time 619 pv d2d4 g8f6 c2c4 e7e6 g2g3 d7d5 f1g2 f8e7 g1f3 e8g8 e1g1 d5c4 d1a4 a7a6 a4c4 b7b5 c4c2 c8b7 c1f4 f6d5 info depth 21 seldepth 23 multipv 1 score cp 31 nodes 753633 nps 895051 hashfull 326 tbhits 0 time 842 pv d2d4 g8f6 c2c4 g7g6 b1c3 d7d5 g1f3 f8g7 c4d5 f6d5 e2e4 d5c3 b2c3 c7c5 c1e3 c5d4 c3d4 e8g8 f1c4 c8g4 e1g1 info depth 22 seldepth 28 multipv 1 score cp 29 nodes 1197489 nps 896995 hashfull 487 tbhits 0 time 1335 pv d2d4 d7d5 c2c4 e7e6 b1c3 f8b4 e2e3 g8f6 d1a4 b8c6 c1d2 c8d7 a4c2 e8g8 g1f3 d5c4 f1c4 info depth 23 seldepth 27 multipv 1 score cp 30 nodes 1586189 nps 855088 hashfull 610 tbhits 0 time 1855 pv d2d4 d7d5 c2c4 e7e6 g1f3 g8f6 g2g3 f8e7 f1g2 e8g8 e1g1 d5c4 d1a4 a7a6 a4c4 b7b5 c4c2 c8b7 c1f4 c7c5 d4c5 b8d7 b2b4 a6a5 info depth 24 seldepth 29 multipv 1 score cp 28 nodes 2305729 nps 859384 hashfull 776 tbhits 0 time 2683 pv d2d4 d7d5 c2c4 e7e6 g1f3 g8f6 g2g3 f8b4 c1d2 b4e7 f1g2 e8g8 e1g1 b8d7 d1c2 c7c6 a2a4 a7a5 b1c3 d5c4 e2e4 h7h6 d2f4 info depth 24 currmove e2e4 currmovenumber 2 info depth 24 currmove g1f3 currmovenumber 3 info depth 24 currmove a2a4 currmovenumber 4 info depth 24 currmove b1c3 currmovenumber 5 info depth 24 currmove h2h3 currmovenumber 6 info depth 24 currmove e2e3 currmovenumber 7 info depth 24 currmove c2c4 currmovenumber 8 info depth 24 currmove d2d3 currmovenumber 9 info depth 24 currmove a2a3 currmovenumber 10 info depth 24 currmove b2b3 currmovenumber 11 info depth 24 currmove c2c3 currmovenumber 12 info depth 24 currmove f2f3 currmovenumber 13 info depth 24 currmove g2g3 currmovenumber 14 info depth 24 currmove b2b4 currmovenumber 15 info depth 24 currmove f2f4 currmovenumber 16 info depth 24 currmove g2g4 currmovenumber 17 info depth 24 currmove h2h4 currmovenumber 18 info depth 24 currmove b1a3 currmovenumber 19 info depth 24 currmove g1h3 currmovenumber 20 info depth 25 seldepth 28 multipv 1 score cp 22 upperbound nodes 3071086 nps 856887 hashfull 880 tbhits 0 time 3584 pv d2d4 g8f6 info depth 25 currmove d2d4 currmovenumber 1 info depth 25 seldepth 28 multipv 1 score cp 27 lowerbound nodes 3211064 nps 855143 hashfull 895 tbhits 0 time 3755 pv d2d4 info depth 24 currmove d2d4 currmovenumber 1 info depth 24 currmove e2e4 currmovenumber 2 info depth 24 currmove c2c3 currmovenumber 3 info depth 24 currmove c2c4 currmovenumber 4 info depth 24 currmove d2d3 currmovenumber 5 info depth 24 currmove g1f3 currmovenumber 6 info depth 24 currmove b1c3 currmovenumber 7 info depth 24 currmove e2e3 currmovenumber 8 info depth 24 currmove b2b4 currmovenumber 9 info depth 24 currmove f2f3 currmovenumber 10 info depth 24 currmove a2a3 currmovenumber 11 info depth 24 currmove b2b3 currmovenumber 12 info depth 24 currmove g2g3 currmovenumber 13 info depth 24 currmove h2h3 currmovenumber 14 info depth 24 currmove a2a4 currmovenumber 15 info depth 24 currmove f2f4 currmovenumber 16 info depth 24 currmove g2g4 currmovenumber 17 info depth 24 currmove h2h4 currmovenumber 18 info depth 24 currmove b1a3 currmovenumber 19 info depth 24 currmove g1h3 currmovenumber 20 info depth 25 seldepth 28 multipv 1 score cp 26 nodes 3251912 nps 848620 hashfull 899 tbhits 0 time 3832 pv d2d4 g8f6 c2c4 e7e6 g2g3 f8b4 c1d2 b4e7 f1g2 d7d5 g1f3 e8g8 e1g1 c7c6 d1b3 b8d7 d2f4 h7h6 b1c3 d7b6 c4c5 b6c4 b3c2 b7b6 bestmove d2d4 ponder g8f6 Example: go nodes ``` > position startpos > go nodes 100000 info string NNUE evaluation using nn-ad9b42354671.nnue enabled info depth 1 seldepth 1 multipv 1 score cp 18 nodes 20 nps 10000 hashfull 0 tbhits 0 time 2 pv e2e4 info depth 2 seldepth 2 multipv 1 score cp 46 nodes 66 nps 33000 hashfull 0 tbhits 0 time 2 pv d2d4 info depth 3 seldepth 2 multipv 1 score cp 51 nodes 120 nps 60000 hashfull 0 tbhits 0 time 2 pv e2e4 info depth 4 seldepth 2 multipv 1 score cp 58 nodes 144 nps 72000 hashfull 0 tbhits 0 time 2 pv d2d4 info depth 5 seldepth 2 multipv 1 score cp 58 nodes 174 nps 87000 hashfull 0 tbhits 0 time 2 pv d2d4 a7a6 info depth 6 seldepth 7 multipv 1 score cp 34 nodes 1303 nps 260600 hashfull 0 tbhits 0 time 5 pv e2e4 c7c5 g1f3 b8c6 c2c3 info depth 7 seldepth 6 multipv 1 score cp 29 nodes 3126 nps 284181 hashfull 1 tbhits 0 time 11 pv d2d4 g8f6 e2e3 d7d5 c2c4 d5c4 info depth 8 seldepth 7 multipv 1 score cp 26 nodes 5791 nps 340647 hashfull 4 tbhits 0 time 17 pv g1f3 g8f6 d2d4 d7d5 e2e3 info depth 9 seldepth 9 multipv 1 score cp 31 nodes 8541 nps 371347 hashfull 5 tbhits 0 time 23 pv g1f3 c7c5 e2e4 e7e6 d2d4 c5d4 f3d4 info depth 10 seldepth 13 multipv 1 score cp 25 nodes 20978 nps 349633 hashfull 10 tbhits 0 time 60 pv e2e4 c7c5 g1f3 b8c6 f1c4 e7e6 e1g1 g8f6 info depth 11 seldepth 13 multipv 1 score cp 32 nodes 29040 nps 319120 hashfull 14 tbhits 0 time 91 pv e2e4 c7c5 c2c3 g8f6 e4e5 f6d5 d2d4 info depth 12 seldepth 14 multipv 1 score cp 38 nodes 41207 nps 321929 hashfull 18 tbhits 0 time 128 pv e2e4 e7e6 d2d4 d7d5 b1c3 d5e4 c3e4 info depth 13 seldepth 15 multipv 1 score cp 31 nodes 60308 nps 307693 hashfull 25 tbhits 0 time 196 pv e2e4 c7c5 g1f3 d7d6 d2d4 c5d4 f3d4 b8c6 c1e3 g8f6 b1c3 g7g6 info depth 14 seldepth 18 multipv 1 score cp 35 nodes 97789 nps 322735 hashfull 44 tbhits 0 time 303 pv d2d4 g8f6 c2c4 e7e6 g1f3 d7d5 g2g3 f8e7 b1c3 c7c5 info depth 15 seldepth 18 multipv 1 score cp 35 nodes 100009 nps 320541 hashfull 46 tbhits 0 time 312 pv d2d4 g8f6 c2c4 e7e6 g1f3 d7d5 g2g3 f8e7 b1c3 c7c5 bestmove d2d4 ponder g8f6 ``` Example: go mate > position startpos moves g2g4 e7e5 f2f3 > go mate 1 info depth 1 seldepth 1 multipv 1 score mate 1 nodes 31 nps 10333 hashfull 0 tbhits 0 time 3 pv d8h4 bestmove d8h4 > position fen rn1q1r2/p4pk1/1p3R1p/2ppP2Q/3P4/2P4P/P1P3P1/1R4K1 w - - 0 1 moves h5h6 > go mate 2 info depth 1 seldepth 3 multipv 1 score cp -536 nodes 2 nps 400 hashfull 0 tbhits 0 time 5 pv g7g8 info depth 2 seldepth 3 multipv 1 score cp -536 nodes 4 nps 800 hashfull 0 tbhits 0 time 5 pv g7g8 info depth 3 seldepth 3 multipv 1 score cp -536 nodes 6 nps 1200 hashfull 0 tbhits 0 time 5 pv g7g8 info depth 4 seldepth 3 multipv 1 score cp -536 nodes 8 nps 1600 hashfull 0 tbhits 0 time 5 pv g7g8 info depth 5 seldepth 5 multipv 1 score cp -551 nodes 14 nps 2333 hashfull 0 tbhits 0 time 6 pv g7g8 h6g5 g8h7 info depth 6 seldepth 4 multipv 1 score cp -551 nodes 23 nps 3833 hashfull 0 tbhits 0 time 6 pv g7g8 h6g5 g8h7 info depth 7 seldepth 5 multipv 1 score mate -2 nodes 36 nps 6000 hashfull 0 tbhits 0 time 6 pv g7g8 h6g5 g8h7 f6h6 bestmove g7g8 ponder h6g5 Example: MultiPV > setoption name MultiPV value 2 > position startpos > go depth 5 info string NNUE evaluation using nn-ad9b42354671.nnue enabled info depth 1 seldepth 1 multipv 1 score cp 18 nodes 39 nps 19500 hashfull 0 tbhits 0 time 2 pv e2e4 info depth 1 seldepth 1 multipv 2 score cp 12 nodes 39 nps 19500 hashfull 0 tbhits 0 time 2 pv g1f3 info depth 2 seldepth 2 multipv 1 score cp 43 nodes 113 nps 56500 hashfull 0 tbhits 0 time 2 pv g1f3 info depth 2 seldepth 2 multipv 2 score cp 18 nodes 113 nps 56500 hashfull 0 tbhits 0 time 2 pv e2e4 info depth 3 seldepth 3 multipv 1 score cp 75 nodes 169 nps 56333 hashfull 0 tbhits 0 time 3 pv d2d4 c7c6 b1d2 info depth 3 seldepth 2 multipv 2 score cp 43 nodes 169 nps 56333 hashfull 0 tbhits 0 time 3 pv g1f3 info depth 4 seldepth 4 multipv 1 score cp 75 nodes 326 nps 108666 hashfull 0 tbhits 0 time 3 pv d2d4 c7c6 b1d2 info depth 4 seldepth 3 multipv 2 score cp 47 nodes 326 nps 108666 hashfull 0 tbhits 0 time 3 pv b1c3 e7e5 e2e4 info depth 5 seldepth 4 multipv 1 score cp 30 nodes 933 nps 233250 hashfull 0 tbhits 0 time 4 pv e2e4 g8f6 info depth 5 seldepth 5 multipv 2 score cp 12 nodes 933 nps 233250 hashfull 0 tbhits 0 time 4 pv b1c3 e7e5 e2e4 c7c6 bestmove e2e4 ponder g8f6 Example: UCI_ShowWDL > setoption name UCI_ShowWDL value true > position startpos > go depth 5 info string NNUE evaluation using nn-ad9b42354671.nnue enabled info depth 1 seldepth 1 multipv 1 score cp 18 wdl 22 974 4 nodes 20 nps 10000 hashfull 0 tbhits 0 time 2 pv e2e4 info depth 2 seldepth 2 multipv 1 score cp 46 wdl 82 917 1 nodes 66 nps 33000 hashfull 0 tbhits 0 time 2 pv d2d4 info depth 3 seldepth 2 multipv 1 score cp 51 wdl 105 894 1 nodes 120 nps 60000 hashfull 0 tbhits 0 time 2 pv e2e4 info depth 4 seldepth 2 multipv 1 score cp 58 wdl 140 859 1 nodes 144 nps 48000 hashfull 0 tbhits 0 time 3 pv d2d4 info depth 5 seldepth 2 multipv 1 score cp 58 wdl 140 859 1 nodes 174 nps 58000 hashfull 0 tbhits 0 time 3 pv d2d4 a7a6 bestmove d2d4 ponder a7a6 Parameters: searchmoves <move1> .... <movei> Restrict search to these moves only. Example: After position startpos and go infinite searchmoves e2e4 d2d4 the engine will only search the two moves e2e4 and d2d4 in the initial position. ponder Start searching in pondering mode. It won't exit the search in ponder mode, even if it's mate! This means that the last move sent in in the position string is the ponder move. The engine can do what it wants to do, but after a ponderhit command it will execute the suggested move to ponder on. This means that the ponder move sent by the GUI can be interpreted as a recommendation about which move to ponder. However, if the engine decides to ponder on a different move, it won't display any mainlines as they are likely to be misinterpreted by the GUI because the GUI expects the engine to ponder on the suggested move. wtime <x> Tell the engine that White has x ms left on the clock. btime <x> Tell the engine that Black has x ms left on the clock. winc <x> Tell the engine that White's increment per move in ms if x > 0. binc <x> Tell the engine that Black's increment per move in ms if x > 0. movestogo <x> Tell the engine that there are x moves to the next time control Note: this will only be sent if x > 0, if you don't get this and get the wtime and btime it's sudden death. depth <x> Stop the search when depth x has been reached. nodes <x> Stop the search when approximately x number of nodes have been reached. mate <x> Stop the search when/if a mate in x or less moves is found. It will stop if the side to move is mating and since Stockfish 17 when getting mated too. movetime <x> Stop the search when approximately x ms have passed. infinite Search until the stop command is given. Stockfish won't exit the search without being told so in this mode! perft <x> A debugging function to walk the move generation tree of strictly legal moves to count all the leaf nodes of a certain depth. stop Stop calculating as soon as possible Example > position startpos > go infinite info string NNUE evaluation using nn-ad9b42354671.nnue enabled info depth 1 seldepth 1 multipv 1 score cp 18 nodes 20 nps 20000 hashfull 0 tbhits 0 time 1 pv e2e4 info depth 2 seldepth 2 multipv 1 score cp 46 nodes 66 nps 33000 hashfull 0 tbhits 0 time 2 pv d2d4 info depth 3 seldepth 2 multipv 1 score cp 51 nodes 120 nps 60000 hashfull 0 tbhits 0 time 2 pv e2e4 info depth 4 seldepth 2 multipv 1 score cp 58 nodes 144 nps 72000 hashfull 0 tbhits 0 time 2 pv d2d4 info depth 5 seldepth 2 multipv 1 score cp 58 nodes 174 nps 87000 hashfull 0 tbhits 0 time 2 pv d2d4 a7a6 info depth 6 seldepth 7 multipv 1 score cp 34 nodes 1303 nps 217166 hashfull 0 tbhits 0 time 6 pv e2e4 c7c5 g1f3 b8c6 c2c3 info depth 7 seldepth 6 multipv 1 score cp 29 nodes 3126 nps 260500 hashfull 1 tbhits 0 time 12 pv d2d4 g8f6 e2e3 d7d5 c2c4 d5c4 info depth 8 seldepth 7 multipv 1 score cp 26 nodes 5791 nps 304789 hashfull 4 tbhits 0 time 19 pv g1f3 g8f6 d2d4 d7d5 e2e3 info depth 9 seldepth 9 multipv 1 score cp 31 nodes 8541 nps 294517 hashfull 5 tbhits 0 time 29 pv g1f3 c7c5 e2e4 e7e6 d2d4 c5d4 f3d4 info depth 10 seldepth 13 multipv 1 score cp 25 nodes 20978 nps 299685 hashfull 10 tbhits 0 time 70 pv e2e4 c7c5 g1f3 b8c6 f1c4 e7e6 e1g1 g8f6 info depth 11 seldepth 13 multipv 1 score cp 32 nodes 29040 nps 296326 hashfull 14 tbhits 0 time 98 pv e2e4 c7c5 c2c3 g8f6 e4e5 f6d5 d2d4 > stop info depth 12 seldepth 14 multipv 1 score cp 38 nodes 41207 nps 300781 hashfull 18 tbhits 0 time 137 pv e2e4 e7e6 d2d4 d7d5 b1c3 d5e4 c3e4 info depth 13 seldepth 15 multipv 1 score cp 32 upperbound nodes 51476 nps 301029 hashfull 21 tbhits 0 time 171 pv e2e4 c7c5 bestmove e2e4 ponder c7c5 ponderhit The user has played the expected move. This will be sent if the engine was told to ponder on the same move the user has played. The engine will continue searching but switch from pondering to normal search. Example > setoption name Ponder value true > position startpos moves e2e4 > go movetime 1000 info string NNUE evaluation using nn-52471d67216a.nnue enabled info depth 1 seldepth 1 multipv 1 score cp -13 nodes 22 nps 22000 hashfull 0 tbhits 0 time 1 pv e7e5 info depth 2 seldepth 2 multipv 1 score cp -11 nodes 71 nps 71000 hashfull 0 tbhits 0 time 1 pv e7e6 info depth 3 seldepth 2 multipv 1 score cp -11 nodes 189 nps 94500 hashfull 0 tbhits 0 time 2 pv e7e6 info depth 4 seldepth 2 multipv 1 score cp -11 nodes 248 nps 124000 hashfull 0 tbhits 0 time 2 pv e7e6 info depth 5 seldepth 5 multipv 1 score cp -37 nodes 1383 nps 345750 hashfull 1 tbhits 0 time 4 pv d7d5 e4d5 d8d5 info depth 6 seldepth 5 multipv 1 score cp -30 nodes 2545 nps 318125 hashfull 1 tbhits 0 time 8 pv c7c5 g1f3 e7e6 info depth 7 seldepth 7 multipv 1 score cp -30 nodes 4201 nps 350083 hashfull 2 tbhits 0 time 12 pv c7c5 g1f3 e7e6 d2d4 c5d4 f3d4 info depth 8 seldepth 10 multipv 1 score cp -43 nodes 10574 nps 377642 hashfull 4 tbhits 0 time 28 pv c7c5 g1f3 e7e6 d2d4 c5d4 f1e2 info depth 9 seldepth 11 multipv 1 score cp -35 nodes 16924 nps 360085 hashfull 6 tbhits 0 time 47 pv e7e5 g1f3 b8c6 d2d4 e5d4 f3d4 g8f6 info depth 10 seldepth 13 multipv 1 score cp -41 nodes 34866 nps 325850 hashfull 12 tbhits 0 time 107 pv e7e5 g1f3 b8c6 f1b5 g8f6 b1c3 f8c5 e1g1 d7d6 d2d4 e5d4 f3d4 info depth 11 seldepth 14 multipv 1 score cp -38 nodes 43562 nps 325089 hashfull 15 tbhits 0 time 134 pv e7e6 d2d4 d7d5 b1c3 g8f6 c1g5 d5e4 c3e4 info depth 12 seldepth 16 multipv 1 score cp -41 nodes 56507 nps 326630 hashfull 23 tbhits 0 time 173 pv e7e6 d2d4 d7d5 b1c3 f8b4 g1e2 d5e4 a2a3 b4c3 e2c3 info depth 13 seldepth 15 multipv 1 score cp -32 nodes 73728 nps 323368 hashfull 28 tbhits 0 time 228 pv e7e6 d2d4 d7d5 b1c3 g8f6 e4e5 f6d7 f2f4 c7c5 c3e2 c5d4 e2d4 info depth 14 seldepth 17 multipv 1 score cp -31 nodes 90766 nps 318477 hashfull 37 tbhits 0 time 285 pv e7e6 d2d4 d7d5 b1c3 g8f6 e4e5 f6d7 f2f4 c7c5 c3e2 b8c6 g1f3 f8e7 c2c3 e8g8 info depth 15 seldepth 17 multipv 1 score cp -35 nodes 193951 nps 317432 hashfull 76 tbhits 0 time 611 pv e7e5 g1f3 b8c6 f1c4 g8f6 d2d3 f8e7 b1c3 d7d6 h2h3 e8g8 info depth 16 seldepth 17 multipv 1 score cp -23 nodes 255750 nps 322916 hashfull 98 tbhits 0 time 792 pv e7e5 g1f3 b8c6 f1c4 g8f6 b1c3 f8c5 d2d3 h7h6 c1e3 c5e3 f2e3 d7d6 c4b3 info depth 17 seldepth 20 multipv 1 score cp -27 upperbound nodes 323628 nps 322338 hashfull 132 tbhits 0 time 1004 pv e7e5 g1f3 bestmove e7e5 ponder g1f3 Stockfish plays 1. ... e5 and expects 2. Nf3 > position startpos moves e2e4 e7e5 g1f3 > go ponder movetime 1000 info string NNUE evaluation using nn-52471d67216a.nnue enabled info depth 1 seldepth 1 multipv 1 score cp -30 nodes 47 nps 23500 hashfull 0 tbhits 0 time 2 pv g8f6 d2d4 info depth 2 seldepth 2 multipv 1 score cp -30 nodes 86 nps 43000 hashfull 0 tbhits 0 time 2 pv g8f6 d2d4 info depth 3 seldepth 4 multipv 1 score cp -30 nodes 144 nps 72000 hashfull 0 tbhits 0 time 2 pv g8f6 d2d4 e5d4 e4e5 info depth 4 seldepth 5 multipv 1 score cp -30 nodes 189 nps 94500 hashfull 0 tbhits 0 time 2 pv g8f6 d2d4 e5d4 e4e5 f6e4 info depth 5 seldepth 6 multipv 1 score cp -29 nodes 252 nps 126000 hashfull 0 tbhits 0 time 2 pv g8f6 d2d4 e5d4 e4e5 f6e4 d1d4 info depth 6 seldepth 7 multipv 1 score cp -29 nodes 355 nps 177500 hashfull 0 tbhits 0 time 2 pv g8f6 d2d4 e5d4 e4e5 f6e4 d1d4 d7d5 e5d6 info depth 7 seldepth 8 multipv 1 score cp -29 nodes 591 nps 295500 hashfull 0 tbhits 0 time 2 pv g8f6 d2d4 e5d4 e4e5 f6e4 d1d4 d7d5 e5d6 info depth 8 seldepth 11 multipv 1 score cp -29 nodes 1676 nps 279333 hashfull 0 tbhits 0 time 6 pv g8f6 d2d4 e5d4 e4e5 f6e4 d1d4 d7d5 e5d6 info depth 9 seldepth 10 multipv 1 score cp -29 nodes 2414 nps 301750 hashfull 0 tbhits 0 time 8 pv g8f6 d2d4 e5d4 e4e5 f6e4 d1d4 d7d5 e5d6 e4d6 info depth 10 seldepth 12 multipv 1 score cp -26 nodes 5045 nps 296764 hashfull 1 tbhits 0 time 17 pv g8f6 d2d4 e5d4 e4e5 f6e4 d1d4 d7d5 e5d6 e4d6 c1g5 b8c6 info depth 11 seldepth 12 multipv 1 score cp -26 nodes 8612 nps 277806 hashfull 2 tbhits 0 time 31 pv g8f6 d2d4 e5d4 e4e5 f6e4 d1d4 d7d5 e5d6 e4d6 d4c3 d8e7 f1e2 info depth 12 seldepth 17 multipv 1 score cp -34 nodes 18839 nps 303854 hashfull 6 tbhits 0 time 62 pv g8f6 d2d4 f6e4 f1d3 d7d5 f3e5 f8d6 b1d2 e4d2 c1d2 b8c6 d1h5 g7g6 e5c6 b7c6 h5e2 d8e7 info depth 13 seldepth 19 multipv 1 score cp -36 nodes 59966 nps 310704 hashfull 25 tbhits 0 time 193 pv b8c6 f1c4 g8f6 d2d3 f8e7 e1g1 e8g8 f1e1 d7d6 a2a4 c8e6 info depth 14 seldepth 19 multipv 1 score cp -28 nodes 128004 nps 312968 hashfull 61 tbhits 0 time 409 pv g8f6 d2d4 f6e4 f1d3 d7d5 f3e5 f8d6 c2c4 e8g8 c4d5 d6b4 b1d2 e4d2 c1d2 info depth 15 seldepth 22 multipv 1 score cp -31 nodes 191379 nps 314251 hashfull 92 tbhits 0 time 609 pv b8c6 f1c4 g8f6 d2d3 f8e7 e1g1 d7d6 a2a4 e8g8 f1e1 c6a5 c4a2 c7c5 b1c3 a5c6 a2c4 c8e6 c3d5 e6d5 e4d5 info depth 16 seldepth 24 multipv 1 score cp -32 nodes 319240 nps 316392 hashfull 150 tbhits 0 time 1009 pv b8c6 f1c4 g8f6 d2d3 f8e7 e1g1 d7d6 a2a4 e8g8 a4a5 c8e6 c4e6 f7e6 a5a6 b7b5 c2c3 d8c8 b1d2 a8b8 b2b4 The opponent plays the expected 2. Nf3 > ponderhit info depth 17 seldepth 24 multipv 1 score cp -32 nodes 351706 nps 307973 hashfull 161 tbhits 0 time 1142 pv b8c6 f1c4 g8f6 d2d3 f8e7 e1g1 d7d6 a2a4 e8g8 a4a5 c8e6 c4e6 f7e6 a5a6 b7b5 c2c3 d8c8 b1d2 a8b8 b2b4 bestmove b8c6 ponder f1c4 Stockfish plays 2. ... Nc6 and expects 3. Bc4 > position startpos moves e2e4 e7e5 g1f3 b8c6 f1c4 > go ponder movetime 1000 info string NNUE evaluation using nn-52471d67216a.nnue enabled info depth 1 seldepth 1 multipv 1 score cp -34 nodes 39 nps 39000 hashfull 0 tbhits 0 time 1 pv d7d6 info depth 2 seldepth 2 multipv 1 score cp -38 nodes 95 nps 47500 hashfull 0 tbhits 0 time 2 pv d7d6 d2d4 e5d4 info depth 3 seldepth 3 multipv 1 score cp -38 nodes 164 nps 82000 hashfull 0 tbhits 0 time 2 pv d7d6 d2d4 e5d4 info depth 4 seldepth 4 multipv 1 score cp -38 nodes 231 nps 115500 hashfull 0 tbhits 0 time 2 pv d7d6 d2d4 e5d4 f3d4 ... Non-standard commands bench This runs a standard search benchmark on a pre-selected assortment of positions. It prints the total combined nodes searched, as well as time taken. This command serves two primary purposes: it can be used as a basic nodes-per-second speed benchmark the total number of nodes searched can be used as a \"signature\" or \"fingerprint\" of the exact search algorithm version in the binary The main utility of the nodecount signature is to ensure that, when testing possible new patches on Fishtest, the author and workers are working on the exact same code. It also can be used to verify which version or release you have locally. Each functional commit in the Stockfish commit history includes a standardized nodecount signature. (For example, the nodecount signature of Stockfish 15 is 8129754.) There are several parameters which can be used to tweak exactly what sort of benchmark is run: Usage: bench [ttSize] [threads] [limit] [fenFile] [limitType] The standardized nodecount signature of a version is obtained using all default parameters. Example > position startpos > bench 16 1 1 current depth Position: 1/1 (rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1) info string NNUE evaluation using nn-c38c3d8d3920.nnue info depth 1 seldepth 1 multipv 1 score cp 25 nodes 20 nps 10000 hashfull 0 tbhits 0 time 2 pv d2d4 bestmove d2d4 =========================== Total time (ms) : 2 Nodes searched : 21 Nodes/second : 10500 The bench command may also be used in the command line when executing Stockfish. Examples ./stockfish bench Running the bench with specific parameters and redirecting the output of the benchmark to a file called \"outputFile\". ./stockfish bench 16 1 1 inputFile > outputFile Running the benchmark with specific parameters in the starting position indefinitely and redirecting the output. Note than in this case, the limit is ignored. ./stockfish bench 4096 16 _ current infinite > outputFile Parameter Default Values Meaning ttSize 16 Hash value threads 1 Number of threads limit 13 The limit of limitType fenFile default default, current or [file path] The positions used for the bench limitType depth A go parameter (e.g. depth or nodes) or eval The type of limit Note String parameters are case-sensitive. In case of invalid values of string parameters, the error is not given, and the behavior is undefined (the program does not fall back to a default value). The [file path] may contain one or more positions, each on a separate line. speedtest Note This command is currently not available in any major or minor release. It is only available in pre-releases since 3ac75cd (2024-09-28). Measures the speed of the computer with a realistic and stable hardware benchmark. By default, Stockfish will run on all available threads, using a reasonable hash, on a number of positions that represent at typical game. The output is the achieved Nodes/second. The simplest and intended usage is: ./stockfish speedtest The advanced usage is speedtest [threads] [hash (MiB)] [runtime (s)] Example with output C:\\dev\\stockfish-master\\src>stockfish.exe speedtest Stockfish dev-20240928-nogit by the Stockfish developers (see AUTHORS file) info string Using 16 threads Warmup position 3/3 Position 258/258 =========================== Version : Stockfish dev-20240928-nogit Compiled by : g++ (GNUC) 13.2.0 on MinGW64 Compilation architecture : x86-64-vnni256 Compilation settings : 64bit VNNI BMI2 AVX2 SSE41 SSSE3 SSE2 POPCNT Compiler __VERSION__ macro : 13.2.0 Large pages : yes User invocation : speedtest Filled invocation : speedtest 16 2048 150 Available processors : 0-15 Thread count : 16 Thread binding : none TT size [MiB] : 2048 Hash max, avg [per mille] : single search : 40, 21 single game : 631, 428 Total nodes searched : 2099917842 Total search time [s] : 153.937 Nodes/second : 13641410 Parameter Default threads all hash threads * 128 runtime 150 d Display the current position, with ASCII art and FEN. Example > d +---+---+---+---+---+---+---+---+ | r | n | b | q | k | b | n | r | 8 +---+---+---+---+---+---+---+---+ | p | p | p | p | p | p | p | p | 7 +---+---+---+---+---+---+---+---+ | | | | | | | | | 6 +---+---+---+---+---+---+---+---+ | | | | | | | | | 5 +---+---+---+---+---+---+---+---+ | | | | | | | | | 4 +---+---+---+---+---+---+---+---+ | | | | | | | | | 3 +---+---+---+---+---+---+---+---+ | P | P | P | P | P | P | P | P | 2 +---+---+---+---+---+---+---+---+ | R | N | B | Q | K | B | N | R | 1 +---+---+---+---+---+---+---+---+ a b c d e f g h Fen: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1 Key: 8F8F01D4562F59FB Checkers: eval Display the static evaluation of the current position. Example info string NNUE evaluation using nn-c38c3d8d3920.nnue NNUE derived piece values: +-------+-------+-------+-------+-------+-------+-------+-------+ | r | n | b | q | k | b | n | r | | -5.28 | -4.92 | -5.11 | -8.99 | | -5.12 | -4.96 | -5.55 | +-------+-------+-------+-------+-------+-------+-------+-------+ | p | p | p | p | p | p | p | p | | -0.70 | -1.17 | -1.15 | -1.14 | -1.27 | -1.69 | -1.41 | -0.72 | +-------+-------+-------+-------+-------+-------+-------+-------+ | | | | | | | | | | | | | | | | | | +-------+-------+-------+-------+-------+-------+-------+-------+ | | | | | | | | | | | | | | | | | | +-------+-------+-------+-------+-------+-------+-------+-------+ | | | | | | | | | | | | | | | | | | +-------+-------+-------+-------+-------+-------+-------+-------+ | | | | | | | | | | | | | | | | | | +-------+-------+-------+-------+-------+-------+-------+-------+ | P | P | P | P | P | P | P | P | | +0.64 | +1.04 | +1.03 | +0.98 | +1.14 | +1.49 | +1.23 | +0.61 | +-------+-------+-------+-------+-------+-------+-------+-------+ | R | N | B | Q | K | B | N | R | | +4.38 | +4.13 | +4.52 | +7.67 | | +4.37 | +4.11 | +4.65 | +-------+-------+-------+-------+-------+-------+-------+-------+ NNUE network contributions (White to move) +------------+------------+------------+------------+ | Bucket | Material | Positional | Total | | | (PSQT) | (Layers) | | +------------+------------+------------+------------+ | 0 | 0.00 | - 2.93 | - 2.93 | | 1 | 0.00 | - 0.16 | - 0.16 | | 2 | 0.00 | + 0.39 | + 0.39 | | 3 | 0.00 | + 0.43 | + 0.43 | | 4 | 0.00 | + 0.20 | + 0.20 | | 5 | 0.00 | + 0.26 | + 0.26 | | 6 | 0.00 | + 0.27 | + 0.27 | | 7 | 0.00 | + 0.10 | + 0.10 | <-- this bucket is used +------------+------------+------------+------------+ NNUE evaluation +0.10 (white side) Final evaluation +0.11 (white side) [with scaled NNUE, ...] compiler Give information about the compiler and environment used for building a binary. Example: > compiler Compiled by g++ (GNUC) 13.1.0 on MinGW64 Compilation settings include: 64bit AVX2 SSE41 SSSE3 SSE2 POPCNT __VERSION__ macro expands to: 13.1.0 export_net [filenameBigNet] [filenameSmallNet] Exports the currently loaded network to a file. If the currently loaded network is the embedded network and the filename is not specified then the network is saved to the file matching the name of the embedded network, as defined in evaluate.h. If the currently loaded network is not the embedded network (some net set through the UCI setoption) then the filename parameter is required and the network is saved into that file. flip Flips the side to move. help Gives version info, describes Stockfish as a chess engine using UCI, and points to the GitHub page for more details. license Gives version info, describes Stockfish as a chess engine using UCI, and points to the GitHub page for more details."
  },
  "Stockfish/wiki/Useful-data.html": {
    "href": "Stockfish/wiki/Useful-data.html",
    "title": "| Chess",
    "summary": "Depth vs. TC Newer and older results showing the average depth for games at fishtest conditions New Old Elo cost of small Hash We measure the influence of Hash on the playing strength, using games of SF15.1 at LTC (60+0.6s) and VLTC (240+2.4s) on the UHO book. Hash is varied between 1 and 64 MB and 256MB in powers of two, leading to as average hashfull between 100 and 950 per thousand. The data suggests that keeping the average hashfull below 30% is best to maintain strength. Raw data for the above graph Hash Hashfull Elo Elo-err 64 109 0.00 0.00 32 199 -3.80 13.00 16 336 0.70 12.80 8 513 -10.70 11.00 4 689 -21.50 13.30 2 825 -29.50 13.10 1 902 -47.80 8.80 Hash Hashfull Elo Elo-err 256 131 0.00 0.00 128 239 -1.00 7.50 64 397 -0.80 6.60 32 591 -12.10 6.10 16 766 -21.40 7.30 8 865 -32.30 4.20 4 931 -52.40 6.20 2 943 -67.40 5.70 1 947 -95.20 6.60 Elo cost of using MultiPV MultiPV provides the N best moves and their principal variations. This is a great tool for understanding the options available in a given position. However, this information does not come for free and the cost of computing it reduces the quality of the best move found compared to a search that only needs to find a single line. MultiPV Elo Elo-err 1 0.0 0.0 2 -97.2 2.1 3 -156.7 2.8 4 -199.3 2.9 5 -234.5 2.8 Engine: Stockfish 15.1 Time control: 60s+0.6s Book: UHO Elo gain using MultiPV at fixed depth MultiPV Elo Elo-err Points Played 1 0.0 13496.5 30614 2 45.7 3.1 15388.0 30697 3 53.9 3.5 15732.5 30722 4 59.5 3.2 15862.5 30479 5 63.7 3.6 16078.5 30604 Time control: 580s+5.8s Depth: 18 Elo gain using syzygy TB6 testing for various versions of SF Consistent measurement of Elo gain (syzygy 6men vs none) for various SF versions: TB are in RAM (so fast access), TC is 10+0.1s (STC), book UHO_XXL_+0.90_+1.19.epd. No adjudication. The introduction of NNUE (with SF12) is clearly visible. With SF15, there is just 2.7 Elo gain. Raw data for the above graph SF Elo Elo-err 6 14.5 1.4 7 15.6 1.3 8 15.8 1.3 9 16.5 1.5 10 16.2 1.5 11 15.8 1.5 12 7.2 1.4 13 11.1 1.4 14 7.3 1.4 15 2.7 1.4 Testing depending on number of pieces and TC Tested at 10+0.1, with all syzygy WDL files on tmpfs (i.e. RAM), testing using none(0), 4, 5, and 6 man TB in a round-robin tournament (SF10dev). Rank Name Elo +/- Games Score Draws 1 syzygy6 13 2 82591 51.8% 59.5% 2 syzygy5 2 2 82590 50.3% 59.4% 3 syzygy4 -7 2 82591 49.0% 59.3% 4 syzygy0 -7 2 82592 48.9% 59.4% Tested at 60+0.6, with all syzygy WDL files on tmpfs (i.e. RAM), testing using none(0) against 6 man TB: Score of syzygy6 vs syzygy0: 4084 - 3298 - 18510 [0.515] 25892 Elo difference: 10.55 +/- 2.25 Threading efficiency and Elo gain. Efficiency Here we look at the threading efficiency of the lazySMP parallelization scheme. To focus on the algorithm we play games with a given budget of nodes rather than at a given TC. In principle, lazySMP has excellent scaling of the nps with cores, but practical measurement is influenced by e.g. frequency adjustments, SMT/hyperthreading, and sometimes hardware limitation. Equivalent nodestime In these tests, matches are played at a fixed nodes budget (using the nodestime feature of SF), and equivalence in strength between the serial player and the threaded player (for x threads in the graph below) is found by adjusting the number of nodes given to the threaded player (e.g. with 16 threads, the threaded player might need 200% of the nodes of the serial player to match the strength of the serial player). This 'equivalent nodestime' is determined for various number of threads and various nodes budgets (60+0.6Mnodes/game is somewhat similar to our usual LTC at 60+0.6s/game, if we assume 1Mnps). The interesting observation one can make immediately is that this 'equivalent nodestime' grows with the number of threads, but not too steeply, and further more that the 'equivalent nodestime' decreases with increasing nodes budget. The data shows that with 64 threads, the equivalent nodestime is about 200% for a node budget of 240+2.4Mn, i.e. despite such games being much faster than STC (10+0.1s), efficiency is still around 50%. The curves are sufficiently smooth to be fitted with a model having 1 parameter that is different between the curves (f(x), parameter a, see caption). A smaller value of a means a higher efficiency. A fit for the a parameter, and extrapolation to long TCs. The above parameter a from the model, can be fit as a function of nodes budget, this allows for extrapolating the parameter, and to arrive at and estimate for the 'equivalent nodestime' at large TC / nodes budgets: The fit is again fairly good. Taking a leap of faith, these measurements at up to 240+2.4Mn can be extrapolated to node budgets typical of TCEC or CCC (up to 500Gn). This allows us to predict speedup and/or efficiency. Speedup Efficiency These extrapolations suggest that even at thread counts of >300, at TCEC TCs efficiency could be 80% or higher, provided the nps scales with the number of threads. Elo results (older) LTC Playing 8 threads vs 1 thread at LTC (60+0.6, 8moves_v3.pgn): Score of t8 vs seq: 476 - 3 - 521 [0.737] 1000 Elo difference: 178.6 +/- 14.0, LOS: 100.0 %, DrawRatio: 52.1 % Playing 1 thread at 8xLTC (480+4.8) vs (60+0.6) (8moves_v3.pgn): Score of seq8 vs seq: 561 - 5 - 434 [0.778] 1000 Elo difference: 217.9 +/- 15.8, LOS: 100.0 %, DrawRatio: 43.4 % Which is roughly 82% efficiency (178/218). STC Playing 8 threads vs 1 thread at STC (10+0.1): Score of threads vs serial: 1606 - 15 - 540 [0.868] 2161 Elo difference: 327.36 +/- 14.59 Playing 8 threads @ 10+0.1 vs 1 thread @ 80+0.8: Score of threads vs time: 348 - 995 - 2104 [0.406] 3447 Elo difference: -66.00 +/- 7.15 So, 1 -> 8 threads has about 83% scaling efficiency (327 / (327 + 66)) using this test. Elo from speedups For small speedups (<~5%) the linear estimate can be used that gives Elo gain as a function of speedup percentage (x) as: Elo_stc(x) = 2.10 x Elo_ltc(x) = 1.43 x To have 50% passing chance at STC<-0.5,1.5>, we need a 0.24% speedup, while at LTC<0.25,1.75> we need 0.70% speedup. A 1% speedup has nearly 85% passing chance at LTC. Raw data: tc 10+0.1: 16 32.42 3.06 8 13.67 3.05 4 8.99 3.04 2 3.52 3.05 tc 60+0.6: 16 20.85 2.59 8 12.20 2.57 4 4.67 2.57 Note: Numbers will depend on the precise hardware. The model was verified quite accurately on fishtest see https://github.com/locutus2/Stockfish-old/commit/82958c97214b6d418e5bc95e3bf1961060cd6113#commitcomment-38646654 Distribution of lengths of games at LTC (60+0.6) on fishtest In a collection of a few million games, the longest was 902 plies. Win-Draw-Loss statistics of LTC games on fishtest The following graph gives information on the Win-Draw-Loss (WDL) statistics, relating them to score and material count. It answers the question 'What fraction of positions that have a given score (and material count) in fishtest LTC, have a Win or a Draw or a Loss ?'. This model is used when Stockfish provides WDL statistics during analysis with the UCI_ShowWDL option set to True, as well as for the normalization of Stockfish's evaluation that ensures that a score of \"100 centipawns\" means the engine has a 50% probability to win from this position in selfplay at fishtest LTC time control. For details see the WDL model repo. Equivalent time odds and normalized game pair Elo A suitable measure to define the Elo difference between two engines is normalized game pair Elo as defined from the pentanomial statistics by: def normalized_game_pair_elo(row): return -100 * np.log10((2 * row['pntl0'] + row['pntl1']) / (2 * row['pntl4'] + row['pntl3'])) It is nearly book independent, and thus a good measure of relative strength of two engines at a given TC. To express more clearly what a given strength difference implies. We use 'equivalent time odds', i.e. the TC factor needed to have equivalent strength, i.e. zero Elo difference in a match between two engines (which is independent of the definition of Elo used). We see that at STC the equivalent time odds is about 6x for SF14 vs SF17, while at LTC this time odds factor has become 16x. Raw data for the above graph ======================================= UHO_Lichess_4852_v1 ======================================= engine1 tc1 engine2 tc2 elo pntl0 pntl1 pntl2 pntl3 pntl4 ngp_Elo sf17 10+0.1 sf14 10.0+0.1 165.29 10 432 6509 25598 3291 185.24 sf17 10+0.1 sf14 40.0+0.4 41.74 251 5110 16632 13516 331 40.25 sf17 10+0.1 sf14 60.0+0.6 7.47 395 7724 17826 9736 159 7.22 sf17 10+0.1 sf14 80.0+0.8 -17.52 569 10075 17691 7408 97 -16.88 ======================================= noob_3moves ======================================= engine1 tc1 engine2 tc2 elo pntl0 pntl1 pntl2 pntl3 pntl4 ngp_Elo sf17 10+0.1 sf14 10.0+0.1 108.47 6 610 16073 16012 3139 155.43 sf17 10+0.1 sf14 40.0+0.4 10.85 100 3004 27471 5089 176 23.00 sf17 10+0.1 sf14 60.0+0.6 -4.87 165 4048 28312 3257 58 -11.33 sf17 10+0.1 sf14 80.0+0.8 -15.02 219 4892 28520 2184 25 -37.76 ======================================= UHO_Lichess_4852_v1 ======================================= engine1 tc1 engine2 tc2 elo pntl0 pntl1 pntl2 pntl3 pntl4 ngp_Elo sf17 60+0.6 sf14 60.0+0.6 163.96 1 194 5269 29060 1316 220.87 sf17 60+0.6 sf14 240.0+2.4 88.09 25 2021 14134 19482 178 98.13 sf17 60+0.6 sf14 360.0+3.6 63.06 41 3212 16546 15938 103 69.03 sf17 60+0.6 sf14 480.0+4.8 46.39 72 4243 17703 13760 62 50.03 ======================================= noob_3moves ======================================= engine1 tc1 engine2 tc2 elo pntl0 pntl1 pntl2 pntl3 pntl4 ngp_Elo sf17 60+0.6 sf14 60.0+0.6 71.55 0 131 22234 12279 1196 204.92 sf17 60+0.6 sf14 240.0+2.4 19.23 0 436 31090 4231 83 100.37 sf17 60+0.6 sf14 360.0+3.6 11.51 3 616 32255 2938 28 68.25 sf17 60+0.6 sf14 480.0+4.8 7.08 6 716 32949 2149 20 47.81 Elo gain with time odds See also: https://github.com/official-stockfish/Stockfish/discussions/3402 New Old One year of NNUE speed improvements Presents nodes per second (nps) measurements for all SF version between the first NNUE commit (SF_NNUE, Aug 2th 2020) and end of July 2021 on a AMD Ryzen 9 3950X compiled with make -j ARCH=x86-64-avx2 profile-build. The last nps reported for a depth 22 search from startpos using NNUE (best over about 20 measurements) is shown in the graph. For reference, the last classical evaluation (SF_classical, July 30 2020) has 2.30 Mnps. The impact of efficient (incremental) updates (NNUE) As measured with SF17dev (dev-20230824-4c4cb185), disabling the update_accumulator_incremental() functionality. Speedup: Result of 10 runs ================== base (./stockfish.master ) = 1287575 +/- 8703 test (./stockfish.patch ) = 696064 +/- 3451 diff = -591511 +/- 7318 speedup = -0.4594 P(speedup > 0) = 0.0000 CPU: 16 x AMD Ryzen 9 3950X 16-Core Processor Which corresponds to -67.55 ± 9.5 Elo on fishtest with the UHO book at LTC. Round-robin tournament with SF releases, impact of book and time odds Measured playing games of 5+0.05s, with SF 7 - 15, using the three different books. Each version plays once with the base TC, and once with 20% time odds. Raw data for the above graph UHO SF Elo 20%-odds Elo-err Odds-err SF7 0.0 38.1 0.0 4.1 SF8 95.8 40.3 4.2 5.9 SF9 142.3 38.8 3.9 5.5 SF10 199.5 38.2 4.0 5.7 SF11 231.2 40.5 4.3 5.7 SF12 405.6 37.5 4.0 5.9 SF13 476.5 28.4 4.2 6.0 SF14 553.4 27.8 4.5 6.3 SF15 627.6 24.5 4.6 6.7 noob SF Elo 20%-odds Elo-err Odds-err SF7 0.0 37.8 0.0 3.8 SF8 97.2 39.8 4.3 5.9 SF9 146.8 40.5 3.9 5.9 SF10 211.1 39.3 4.3 6.2 SF11 241.8 43.0 4.4 6.0 SF12 458.4 32.1 4.3 6.2 SF13 536.2 31.9 4.2 6.3 SF14 611.3 29.1 4.5 6.5 SF15 660.9 24.8 4.3 6.2 8moves SF Elo 20%-odds Elo-err Odds-err SF7 0.0 33.0 0.0 4.2 SF8 86.7 32.2 4.2 5.8 SF9 126.7 37.3 4.0 5.6 SF10 182.3 33.7 4.3 5.6 SF11 206.5 42.6 4.0 5.4 SF12 380.7 31.6 4.1 5.6 SF13 445.8 25.0 4.0 5.7 SF14 512.4 23.8 4.1 5.9 SF15 554.5 26.4 4.1 5.9 Branching factor of Stockfish The branching factor (\\(`B_f`\\)) of Stockfish is defined such that \\(`\\text{nodes} = B_f^{\\text{rootDepth}}`\\) or equivalently \\(`B_f = \\exp\\left(\\frac{\\log(\\text{nodes})}{\\text{rootDepth}}\\right)`\\). Here, this has been measured with a single search from the starting position. The trend is the deeper one searches the lower the branching factor, and newer versions of SF have a lower branching factor. A small difference in branching factor leads to very large differences in number of nodes searched. For example, Stockfish 10 needs about 338x more nodes than Stockfish 17 to reach depth 49. Raw data for the above graph Depth SF_9 SF_10 SF_11 SF_Classical SF_12 SF_13 SF_14 SF_14.1 SF_15 SF_15.1 SF_16 SF_16.1 SF_17 1 20 20 20 20 20 20 20 20 20 20 20 20 20 2 47 54 54 56 42 42 48 51 45 66 40 44 48 3 152 136 147 150 153 84 181 154 191 120 70 69 76 4 495 247 574 479 303 241 630 807 264 144 101 92 97 5 1036 1157 782 989 532 572 741 1061 1449 174 131 123 124 6 2148 2250 2734 1161 1004 741 2448 1761 3954 1303 489 1815 197 7 3836 4481 5780 2808 1680 1169 3488 5459 6269 3126 1560 2096 309 8 6480 7849 9568 10224 4717 1849 5172 6998 11049 5791 2105 2565 1984 9 12958 11846 14134 15801 7299 3894 10602 12053 15347 8541 4500 5901 3415 10 27933 27338 18613 25231 15571 10144 23676 28785 23259 20978 7548 7103 3634 11 89387 61978 37332 36205 32300 29662 44751 34551 40064 29040 13058 22753 8402 12 161734 80917 99541 98957 79712 57232 60151 103152 57767 41207 35836 27955 11157 13 257254 160903 161123 159227 97905 89986 99443 166195 97551 60308 59384 31553 14979 14 292516 263420 235857 188774 135890 114602 140890 226798 152736 97789 73942 47991 47967 15 619466 474032 525778 372631 239380 263818 206290 296769 214622 142447 173344 90454 82930 16 1019034 680143 654750 405644 420597 319442 327876 460525 484091 199887 302305 130482 117953 17 1273498 1065531 1154718 497031 502334 539694 700175 620141 570807 268004 358119 279903 130041 18 2090089 1736290 1333553 602794 888362 605175 1254757 674532 873460 298071 406239 378645 278301 19 3889524 2883012 2466048 1697325 1163966 849949 1461089 1086024 1119774 332202 517102 492584 479846 20 6651739 4186926 3442296 2223954 2233676 1504284 2142551 1731345 1494341 557706 768773 898610 631058 21 8289557 4805680 5139240 2921191 2445813 3168396 2296200 2217575 2170638 753633 872083 1176108 698143 22 10859418 6827891 6158594 4887298 3007878 3898518 3992124 2939401 2709915 1197489 1356583 1504022 942656 23 15123810 11731363 9742620 5254745 4135648 5354837 5163931 7071762 3144247 1586189 2240135 2486833 1239406 24 20808306 17783159 12170495 5804128 5840781 6300391 8203572 9001254 5196382 2305729 3180221 2849481 2442109 25 29432182 25759382 16577641 9887365 8616999 9226135 9663515 9575262 7230340 3251912 3441646 3582655 2851004 26 38405658 37355659 29415435 15416329 12367860 13291389 13132115 12540800 10155997 3545947 5785705 5160652 3777377 27 61348538 65193345 35334801 16892508 14200465 17614230 17260982 14253616 11757619 3840811 7477520 6713587 4182386 28 91156568 84966056 52360545 22446945 20151711 22949203 23305850 17086667 14952204 4248920 7825201 7315094 4579410 29 152014843 113526990 56749397 31024928 24336215 27545670 32590861 24537585 16522922 6665787 9338607 8935544 5542564 30 208471933 134803005 80264413 40636168 41377827 52979471 37897422 29100645 17532106 9416686 11373475 12808942 6276969 31 240772842 196015388 120969918 43679803 49872575 70001618 43511005 39989064 21326309 12481255 14291027 16399268 7084546 32 305614124 243327159 176419860 60779582 77092786 83237024 66185509 58476165 35327951 13176152 14508031 19160671 9105481 33 460341298 525261279 262818230 104196553 99594493 121678252 70265337 74720366 42781773 29047503 21536616 28320792 12975039 34 627444498 626723336 349662654 147117787 134411590 131502991 117669613 89119274 51973369 33777300 24887993 31733455 17887048 35 877803214 1117294961 437775571 244005733 167315794 172011884 149278426 110476836 55002290 39953796 32167747 36703106 21077663 36 990773530 1824606196 547475749 296743922 216932118 226846508 281527921 161111544 66188561 52697231 36605915 45026834 30184087 37 1741868476 1948381278 625189048 309340804 255329101 286768418 327695873 324326807 89076357 63613297 39166657 48749981 36650844 38 2363551706 3608706372 1432246160 358255505 378948934 428910293 415235309 419954003 104499345 81300722 43595727 57954972 39310411 39 3148966217 5554166307 1959631791 418553825 654266100 578750849 624817445 485331551 146707304 109373862 62509514 80617677 40464757 40 3652327064 10014646570 2986844761 647206461 794186607 736676898 984219044 627202823 181038342 120243575 89602927 105004273 41399955 41 5224502250 11274140350 4543685536 802616934 1476486355 945454647 1610720260 702641311 327908422 127205662 98940749 145615463 49181743 42 6127078317 13841000586 5932293513 836227440 1533085761 1746304445 1953800834 1052213918 588646348 138853511 117973493 180607180 67316394 43 16232620003 17967835068 7783862835 896362311 1962927879 2372473217 2416294925 1204729923 704287921 187144599 143353641 190606039 70823411 44 17718877503 25273820455 9652527844 1952302791 2099616405 3372924274 3072158370 1970670881 872977208 233082949 156729107 227657402 101871246 45 25741622196 30584201846 14557217345 2862286068 2534362233 4495023334 4453379221 2145570435 1125148935 286366031 203808982 286695307 139675067 46 40499236349 40789584966 15067833369 3334440078 5072562082 4943259313 8612561011 3902062051 1928316855 357211612 241777135 443906150 146118621 47 62111873752 46215215573 19558181065 9230842551 5760986205 10088353213 8788037210 7455854537 2230430028 479309517 286733914 524498432 151232944 48 86847634536 63800375952 23005194627 10641223658 7116913776 13627712965 12633107125 8190890802 3212535920 658225438 367143915 641079230 158042099 49 111558931172 120597835455 73124504606 23520860602 21079212074 15273984174 22132085123 9179551077 3418110578 839590469 543884199 887068496 356737000 50 121532848050 28477080465 33936548877 44066435831 11975030336 5444154366 1093863142 701965402 1119335316 422735554 Contempt measurements Older SF (around SF10) had contempt that worked rather well. This data shows the dependence of Elo difference between SFdev of October 2018 and older versions of Stockfish depending on contempt value (The SFdev used is approx. 40Elo above SF9). Upper and lower bounds represent value with maximum error. Opponent STC LTC 7 8 9 Full data with values https://docs.google.com/spreadsheets/d/1R_eopD8_ujlBbt_Q0ygZMvuMsP1sc4UyO3Md4qL1z5M/edit#gid=1878521689 Elo change with respect to TC Here is the result of some scaling tests with the 2moves book. 40000 games each (STC=10+0.1, LTC=60+0.6) SF7 -> SF8 SF8 -> SF9 SF9 -> SF10 Elo STC 95.91 +-2.3 58.28 +-2.3 71.03 +-2.4 Elo LTC 100.40 +-2.1 68.55 +-2.1 65.55 +-2.2 So we see that the common wisdom that increased TC causes elo compression is not always true. See https://github.com/official-stockfish/Stockfish/issues/1859#issuecomment-449624976 TC dependence of certain terms in search Discussed here https://github.com/official-stockfish/Stockfish/pull/2401#issuecomment-552768526 Elo contributions from various evaluation terms See spreadsheet at: https://github.com/official-stockfish/Stockfish/files/3828738/Stockfish.Feature.s.Estimated.Elo.worth.1.xlsx Note: The estimated elo worth for various features might be outdated, or might get outdated soon."
  },
  "Stockfish/wiki/_Footer.html": {
    "href": "Stockfish/wiki/_Footer.html",
    "title": "| Chess",
    "summary": "stockfishchess.org"
  },
  "api/ChessServer.Controllers.BaseController.html": {
    "href": "api/ChessServer.Controllers.BaseController.html",
    "title": "Class BaseController | Chess",
    "summary": "Class BaseController Namespace ChessServer.Controllers Assembly ChessServer.dll public class BaseController : ControllerBase Inheritance object ControllerBase BaseController Derived ChessController UserController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseController() public BaseController() Methods CreateToken(User, IConfiguration) [NonAction] public string CreateToken(User user, IConfiguration configuration) Parameters user User configuration IConfiguration Returns string decodeToken(string) [NonAction] public JwtSecurityToken decodeToken(string token) Parameters token string Returns JwtSecurityToken"
  },
  "api/ChessServer.Controllers.ChessController.html": {
    "href": "api/ChessServer.Controllers.ChessController.html",
    "title": "Class ChessController | Chess",
    "summary": "Class ChessController Namespace ChessServer.Controllers Assembly ChessServer.dll [ApiController] [Route(\"api/chess\")] public class ChessController : BaseController Inheritance object ControllerBase BaseController ChessController Inherited Members BaseController.CreateToken(User, IConfiguration) BaseController.decodeToken(string) ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChessController(IChessDataService, IStockFishService, LinkGenerator) public ChessController(IChessDataService chessDataService, IStockFishService stockFishService, LinkGenerator linkGenerator) Parameters chessDataService IChessDataService stockFishService IStockFishService linkGenerator LinkGenerator Methods CreateBotGame(CreateBotChessModel) [Authorize] [HttpPost] [Route(\"newbotgame\")] public Task<IActionResult> CreateBotGame(CreateBotChessModel model) Parameters model CreateBotChessModel Returns Task<IActionResult> CreateGame(CreateChessModel) [HttpPost] [Route(\"new\")] public Task<IActionResult> CreateGame(CreateChessModel model) Parameters model CreateChessModel Returns Task<IActionResult> Move(int, MoveModel) [HttpPut] [Route(\"{id}/move\")] public Task<IActionResult> Move(int id, MoveModel moveModel) Parameters id int moveModel MoveModel Returns Task<IActionResult> MoveBot(int) [HttpPut] [Route(\"{id}/moveBot\")] public Task<IActionResult> MoveBot(int id) Parameters id int Returns Task<IActionResult> StartStocky() [HttpGet] [Route(\"stockfish\")] public Task<IActionResult> StartStocky() Returns Task<IActionResult>"
  },
  "api/ChessServer.Controllers.UserController.html": {
    "href": "api/ChessServer.Controllers.UserController.html",
    "title": "Class UserController | Chess",
    "summary": "Class UserController Namespace ChessServer.Controllers Assembly ChessServer.dll [ApiController] [Route(\"api/user\")] public class UserController : BaseController Inheritance object ControllerBase BaseController UserController Inherited Members BaseController.CreateToken(User, IConfiguration) BaseController.decodeToken(string) ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserController(IDataService, IConfiguration) public UserController(IDataService dataService, IConfiguration configuration) Parameters dataService IDataService configuration IConfiguration Methods ClearJwtCookie(HttpResponse) [NonAction] public void ClearJwtCookie(HttpResponse response) Parameters response HttpResponse CreateUser(UserCreateModel) [HttpPost] [Route(\"new\")] public IActionResult CreateUser(UserCreateModel userModel) Parameters userModel UserCreateModel Returns IActionResult SetJwtCookie(HttpResponse, string) [NonAction] public void SetJwtCookie(HttpResponse response, string token) Parameters response HttpResponse token string SignInRequest(UserSignInModel) [HttpPut] [Route(\"sign_in\")] public Task<IActionResult> SignInRequest(UserSignInModel userModel) Parameters userModel UserSignInModel Returns Task<IActionResult> SignUserOut() [HttpPost] [Authorize] [Route(\"sign_out\")] public IActionResult SignUserOut() Returns IActionResult"
  },
  "api/ChessServer.Controllers.html": {
    "href": "api/ChessServer.Controllers.html",
    "title": "Namespace ChessServer.Controllers | Chess",
    "summary": "Namespace ChessServer.Controllers Classes BaseController ChessController UserController"
  },
  "api/ChessServer.Hubs.GameHub.html": {
    "href": "api/ChessServer.Hubs.GameHub.html",
    "title": "Class GameHub | Chess",
    "summary": "Class GameHub Namespace ChessServer.Hubs Assembly ChessServer.dll [Authorize] public class GameHub : Hub<IGameHub>, IDisposable Inheritance object Hub Hub<IGameHub> GameHub Implements IDisposable Inherited Members Hub<IGameHub>.Clients Hub.OnConnectedAsync() Hub.Dispose(bool) Hub.Dispose() Hub.Context Hub.Groups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GameHub(IGameManager, IChessDataService) public GameHub(IGameManager gameManager, IChessDataService chessDataService) Parameters gameManager IGameManager chessDataService IChessDataService Methods JoinGame(string) public Task JoinGame(string user) Parameters user string Returns Task LeaveGame(string) public Task LeaveGame(string sessionId) Parameters sessionId string Returns Task MakeMove(int, string, MoveModel) public Task MakeMove(int gameId, string sessionId, MoveModel move) Parameters gameId int sessionId string move MoveModel Returns Task OnDisconnectedAsync(Exception?) Called when a connection with the hub is terminated. public override Task OnDisconnectedAsync(Exception? ex) Parameters ex Exception Returns Task A Task that represents the asynchronous disconnect. SendMessageToGroup(string, string) public Task SendMessageToGroup(string message, string sessionId) Parameters message string sessionId string Returns Task StopQueue() public Task StopQueue() Returns Task"
  },
  "api/ChessServer.Hubs.html": {
    "href": "api/ChessServer.Hubs.html",
    "title": "Namespace ChessServer.Hubs | Chess",
    "summary": "Namespace ChessServer.Hubs Classes GameHub"
  },
  "api/DataLayer.ChessContext.html": {
    "href": "api/DataLayer.ChessContext.html",
    "title": "Class ChessContext | Chess",
    "summary": "Class ChessContext Namespace DataLayer Assembly DataLayer.dll public class ChessContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext ChessContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChessContext(DbContextOptions<ChessContext>) public ChessContext(DbContextOptions<ChessContext> options) Parameters options DbContextOptions<ChessContext> Properties ChessGames public DbSet<ChessGame> ChessGames { get; set; } Property Value DbSet<ChessGame> Moves public DbSet<Move> Moves { get; set; } Property Value DbSet<Move> Users public DbSet<User> Users { get; set; } Property Value DbSet<User> Methods OnModelCreating(ModelBuilder) Override this method to further configure the model that was discovered by convention from the entity types exposed in DbSet<TEntity> properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database. Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. However, it will still run when creating a compiled model. See Modeling entity types and relationships for more information and examples."
  },
  "api/DataLayer.DataServices.ChessDataService.html": {
    "href": "api/DataLayer.DataServices.ChessDataService.html",
    "title": "Class ChessDataService | Chess",
    "summary": "Class ChessDataService Namespace DataLayer.DataServices Assembly DataLayer.dll public class ChessDataService : IChessDataService Inheritance object ChessDataService Implements IChessDataService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChessDataService(ChessContext, IDataService) public ChessDataService(ChessContext context, IDataService dataService) Parameters context ChessContext dataService IDataService Methods CreateBotGameAsync(string, bool) public Task<(ChessGame, ChessInfo)> CreateBotGameAsync(string userName1, bool white) Parameters userName1 string white bool Returns Task<(ChessGame, ChessInfo)> CreateChessModel(ChessInfo, ChessGame, string) public ChessModel CreateChessModel(ChessInfo chessState, ChessGame game, string sessionId) Parameters chessState ChessInfo game ChessGame sessionId string Returns ChessModel CreateGameAsync(string, string) public Task<(ChessGame, ChessInfo)> CreateGameAsync(string userName1, string userName2) Parameters userName1 string userName2 string Returns Task<(ChessGame, ChessInfo)> EndGame(int) public ChessGame EndGame(int chessId) Parameters chessId int Returns ChessGame GetGameAsync(int) public Task<ChessGame?> GetGameAsync(int chessId) Parameters chessId int Returns Task<ChessGame> GetGames() public IList<ChessGame> GetGames() Returns IList<ChessGame> MoveAsync(int, string, string) public Task<bool> MoveAsync(int chessId, string move, string FEN) Parameters chessId int move string FEN string Returns Task<bool> RemoveLastMove(int) public bool RemoveLastMove(int chessId) Parameters chessId int Returns bool"
  },
  "api/DataLayer.DataServices.DataService.html": {
    "href": "api/DataLayer.DataServices.DataService.html",
    "title": "Class DataService | Chess",
    "summary": "Class DataService Namespace DataLayer.DataServices Assembly DataLayer.dll public class DataService : IDataService Inheritance object DataService Implements IDataService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DataService(ChessContext) public DataService(ChessContext context) Parameters context ChessContext Methods CreateUser(string, string) public User? CreateUser(string username, string password) Parameters username string password string Returns User GetUser(int) public Task<User> GetUser(int id) Parameters id int Returns Task<User> GetUser(string) public Task<User> GetUser(string username) Parameters username string Returns Task<User> GetUsers() public IList<User> GetUsers() Returns IList<User> LogOut(string) public bool LogOut(string username) Parameters username string Returns bool RemoveLastMove(int) public bool RemoveLastMove(int chessId) Parameters chessId int Returns bool SignInUser(string, string) public bool SignInUser(string username, string password) Parameters username string password string Returns bool StartSession() public bool StartSession() Returns bool StopSession() public bool StopSession() Returns bool UpdateCustomization() public bool UpdateCustomization() Returns bool UpdatePassword(string) public bool UpdatePassword(string newPassword) Parameters newPassword string Returns bool"
  },
  "api/DataLayer.DataServices.IChessDataService.html": {
    "href": "api/DataLayer.DataServices.IChessDataService.html",
    "title": "Interface IChessDataService | Chess",
    "summary": "Interface IChessDataService Namespace DataLayer.DataServices Assembly DataLayer.dll public interface IChessDataService Methods CreateBotGameAsync(string, bool) Task<(ChessGame, ChessInfo)> CreateBotGameAsync(string userName1, bool white) Parameters userName1 string white bool Returns Task<(ChessGame, ChessInfo)> CreateChessModel(ChessInfo, ChessGame, string) ChessModel CreateChessModel(ChessInfo chessState, ChessGame game, string sessionId) Parameters chessState ChessInfo game ChessGame sessionId string Returns ChessModel CreateGameAsync(string, string) Task<(ChessGame, ChessInfo)> CreateGameAsync(string userName1, string userName2) Parameters userName1 string userName2 string Returns Task<(ChessGame, ChessInfo)> EndGame(int) ChessGame EndGame(int chessId) Parameters chessId int Returns ChessGame GetGameAsync(int) Task<ChessGame?> GetGameAsync(int chessId) Parameters chessId int Returns Task<ChessGame> GetGames() IList<ChessGame> GetGames() Returns IList<ChessGame> MoveAsync(int, string, string) Task<bool> MoveAsync(int chessId, string move, string FEN) Parameters chessId int move string FEN string Returns Task<bool> RemoveLastMove(int) bool RemoveLastMove(int chessId) Parameters chessId int Returns bool"
  },
  "api/DataLayer.DataServices.IDataService.html": {
    "href": "api/DataLayer.DataServices.IDataService.html",
    "title": "Interface IDataService | Chess",
    "summary": "Interface IDataService Namespace DataLayer.DataServices Assembly DataLayer.dll public interface IDataService Methods CreateUser(string, string) User? CreateUser(string username, string password) Parameters username string password string Returns User GetUser(int) Task<User> GetUser(int id) Parameters id int Returns Task<User> GetUser(string) Task<User> GetUser(string username) Parameters username string Returns Task<User> GetUsers() IList<User> GetUsers() Returns IList<User> LogOut(string) bool LogOut(string username) Parameters username string Returns bool SignInUser(string, string) bool SignInUser(string username, string password) Parameters username string password string Returns bool StartSession() bool StartSession() Returns bool StopSession() bool StopSession() Returns bool UpdateCustomization() bool UpdateCustomization() Returns bool UpdatePassword(string) bool UpdatePassword(string newPassword) Parameters newPassword string Returns bool"
  },
  "api/DataLayer.DataServices.StockFishService.html": {
    "href": "api/DataLayer.DataServices.StockFishService.html",
    "title": "Class StockFishService | Chess",
    "summary": "Class StockFishService Namespace DataLayer.DataServices Assembly DataLayer.dll public class StockFishService : IStockFishService Inheritance object StockFishService Implements IStockFishService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StockFishService() public StockFishService() Methods MoveFrom(string) public MoveModel MoveFrom(string FEN) Parameters FEN string Returns MoveModel StartNewStockFishGame() public void StartNewStockFishGame()"
  },
  "api/DataLayer.DataServices.html": {
    "href": "api/DataLayer.DataServices.html",
    "title": "Namespace DataLayer.DataServices | Chess",
    "summary": "Namespace DataLayer.DataServices Classes ChessDataService DataService StockFishService Interfaces IChessDataService IDataService"
  },
  "api/DataLayer.Entities.Chess.ChessGame.html": {
    "href": "api/DataLayer.Entities.Chess.ChessGame.html",
    "title": "Class ChessGame | Chess",
    "summary": "Class ChessGame Namespace DataLayer.Entities.Chess Assembly DataLayer.dll public class ChessGame Inheritance object ChessGame Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BlackId public int BlackId { get; set; } Property Value int BlackPlayer public User BlackPlayer { get; set; } Property Value User CreatedAt public DateTime CreatedAt { get; set; } Property Value DateTime GameType public GameType GameType { get; set; } Property Value GameType Id public int Id { get; set; } Property Value int Moves public List<Move> Moves { get; set; } Property Value List<Move> Result public GameResult Result { get; set; } Property Value GameResult WhiteId public int WhiteId { get; set; } Property Value int WhitePlayer public User WhitePlayer { get; set; } Property Value User"
  },
  "api/DataLayer.Entities.Chess.GameResult.html": {
    "href": "api/DataLayer.Entities.Chess.GameResult.html",
    "title": "Enum GameResult | Chess",
    "summary": "Enum GameResult Namespace DataLayer.Entities.Chess Assembly DataLayer.dll public enum GameResult Fields BlackWin = 1 Draw = 2 Ongoing = 3 WhiteWin = 0"
  },
  "api/DataLayer.Entities.Chess.GameType.html": {
    "href": "api/DataLayer.Entities.Chess.GameType.html",
    "title": "Enum GameType | Chess",
    "summary": "Enum GameType Namespace DataLayer.Entities.Chess Assembly DataLayer.dll public enum GameType Fields Bot = 0 Multiplayer = 1"
  },
  "api/DataLayer.Entities.Chess.Move.html": {
    "href": "api/DataLayer.Entities.Chess.Move.html",
    "title": "Class Move | Chess",
    "summary": "Class Move Namespace DataLayer.Entities.Chess Assembly DataLayer.dll public class Move Inheritance object Move Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChessGame public ChessGame ChessGame { get; set; } Property Value ChessGame ChessGameId public int ChessGameId { get; set; } Property Value int FEN [Required] public string FEN { get; set; } Property Value string Id public int Id { get; set; } Property Value int MoveString [Required] public string MoveString { get; set; } Property Value string"
  },
  "api/DataLayer.Entities.Chess.html": {
    "href": "api/DataLayer.Entities.Chess.html",
    "title": "Namespace DataLayer.Entities.Chess | Chess",
    "summary": "Namespace DataLayer.Entities.Chess Classes ChessGame Move Enums GameResult GameType"
  },
  "api/DataLayer.Entities.Users.Customization.html": {
    "href": "api/DataLayer.Entities.Users.Customization.html",
    "title": "Class Customization | Chess",
    "summary": "Class Customization Namespace DataLayer.Entities.Users Assembly DataLayer.dll public class Customization Inheritance object Customization Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties boardPref public string boardPref { get; set; } Property Value string customizationId public int customizationId { get; set; } Property Value int darkMode public bool darkMode { get; set; } Property Value bool piecePref public string piecePref { get; set; } Property Value string user public User user { get; set; } Property Value User userId public int userId { get; set; } Property Value int volume public int volume { get; set; } Property Value int"
  },
  "api/DataLayer.Entities.Users.Session.html": {
    "href": "api/DataLayer.Entities.Users.Session.html",
    "title": "Class Session | Chess",
    "summary": "Class Session Namespace DataLayer.Entities.Users Assembly DataLayer.dll public class Session Inheritance object Session Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties createdAt public DateTime createdAt { get; set; } Property Value DateTime endedAt public DateTime? endedAt { get; set; } Property Value DateTime? sessionId public int sessionId { get; set; } Property Value int user public virtual User user { get; set; } Property Value User userId public int userId { get; set; } Property Value int"
  },
  "api/DataLayer.Entities.Users.User.html": {
    "href": "api/DataLayer.Entities.Users.User.html",
    "title": "Class User | Chess",
    "summary": "Class User Namespace DataLayer.Entities.Users Assembly DataLayer.dll public class User Inheritance object User Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BlackGames public List<ChessGame> BlackGames { get; set; } Property Value List<ChessGame> Email public string Email { get; set; } Property Value string Id public int Id { get; set; } Property Value int Password [Required] public string Password { get; set; } Property Value string Salt public string Salt { get; set; } Property Value string Username [Required] public string Username { get; set; } Property Value string WhiteGames public List<ChessGame> WhiteGames { get; set; } Property Value List<ChessGame>"
  },
  "api/DataLayer.Entities.Users.html": {
    "href": "api/DataLayer.Entities.Users.html",
    "title": "Namespace DataLayer.Entities.Users | Chess",
    "summary": "Namespace DataLayer.Entities.Users Classes Customization Session User"
  },
  "api/DataLayer.HelperMethods.ChessMethods.html": {
    "href": "api/DataLayer.HelperMethods.ChessMethods.html",
    "title": "Class ChessMethods | Chess",
    "summary": "Class ChessMethods Namespace DataLayer.HelperMethods Assembly DataLayer.dll public static class ChessMethods Inheritance object ChessMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConvertMoveToColRow(string) Converts a move string in the format \"e2,e4\" into row and column indices for from and to squares. public static (int fromRow, int fromCol, int toRow, int toCol) ConvertMoveToColRow(string move) Parameters move string Returns (int fromRow, int fromCol, int toRow, int toCol) FindCheckBlockers(ChessInfo, King, Piece) Finds squares that block a check from a sliding piece (queen, rook, bishop) to the king. Adds these blocking squares to the chessState.Blockers list. public static void FindCheckBlockers(ChessInfo chessState, King king, Piece pieceChecked) Parameters chessState ChessInfo king King pieceChecked Piece GenerateFEN(ChessInfo) Generates the FEN string representation of the current chess position from the chessState. public static string GenerateFEN(ChessInfo chessState) Parameters chessState ChessInfo Returns string MakeMove(ChessInfo, MoveModel) Executes a move on the chessboard, updating the chessState accordingly. Handles promotions, en passant, castling, and updating FEN related state. public static void MakeMove(ChessInfo chessState, MoveModel move) Parameters chessState ChessInfo move MoveModel RankFileToRowCol(string) Converts a chessboard coordinate in file-rank format (e.g., \"e4\") to row and column indexes. public static (int, int) RankFileToRowCol(string fileRank) Parameters fileRank string Returns (int, int) A tuple with the corresponding row and col: (row, col). RowColToRankFile(int, int) Converts row and column indexes to a chessboard coordinate in file-rank format (e.g., 0,0 -> \"a1\"). public static string RowColToRankFile(int row, int col) Parameters row int col int Returns string"
  },
  "api/DataLayer.HelperMethods.Hashing.html": {
    "href": "api/DataLayer.HelperMethods.Hashing.html",
    "title": "Class Hashing | Chess",
    "summary": "Class Hashing Namespace DataLayer.HelperMethods Assembly DataLayer.dll public class Hashing Inheritance object Hashing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields random protected RandomNumberGenerator random Field Value RandomNumberGenerator saltBitSize protected const int saltBitSize = 64 Field Value int saltByteSize protected const byte saltByteSize = 8 Field Value byte Methods Hash(string) public (string hash, string salt) Hash(string password) Parameters password string Returns (string hash, string salt) Verify(string, string, string) public bool Verify(string password, string storedHash, string storedSalt) Parameters password string storedHash string storedSalt string Returns bool"
  },
  "api/DataLayer.HelperMethods.html": {
    "href": "api/DataLayer.HelperMethods.html",
    "title": "Namespace DataLayer.HelperMethods | Chess",
    "summary": "Namespace DataLayer.HelperMethods Classes ChessMethods Hashing"
  },
  "api/DataLayer.HubServices.GameSession.html": {
    "href": "api/DataLayer.HubServices.GameSession.html",
    "title": "Class GameSession | Chess",
    "summary": "Class GameSession Namespace DataLayer.HubServices Assembly DataLayer.dll public class GameSession Inheritance object GameSession Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BlackPlayer public string BlackPlayer { get; } Property Value string Id public string Id { get; set; } Property Value string IsReady public bool IsReady { get; } Property Value bool Player1 public string Player1 { get; set; } Property Value string Player2 public string? Player2 { get; set; } Property Value string WhitePlayer public string WhitePlayer { get; } Property Value string Methods Initialize() public bool Initialize() Returns bool"
  },
  "api/DataLayer.HubServices.html": {
    "href": "api/DataLayer.HubServices.html",
    "title": "Namespace DataLayer.HubServices | Chess",
    "summary": "Namespace DataLayer.HubServices Classes GameSession"
  },
  "api/DataLayer.IDataServices.IStockFishService.html": {
    "href": "api/DataLayer.IDataServices.IStockFishService.html",
    "title": "Interface IStockFishService | Chess",
    "summary": "Interface IStockFishService Namespace DataLayer.IDataServices Assembly DataLayer.dll public interface IStockFishService Methods MoveFrom(string) MoveModel MoveFrom(string fEN) Parameters fEN string Returns MoveModel StartNewStockFishGame() void StartNewStockFishGame()"
  },
  "api/DataLayer.IDataServices.html": {
    "href": "api/DataLayer.IDataServices.html",
    "title": "Namespace DataLayer.IDataServices | Chess",
    "summary": "Namespace DataLayer.IDataServices Interfaces IStockFishService"
  },
  "api/DataLayer.Migrations.AddUniqueIndexToUsername.html": {
    "href": "api/DataLayer.Migrations.AddUniqueIndexToUsername.html",
    "title": "Class AddUniqueIndexToUsername | Chess",
    "summary": "Class AddUniqueIndexToUsername Namespace DataLayer.Migrations Assembly DataLayer.dll A base class inherited by each EF Core migration. [DbContext(typeof(ChessContext))] [Migration(\"20250607184828_AddUniqueIndexToUsername\")] public class AddUniqueIndexToUsername : Migration Inheritance object Migration AddUniqueIndexToUsername Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/DataLayer.Migrations.ChessGameUpdate.html": {
    "href": "api/DataLayer.Migrations.ChessGameUpdate.html",
    "title": "Class ChessGameUpdate | Chess",
    "summary": "Class ChessGameUpdate Namespace DataLayer.Migrations Assembly DataLayer.dll A base class inherited by each EF Core migration. [DbContext(typeof(ChessContext))] [Migration(\"20250709100636_ChessGameUpdate\")] public class ChessGameUpdate : Migration Inheritance object Migration ChessGameUpdate Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/DataLayer.Migrations.ChessGameUpdate1.html": {
    "href": "api/DataLayer.Migrations.ChessGameUpdate1.html",
    "title": "Class ChessGameUpdate1 | Chess",
    "summary": "Class ChessGameUpdate1 Namespace DataLayer.Migrations Assembly DataLayer.dll A base class inherited by each EF Core migration. [DbContext(typeof(ChessContext))] [Migration(\"20250709111712_ChessGameUpdate1\")] public class ChessGameUpdate1 : Migration Inheritance object Migration ChessGameUpdate1 Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/DataLayer.Migrations.ChessgameAndMoves.html": {
    "href": "api/DataLayer.Migrations.ChessgameAndMoves.html",
    "title": "Class ChessgameAndMoves | Chess",
    "summary": "Class ChessgameAndMoves Namespace DataLayer.Migrations Assembly DataLayer.dll A base class inherited by each EF Core migration. [DbContext(typeof(ChessContext))] [Migration(\"20250614215033_ChessgameAndMoves\")] public class ChessgameAndMoves : Migration Inheritance object Migration ChessgameAndMoves Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/DataLayer.Migrations.InitialCreate.html": {
    "href": "api/DataLayer.Migrations.InitialCreate.html",
    "title": "Class InitialCreate | Chess",
    "summary": "Class InitialCreate Namespace DataLayer.Migrations Assembly DataLayer.dll A base class inherited by each EF Core migration. [DbContext(typeof(ChessContext))] [Migration(\"20250607180741_InitialCreate\")] public class InitialCreate : Migration Inheritance object Migration InitialCreate Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/DataLayer.Migrations.addedFENtomoves.html": {
    "href": "api/DataLayer.Migrations.addedFENtomoves.html",
    "title": "Class addedFENtomoves | Chess",
    "summary": "Class addedFENtomoves Namespace DataLayer.Migrations Assembly DataLayer.dll A base class inherited by each EF Core migration. [DbContext(typeof(ChessContext))] [Migration(\"20250630160221_addedFENtomoves\")] public class addedFENtomoves : Migration Inheritance object Migration addedFENtomoves Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/DataLayer.Migrations.addedUserRelationsToChessGames.html": {
    "href": "api/DataLayer.Migrations.addedUserRelationsToChessGames.html",
    "title": "Class addedUserRelationsToChessGames | Chess",
    "summary": "Class addedUserRelationsToChessGames Namespace DataLayer.Migrations Assembly DataLayer.dll A base class inherited by each EF Core migration. [DbContext(typeof(ChessContext))] [Migration(\"20250709113850_addedUserRelationsToChessGames\")] public class addedUserRelationsToChessGames : Migration Inheritance object Migration addedUserRelationsToChessGames Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/DataLayer.Migrations.added_moves.html": {
    "href": "api/DataLayer.Migrations.added_moves.html",
    "title": "Class added_moves | Chess",
    "summary": "Class added_moves Namespace DataLayer.Migrations Assembly DataLayer.dll A base class inherited by each EF Core migration. [DbContext(typeof(ChessContext))] [Migration(\"20250615205414_added_moves\")] public class added_moves : Migration Inheritance object Migration added_moves Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/DataLayer.Migrations.added_salt.html": {
    "href": "api/DataLayer.Migrations.added_salt.html",
    "title": "Class added_salt | Chess",
    "summary": "Class added_salt Namespace DataLayer.Migrations Assembly DataLayer.dll A base class inherited by each EF Core migration. [DbContext(typeof(ChessContext))] [Migration(\"20250607232018_added_salt\")] public class added_salt : Migration Inheritance object Migration added_salt Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/DataLayer.Migrations.email.html": {
    "href": "api/DataLayer.Migrations.email.html",
    "title": "Class email | Chess",
    "summary": "Class email Namespace DataLayer.Migrations Assembly DataLayer.dll A base class inherited by each EF Core migration. [DbContext(typeof(ChessContext))] [Migration(\"20250610164552_email\")] public class email : Migration Inheritance object Migration email Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/DataLayer.Migrations.html": {
    "href": "api/DataLayer.Migrations.html",
    "title": "Namespace DataLayer.Migrations | Chess",
    "summary": "Namespace DataLayer.Migrations Classes AddUniqueIndexToUsername A base class inherited by each EF Core migration. ChessGameUpdate A base class inherited by each EF Core migration. ChessGameUpdate1 A base class inherited by each EF Core migration. ChessgameAndMoves A base class inherited by each EF Core migration. InitialCreate A base class inherited by each EF Core migration. addedFENtomoves A base class inherited by each EF Core migration. addedUserRelationsToChessGames A base class inherited by each EF Core migration. added_moves A base class inherited by each EF Core migration. added_salt A base class inherited by each EF Core migration. email A base class inherited by each EF Core migration. refreshdb A base class inherited by each EF Core migration. removed_required_for_dev A base class inherited by each EF Core migration. removed_users_from_chessgame A base class inherited by each EF Core migration. trying_again A base class inherited by each EF Core migration."
  },
  "api/DataLayer.Migrations.refreshdb.html": {
    "href": "api/DataLayer.Migrations.refreshdb.html",
    "title": "Class refreshdb | Chess",
    "summary": "Class refreshdb Namespace DataLayer.Migrations Assembly DataLayer.dll A base class inherited by each EF Core migration. [DbContext(typeof(ChessContext))] [Migration(\"20250630160346_refreshdb\")] public class refreshdb : Migration Inheritance object Migration refreshdb Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/DataLayer.Migrations.removed_required_for_dev.html": {
    "href": "api/DataLayer.Migrations.removed_required_for_dev.html",
    "title": "Class removed_required_for_dev | Chess",
    "summary": "Class removed_required_for_dev Namespace DataLayer.Migrations Assembly DataLayer.dll A base class inherited by each EF Core migration. [DbContext(typeof(ChessContext))] [Migration(\"20250615204429_removed_required_for_dev\")] public class removed_required_for_dev : Migration Inheritance object Migration removed_required_for_dev Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/DataLayer.Migrations.removed_users_from_chessgame.html": {
    "href": "api/DataLayer.Migrations.removed_users_from_chessgame.html",
    "title": "Class removed_users_from_chessgame | Chess",
    "summary": "Class removed_users_from_chessgame Namespace DataLayer.Migrations Assembly DataLayer.dll A base class inherited by each EF Core migration. [DbContext(typeof(ChessContext))] [Migration(\"20250615205326_removed_users_from_chessgame\")] public class removed_users_from_chessgame : Migration Inheritance object Migration removed_users_from_chessgame Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/DataLayer.Migrations.trying_again.html": {
    "href": "api/DataLayer.Migrations.trying_again.html",
    "title": "Class trying_again | Chess",
    "summary": "Class trying_again Namespace DataLayer.Migrations Assembly DataLayer.dll A base class inherited by each EF Core migration. [DbContext(typeof(ChessContext))] [Migration(\"20250615205852_trying_again\")] public class trying_again : Migration Inheritance object Migration trying_again Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/DataLayer.Models.Chess.ChessModel.html": {
    "href": "api/DataLayer.Models.Chess.ChessModel.html",
    "title": "Class ChessModel | Chess",
    "summary": "Class ChessModel Namespace DataLayer.Models.Chess Assembly DataLayer.dll public class ChessModel Inheritance object ChessModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BlockCheckPositions public List<string> BlockCheckPositions { get; set; } Property Value List<string> Check public bool Check { get; set; } Property Value bool CheckMate public bool CheckMate { get; set; } Property Value bool Chessboard public Piece[][] Chessboard { get; set; } Property Value Piece[][] CurrentPlayer public string CurrentPlayer { get; set; } Property Value string FEN public string FEN { get; set; } Property Value string Id public int Id { get; set; } Property Value int IsWhite public bool IsWhite { get; set; } Property Value bool LastMove public string LastMove { get; set; } Property Value string Players public string[] Players { get; set; } Property Value string[] SessionId public string SessionId { get; set; } Property Value string"
  },
  "api/DataLayer.Models.Chess.CreateBotChessModel.html": {
    "href": "api/DataLayer.Models.Chess.CreateBotChessModel.html",
    "title": "Class CreateBotChessModel | Chess",
    "summary": "Class CreateBotChessModel Namespace DataLayer.Models.Chess Assembly DataLayer.dll public class CreateBotChessModel Inheritance object CreateBotChessModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PickedWhite public bool PickedWhite { get; set; } Property Value bool Player1 public string Player1 { get; set; } Property Value string"
  },
  "api/DataLayer.Models.Chess.CreateChessModel.html": {
    "href": "api/DataLayer.Models.Chess.CreateChessModel.html",
    "title": "Class CreateChessModel | Chess",
    "summary": "Class CreateChessModel Namespace DataLayer.Models.Chess Assembly DataLayer.dll public class CreateChessModel Inheritance object CreateChessModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Player1 public string Player1 { get; set; } Property Value string Player2 public string Player2 { get; set; } Property Value string"
  },
  "api/DataLayer.Models.Chess.MoveModel.html": {
    "href": "api/DataLayer.Models.Chess.MoveModel.html",
    "title": "Class MoveModel | Chess",
    "summary": "Class MoveModel Namespace DataLayer.Models.Chess Assembly DataLayer.dll public class MoveModel Inheritance object MoveModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Move public string Move { get; set; } Property Value string Promotion public char? Promotion { get; set; } Property Value char?"
  },
  "api/DataLayer.Models.Chess.html": {
    "href": "api/DataLayer.Models.Chess.html",
    "title": "Namespace DataLayer.Models.Chess | Chess",
    "summary": "Namespace DataLayer.Models.Chess Classes ChessModel CreateBotChessModel CreateChessModel MoveModel"
  },
  "api/DataLayer.Models.User.UserCreateModel.html": {
    "href": "api/DataLayer.Models.User.UserCreateModel.html",
    "title": "Class UserCreateModel | Chess",
    "summary": "Class UserCreateModel Namespace DataLayer.Models.User Assembly DataLayer.dll public class UserCreateModel Inheritance object UserCreateModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Password [Required] public string Password { get; set; } Property Value string Username [Required] public string Username { get; set; } Property Value string"
  },
  "api/DataLayer.Models.User.UserModel.html": {
    "href": "api/DataLayer.Models.User.UserModel.html",
    "title": "Class UserModel | Chess",
    "summary": "Class UserModel Namespace DataLayer.Models.User Assembly DataLayer.dll public class UserModel Inheritance object UserModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id public int Id { get; set; } Property Value int Username public string Username { get; set; } Property Value string"
  },
  "api/DataLayer.Models.User.UserSignInModel.html": {
    "href": "api/DataLayer.Models.User.UserSignInModel.html",
    "title": "Class UserSignInModel | Chess",
    "summary": "Class UserSignInModel Namespace DataLayer.Models.User Assembly DataLayer.dll public class UserSignInModel Inheritance object UserSignInModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Password [Required] public string Password { get; set; } Property Value string Username [Required] public string Username { get; set; } Property Value string"
  },
  "api/DataLayer.Models.User.html": {
    "href": "api/DataLayer.Models.User.html",
    "title": "Namespace DataLayer.Models.User | Chess",
    "summary": "Namespace DataLayer.Models.User Classes UserCreateModel UserModel UserSignInModel"
  },
  "api/DataLayer.html": {
    "href": "api/DataLayer.html",
    "title": "Namespace DataLayer | Chess",
    "summary": "Namespace DataLayer Classes ChessContext"
  },
  "api/Testing.UserTests.html": {
    "href": "api/Testing.UserTests.html",
    "title": "Class UserTests | Chess",
    "summary": "Class UserTests Namespace Testing Assembly Testing.dll public class UserTests Inheritance object UserTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TestTest() [Fact] public void TestTest()"
  },
  "api/Testing.html": {
    "href": "api/Testing.html",
    "title": "Namespace Testing | Chess",
    "summary": "Namespace Testing Classes UserTests"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Chess",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Chess",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Chess",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}